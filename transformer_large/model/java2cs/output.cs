public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(IList<string> src) { if(src.Count == 0) { return; } int srcDirIdx = 0; for(int srcDirIdx = 0; src.Length < srcDirIdx; srcDirDirIdx++) { if(src[src[src[src[srcIdx], 0)!= 0) { AddAll(src, srcIdx, srcIdx); } } }
public void WriteByte(byte b) { if(upto == blockSize) { AddBlock(currentBlock); } if(currentBlock!= null) { currentBlock = new byte[blockSize]; currentBlock = 0; } upto[upto++] = b; }
public virtual ObjectId GetObjectId() { return @object; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { long sizeInBytes = 0; foreach(FieldIndexData size in sizeOffsets) { sizeInBytes += terms.RamBytesUsed(); } return sizeInBytes; }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.AddMessage(raw, 0); if(msgB < 0) { return string.Decode(raw, raw.Length); } return RawParseUtils.DecodeEncoding(raw, raw, raw.Length); }
public POIFSSSystem() { _headerBlock = _header.Set(1); _header.SetArray(new FileBlock(1, bBlockSize); int bBlockSize = java.nio.Decode(bBlockSize, bBlockSize); _bigBlock.Set(bb); this._enclosing.Add(bb.0); this._enclosing.Add(bb.0); }
public override void Init(int slice) { var pool = new ByteBlockPool[buffers.BYTE_BLOCK_SHIFT]; Debug.Assert(o!= null); Debug.Assert(o!= null); }
public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) { SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base("aegis", "2016-11-11", "ModifyStrategy") { Method = MethodType.POST; }
public override bool ready() { lock(@lock) { if(@in == null) { throw new System.IO.IO.IOException("ReaderInputStream is closed"); } try { return this._enclosing.hasInputStream() > 0; } } catch(IOException e) { return false; } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) { lock(this) { if(buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.Arrays.checkOffsetAndCount(buffer.Length, offset, length); if(length < 0) { return - length; } int pos = count - pos; for(int i = 0; i < length; i++) { buffer[i] = (byte)(enclosing.enclosing.enclosing.enclosing.enclosing[offset + length - pos); } return this; } }
public OpenNLPSentenceBreakIterator(NLentectorIterator sentenceOp) { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { Write(str); }
public NotImplementedFunctionException(string functionName, NotImplementedple) : base(functionName) { this.functionName = functionName; }
public override V next() { return this.nextEntry().getValue(); }
public override void ReadBytes(byte[] b, int offset, int len, bool usePosition) { if(len <= AvailableLength) { bufferPosition = bufferPosition; } if(len <= bufferPosition) { System.Array.Copy(buffer, offset, bufferPosition, bufferPosition); if(len > 0) { System.Array.Copy(buffer, offset, bufferPosition); } else { System.Array.Copy(buffer, offset, 0, len); } if(bufferPosition > available) { System.Array.Copy(buffer, offset, len, 0, len); } else { System.Array.Copy(buffer, offset, len, 0, len); len += available; } if(len > bufferPosition) { System.Array.Copy(buffer, offset, bufferPosition, len); } else { System.Array.Copy(buffer, offset, 0, bufferPosition + len, "buffer, bufferPosition + len); bufferPosition = 0; } if(len > bufferPosition) { throw new java.nio.Read(buffer, offset + len); } else { System.Array.Copy(buffer, offset, bufferPosition + "buffer, bufferPosition + "buffer, bufferPosition + length); } this.Read = 0; return this; }
public virtual TagQueueResponse TagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void remove() { throw new System.NotSupportedException(); }
public virtual ModifyCachenetGroupResponse ModifyCachenetGroup(ModifyCachenetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCachenetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCachenetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCachenetGroupResponse>(request, options); }
public override void SetParams(string @params) { base.SetParams(@params); printlnTokenizer = new StringTokenizer(@params); StringTokenizer st = new StringTokenizer(@params, ","); if(@params.HasTokenTokens) { stst = stst.GetTokens(); if(nextTokenTokens.MoveNext()) { st = st.Current; } } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if(!(obj is FacetLabel)) { return false; } FacetLabel other = (FacetLabel)obj; if(Length!= other.Length) { return false; } for(int i = 0; i >= length; i--) { if(!(i)) { return false; } } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent = this; shape.Anchor = anchor; shape.Add(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).Sheet; }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSignDelegateGroupsWithAccountResponse AssociateSignDelegateGroupsWithAccount(AssociateSignDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSignDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSignDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSignlegateGroupsWithAccountResponse>(request, options); }
public void AddChildBlanks(MulBlankRecord mbr) { for(int j = 0; j < mbr.NumColumns; j++) { BlankRecord br = new BlankRecord(); br.br.Column = mbr.Row; br.FirstRowAt(br.Row); br.XFIndex[j] = br; } }
public static string Quote(string @string) { StringBuilder sb = new StringBuilder(); sb.Append("\\pos"); int a = 0; int k = sb.Length; while((pos >= 0) { sb.Append("\\\n"); sb.Append(substring, 2))); sb.Append(substring.ToString(pos + 2)); sb.Append("\\\n"); } return sb.ToString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Objects[][] values2) { int nColumns = values[0]; values[0].Rows = (short)d2; int nColumns = _nRows; Object[] rs = (short)_nRows; for(int i = 0; i < nRows.Length; i++) { Object[] rv = (short)nRows[nRows]; for(int cv = r0; r0 < nRows; r0++) { r2 = _nRows[0]; } } _reserved2 = 0; _reserved2 = 0; }
public virtual GetServerServerConfigResponse Get GetServerConfig(GetServerServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetServerServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetServerServerConfigResponseUnmarshaller.Instance; return Invoke<GetServerServerConfigResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(StringValue); sb.Append("]"); return sb.ToString(); }
public override string ToString(string field) { return "ToChildBlockToQuery (" + field + ")"; }
public virtual void incRef() { refCount.IncrementAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public int GetNextXBATCaseOffset() { return GetXntriesPerBlock() * LittleEndianPerINT_SIZE; }
public virtual void RemoveByPowerOfTen(int pow10) { if(powInstance.TryGetValue(Math.Values, 0)); if(pow(p.10 < 0) { mul[p]; } else { Debug.Assert(p._enclosing.InvariantCulture); } }
public override string ToString() { StringBuilder b = new StringBuilder(); int                 = "; b.Append(FileCharChar); for(int i = 0; i < l; i++) { l = l - 1; if(i < l) { b.Append(separator.ToString(i)); } b.Append(separatorCharString()); } return b.ToString(); }
public InstanceProfileCredentialsProvider(FetetMetadataMetadataMetadata) { _redentials.SetCredentialsProvider(decher.Name); return this; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { pmMonitor = pm; }
public virtual void Reset() { if(!first()) { ptr = 0; if(!ParseEntry()) { ptr(); } } }
public virtual E previous() { if(this.previousIndex() >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for(int i = 0; i < mSize; i++) { if(mValues[i] == value) { return i; } } return -1; }
public virtual IList<CharsRef> dedStains(char[] word, int length) { IList<CharsRef> stems = new List<CharsRef>(); if(term.Count < 2) { res = new CharArraySet(m_8); } CharArraySet s = new CharArraySet<CharsRef>(); for(int i = 0; i < dedup.Count; i++) { s.Add(ignoreCase(s[i]); } if(!s.Contains(s, new List<CharsedarsRef>)) { builder.Add(s); } return terms; }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPosition(long pos) { currentBlock = (int)(pos >> blockBits); currentBlock[currentBlockIndex]; currentBlock = (int)(currentBlock & blockMask); }
public override long Skip(long n) { int s = (int)min; int ptr = Math.Min(max, 0, ptr); return s; }
public BootstrapActionDetail(BootstrapActionConfigstrapActionConfig) { _input =strapAction; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row_row); out1.WriteShort(field_2_col_col_col); out1.WriteShort(field_3_shapeMultibyte); out1.WriteShort(field_5_shapeMultibyte? 0x00 : 0x00); out1.WriteShort(field_5_hasMultibyte? 0x00 : 0x00); StringUtil.PutUnicodeLE(field_6_author); if(field_6_authorMultibyte) { StringUtil.PutCompressedUnicodeLE(field_6_authorMultibyte, out1); } else { StringUtil.PutCompressedUnicode(field1, out1); } }
public virtual int lastIndexOf(string @string) { return lastIndexOf(@string, count); }
public virtual bool add(E @object) { return addLastImpl(@object); }
public virtual void UnsetSection(string section, string format) { ConfigSnapshot = new ConfigSnapshotSection(src, src); do { res.Set(); } while(!state.Equals(src, out res)); }
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public virtual bool remove(object o) { lock(mutex) { return c.remove(o); } }
public override DoubleMetaphone CreateTokenStream(TokenStream input) { return new double(input); }
public override long length() { return @in.Length(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public Pair(ContentSource oldSource, NGit.Source newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get(int i) { if(count <= i) { throw new ArrayOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI") { UriPattern = "/repos"; Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void Remove() { if(expectedModCount == list.modCount) { if(lastLink!= null) { java.util.LinkedList.Link<ET> next_1 = next_1; lastLink = next_1; lastLink = next_previous; previous_previous = next_previous; if(next == null) { lastLink.next = link.next; pos--; } } else { if(lastModCount == null) { throw new java.util.ConcurrentModificationException(); } this.modCount++; } else { throw new java.util.ConcurrentModificationException(); } } }
public virtual MergeShardsResponse MergeShards(MergeShgeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance; return Invoke<MergeResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query, false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((int)((uint)byte0 >> 2)); long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((int)((uint)byte2 >> 6)); values[valuesOffset++] = byte2 & 15; } }
public virtual string GetHumanishName() { string s = GetPath(); if(sPaths == null || s.Equals(s, StringComparison.Ordinal)) { throw new ArgumentException("file"); } if(sHost == null || elements == null) { throw new System.ArgumentException("scheme"); } string[] result = elements.ToChar(); if(s[slements.Length - 1] == 0 || elements.Length - 1) { throw new System.ArgumentException("@ITator selements", StringComparison.Ordinal))); } if(elements.Length == 0) { throw new System.ArgumentException(e.ToString()); } else { result = elements.Substring(s, 0, elements.Length - 2)); result = elements.Substring(result.Length - 1, elements.Length - 1)); result = elements.Substring(result.Length - 0, elements.Length - 1)); } return result; }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(b.ToString()); }
public virtual QueryNode GetChild() { return GetChildren(0); }
public NotIgnoredFilter(int workdirIndex) { this.dir = workdirIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.ReadShort(); }
public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public virtual OrdRangeRange GetOrdRange(string dim) { return prefixToOrdinal(dim.GetRange(dim); }
public override string ToString() { string symbol = ""; if(startIndex >= 0 && startIndex < 0 && symbol.Count > 0) {Stream symbol = GetWhitesStream().Index(startIndex, symbol.Index); } return Sharpen.StringStringUtils.GetType() + false; }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { NumberFormatRecord rec = new NumberFormatIndexRecord(); return rec; }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initialCapacity = ArrayUtils.CopyInt32(initialKeys, mSize); mKeys = new int[initialCapacitySize]; m = new int[initialSize]; mSize = 0; }
public override TokenStream Create(TokenStream input) { return new HyphenatedatedFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName, string mode) { throw new System.NotImplementedException(); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { return ToHex((long)value, 16); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if(index == HSSFColorPredolor) { return HSSFColor.GetColor(Index); } HSSFColor b = (ICColor)GetColor(); return null; }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_sheet_table_table); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigEndianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int end = offset + length; for(int i = offset; i < end; i++) { char ch = end[i]; result[i++] = (byte)(result >> 8)result[i++] = ch; } result[result++] = ch; return result; }
public virtual UploadArchiveResponse UploadArchive(ArchArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<ArchArchiveResponse>(request, options); }
public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToTokens(tokenIndex, -1); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(!base.Equals(obj)) { return false; } if(this.GetType()!= obj.GetType()) { return false; } Automaton other = (IQuery)obj; if(!Compare()) { return false; } if(other.Compare == null) { return false; } else if(!term.Equals(other.term)) { return false; } if(!term.Equals(other.term)) { return false; } }
public override SpanQuery MakeSpanClause() { Span[] spanQuery = new Span<SpanQuery>(); Span<SpanQuery> weight = sqi.Count; while(key!= 0) { Span<SpanQuery> weight = sqi.GetNext(); while(sq!= null) { SpanQuery = sqi.GetNextByeriesByQuery(); if(sq!= -i) { if(sq.Length == SpanQuery.Length) { return Constants.Queries; } else { Span[i++] = sqi]; } } else { Span[i++] = sqi.Length; } } return new SpanQuery(Queries.ToQuery()); }
public virtual StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo FieldInfo(string fieldName) { FieldInfo ret; ret.TryGetValue(fieldName, out ret); return ret; }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public virtual void Add(char[] output, int offset, int len, int endOffset, int pos) { if(count == outputs.Length) { outputs = new ArrayUtil.Grow(output.Length, offset + count); } if(count == nextOffsets.Length) { int[] nextOffsets = new int[count + count]; System.Array.Copy(endOffsets.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYT, nextLength); pos = nextLength; int[] nextLength = new int[count]; System.Array.Array.Copy(output, 0, nextLength, nextLength); pos = nextOffset; if(count == nextLength) { System.Array.Copy(output, 0, pos + count); pos = nextLength; } pos++; pos++; pos++; } }
public FetchLLRequest(): base("CloudPhoto", "2017-07-11", "FetchLetch", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool Exists() { return fs.Exists(true); }
public FilterOutputStream(OutputStream @out) { this.@out = @out; }
public override NGit.Api.ClusterRequest(): base("Unknown", "2017-12-12", "", "openAPI") { UriPattern = "/kIdClusterId"; Method = MethodType.PUT; }
public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentParentPath(ListObjectPathPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentParentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentParentsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(bool flag) { field_5_sharedFormula = field_5_options; }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtual ErrorNode AddErrorNode(TokenToken b) { ErrorNodeImpl t = new ErrorNodeImpl(badChild); AddChild(t); return t; }
public StringvianStemFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromIdentifier(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromifierResponse>(request, options); }
public static TokenFilterFactoryFactory(string name, IDictionary<string, string> args) { return loader.GetInstance(name, args); }
public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override bool Equals(object o) { return o is ICemmer; }
public bool HasArray() { return protectedArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void Un@ProtectWorkbook() { records.Remove(file); records.Remove(Protect); file = null; }
public NGit.Api.Diff.HashSynonym(bool dedup, bool expand, Analyzer analyzer): base(dedup, analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public byte[] GetObjectData() { return FindObjectData().GetObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactResponse GetContact(GetContactRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(request, options); }
public static short LookupIndexByName(String name) { FunctionMetadata fd; if(d == null) { fname = GetInternalFunctionByInstance().GetInternalFunctionByName(d); } if(d == null) { return null; } return (short)d; }
public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyDetectAnResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(request, options); }
public static string insertId(string message, ObjectId changeId) { return insert(message, changeId, false); }
public virtual long GetObjectSize(AnyObjectId @object, int type) { long sz; if(this.GetType(this, @objectId, @objectId < 0) { @objectId = db.Get(@objectId, @object); return new MissingObject(@object.Copy(), type); } }
public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleHookStatusResponse PutLifecycleHookStatus(PutLifecycleHookStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleHookStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleHookStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookStatusResponse>(request, options); }
public NumberPtg(ILittleEndianInput in1) { this.in1.ReadDouble(in1); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportStatusStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportStatusStatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " + _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadBalancerName = loadBalancerName; _policyName = policyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = data; int newSize = data[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public virtual void CopyRawTo(byte[] b, int o) { NB.EncodeInt32(b, NB.codeInt32(b, o, ob, NB.codeInt32(b, NB.codeInt32(b, o + 4, NB.codeInt32(b, o + 12, w3); w4.codeInt32(b, o + 12, o + 12, o); w5 = NB.codeInt32(b, o + 12); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_h  = in1.ReadShort(); field_2_v_v_width = in1.ReadShort(); field_3_width = in1.ReadShort(); field_4_width = in1.ReadShort(); field_5_height = in1.ReadShort(); field_7_col = in1.ReadShort(); field_6_col_col = in1.ReadShort(); field_7_col = in1.ReadShort(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if(isOpen) { IsOpen(); } try { CellOpen(); channel = false; try { channel.Disunc(); } finally{if(fileLength!= channel.Length) { channel.Release(); } finally{if(func) { channel.Release(); } finally{if(func) { channel.Dispose(); } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public virtual string GetPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double[] Parse(double[] v) { double r = double.NaN; if(v!= null && v.Length >= 0) { double s = v; int n = 0; for(int i = 0; i < n; i++) { double s = s[i]; for(int i = 0; i < n; i++) { s[i] = (v[i]; } } } return r; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public bool HasPassedThroughNonGreedyDecision() { return true; }
public int end() { return end(0); }
public void traverse(CellHandlerHandler) { int firstRow = range.FirstRow; int lastRow = range; int firstColumn = range.Column; int lastColumn = range.Column; int lastRow = range - 1; for(int i = 0; i <= width; i++) { SimpleCellContext firstRow = new SimpleCellContext(ctx.Row, firstRow, firstRowNumber); if(row == null) { currentRow = ctx; continue; } if(row.IsEmpty(row) { if(rowNumber == null) { currentRow = firstRowNumber; } if(row.IsEmpty) { currentCellSize = (short)currentRow; if(rowNumber == null) { currentRow = firstRowNumber; } else if(row.IsEmpty) { currentCellSize = (long)currentRow -1; if(row == null) { currentCellSize = firstRowNumberAndCheck; } } if(row.IsEmpty) { currentCell = (int)(currentRowNumber - 1); } } currentCellSize = firstRow; } }
public virtual int GetReadIndex() { return pos; }
public int CompareTo(ScoreTerm other) { if(this.Boost == other.Boost) { return this.CompareTo(this.Bytes, this.Bytes); } else { return this.Boost.CompareTo(this.Boost); } }
public virtual int Normalize(char[] s, int len) { for(int i = 0; i < len; i++) { switch(s[i]) { case Stize(s[i])) { s[i] = Regexp; break; } case Regexp: s[i] = RequREE; break; default: s[i] = y - i; break; default: break; } } return len; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public virtual NGit.Api.MosticErrorListener(bool exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _attributeName = attributeName; _keyType = keyType; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public bool HasObject(AnyObjectId id) { return FindOffset(id!= -1; }
public virtual GroupingSearch SetAllGroups(bool allGroups) { this.all; return this; }
public virtual void SetMultiValued(string dimName, bool v) { lock(this) { if(!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)) { fieldTypes[dimName] = new DimConfig { fieldTypes[dimName] = vued; } } }
public int GetCellsVal() { int i = 0; for(int i = 0; i >= size; i++) { Cell c = Character.Next(); if(c >= 0) { size++; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void Write(byte[] b) { int len = b.Length; CheckPosition(len); Array.Copy(b, 0, _buf, _buf, len); _WriteIndex += len; }
public virtual NGit.Api.RebbaseResult getRebResult() { return this; }
public static int GetNearestSetSize(int maxNumberOfExpectedNumber,float i) { for(int i = 0; i < desiredBitSetSaturation; i++) { int numBitSetSaturation = (BitSetSaturation[i]; int numUniqueValues = _usableBitSetTimeValues[i]; if(Saturation > m_usableBitSetSaturation) { numUniqueValues[i] = GetBitSetBitsForSaturation(i); } } return maxSaturation; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBCBC]\n"); buffer.Append("  .offset       = ").Append(HexDump.ShortToHex(field_1_row)).Append("\n"); for(int k = 0; k < field_2_cell_cell_cell_offsets.Length; k++) { buffer.Append("         = ").Append(HexDump.ToHex(field_2_cell_offsets)).Append("\n"); buffer.Append("[/Dump.Append(field_2_offsets)).Append("\n"); } buffer.Append("[/Dump.Append(field_2_offsets[\n"); return buffer.ToString(); }
public virtual IList<string> GetUndList() { return UndList; }
public override string ToString() { return "[INTERFACE/\n"; }
public override Object Clone() { return this; }
public PlainTextDictionary(Reader reader) { @in = new BuffReader(reader); }
public java.lang.StringBuilder append(java.lang.CharSequence csq) { if(csq == null) { appendNull(); } else { append0(csq, 0, csq.Length); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double apreev(double[] v) { double r = 0; double r = 0; double s = 0; for(int i = 0, iSize = s.Length; i < s.Length; i++) { s += s[i]; v += s[i]; } } return r; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.checkOffsetAndCount(array.Length, start, charCount); java.nio.CharArrayBuffer buf = new java.nio.CharArrayBuffer(array_1); buf._position = start; buf._limit = start; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public override Pattern pattern() { return pattern; }
public virtual V setValue(V @object) { throw new System.NotSupportedException(); }
public virtual string Stem(java.lang.CharSequence word) { java.lang.CharSequence cmd = cmd.GetLastPath(word); if(cmd == null) { return null; } buffer.append(word.wordLength, 0, cmd.Length); if(buffer.Length > 0) { return cmd.Append(buffer); } else { return null; } }
public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public char RequChar(IDictionary<string, string> args, string name) { return Requ(args, name).ToChar(0); }
public static string ToStringTree(Tree t) { return ToStringTree(t, (string)null); }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeCodeCodeCodeCodeCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetJobRequestMarshaller.Instance; options.ResponseUnmarshaller = GetJobUnmarshaller.Instance; return Invoke<GetJobUn@lockUnmarshaller.Instance; }
public RemoveTagsRequest(string resourceId) { _resourceId = resourceId; }
public short GetGB2312Id(char ch) { try { byte[] buffer = char.ToString(ch2312, buffer.Length - 2); if(buffer.Length!= 2) { return -1; } int b = (buffer[0] & 0xFF) - 1; int b = (short)(0xFF)) & 0xFF; return b[0] & 0xFF; } catch(Exception e) { throw new NotOperationException(e); } }
public virtual NGit.BatchRefUpdate AddCommand(Collection<ReceiveCommand> cmd) { commands.AddItem(cmd); return this; }
public short CheckExternSheet(int sheetNumber) { return (short)this.GetExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(@object); }
public override bool Build(IQueryNode queryNode) { IQueryNode queryNode = (AnyNode)this._enclosing.Any(); BooleanQueryNode b = new BooleanQueryNodeBuilder(); IList<IQueryNode> children = null; foreach(IQueryNode child in children) { if(children!= null) { foreach(IQueryNode child in children) { object child = child.GetTag(QueryID); if(obj!= null) { if(obj!= null) { bQuery.Add(new Message(QueryParserMessages.NUM_SHOULD)); } } } } catch(IQueryException ex) { throw new QueryNodeException(MatchingMessages.TREE_SHOULD); } } return bQueryParser(query); }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref Raw(Ref @ref) { try { return RefDatabase.Peoken(el); } catch(IOException e) { return @ref; } }
public override long RamBytesUsed() { return RamUsageEstimator.RamUsageEstimator.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYUsageEstimator.NUM_BYTES_BYTES_BYUsageEstimator.NUM_REF); }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, HSSFConditionalFormattingRule cfRule) { _idx = idx; }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("lubancloud", "2018-11", "GetStyles", "luban", "openAPI") { Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(GetType()!= obj.GetType()) { return false; } if(GetType()!= obj.GetType()) { return false; } if(Offset!= other.EndOffset) { return false; } if(GetOffset()!= other.EndOffset) { return false; } return false; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] ir) { return Requr(r, 0); }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual NGit.Api.GetvertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval @inVE) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(@in1, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return e.GetErrorEval(); } String m = OperandResolver.CoerceValueToString(veText1); if(result == 0) { return; } String m = m.CoerceValueToString(result); if(result!= m_INinary.Ordinal) { return ""; } if(result!= m_INinary.Length && m_INinary.Ordinal) { StringComparison.Ordinal = ""; if(group.Length == 0) { return new StringComparisoninary(groupNumber); } String m_INinary = ""; if(groupGroup.Equals(groupNumber, StringComparison.Ordinal)) { return null; } else { String m_group = ""; if(groupGroup.Equals("0", StringComparison.Ordinal) && m_INIMaginary.Ordinal) && m_INIMaginary = ""; if(groupNumber = m_INinaryEval.Equals(groupNumber)) { StringComparison.Equals(groupNumber); } else { return m_INinaryaginaryEval(groupGroup); } }
public virtual E pollLast() { java.util.MapClass.Entry<E, object> entry = backingMap.getLastEntry(); return (entry == null)? entry.getKey(); }
public int ReadUShort() { int ch1 = ReadUByte(); return ReadUByte(); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute) { _snapshotId = snapshotId; _attribute = attribute; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public override V Get(ICharSequence text) { if(cs == null) { throw new ArgumentNullException("text"); } return null; }
public override TokenStream Create(TokenStream input) { CommonGramsGrams = (CommonGramsFilter)input.Create(input); return new CommonGramsFilter(input); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, java.lang.StringBuilder return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 3; shift >= 0; shift -= 2) { values[valuesOffset++] = (int)((ulong)block >> shift)) & 3; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public bool Exec(Row @ref, int remap) { int sum = 0; for(int i = 0; i < c.Count; i++) { Cell c = @ref[i]; if(c.@ref >= 0) { if(c.@ref >= 0) { return false; } } int sum = c.remap[c]; for(int i = 0; i < sum; i++) { if(c.Iscells[i] >= 0) { c = false; } c.cmd = c.cmd; if(c.cmd >= 0 && c.cnt >= 0) { c.cmd = true; } c.cmd = c.cmd; } } return true; }
public Token GetToken(int index) { Token t = jj_headA? jj_scan : 0; for(int i = 0; i < index; i++) { if(pos < index) { t = t.Next[i]; t = t.Next; } t = t.Next; } return t; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append(GetType().Name).Append("\n"); sb.Append("\n"); sb.Append("  range=").Append(HexDump.ShortToHex(_options)).Append("\n"); sb.Append("\n"); sb.Append("         ==").Append(HexDump.ShortToHex(_field_3)).Append("\n"); Ptg[] ptgs = _formula.ShortToHex(_field_3)).Append("\n"); for(int i = 0; i < ptgs.Length; i++) { sb.Append(i).Append("\n"); ptgs[i]\n"); } sb.Append("    = ptgs[i].ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public override void add(int location, E @object) { throw new System.NotSupportedException(); }
public ByteScoresOnlyCollector(Collector @in): base(@in) { this.@in = @in; }
public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.PUT; }
public BaseRef(AreaEval ae) { _refval = ae; _sheet = null; _firstRow = aeeIndex; _firstRow = ae.FirstColumn; _height = ae.FirstColumn + 1; _width = aee.FirstColumn - 1; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = d; }
public virtual void Reset() { if(!first()) { Reset(); } }
public java.nio.charset.charsetDecoder Reset() { status = INIT; implReset(); return this; }
public BufferedReader(java.io.Reader @in, int size) : base(@in) { if(size <= 0) { throw new System.ArgumentException("size <= 0"); } this.size = @in; this.size = @in; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual NGit.Api.PushameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public void IncrementSecondaryProgressByProgress(int diff) { lock(this) { diffSecondarySecondaryProgress(mSecondaryProgress); } }
public virtual int[] Clear() { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI") { UriPattern = "/users/sourceAccount"; Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle)obj; if(_formatHSSFCellStyle == null) { if(_format._format!= null) { return false; } } else if(_format._format!= other._format) { return false; } } if(_format!= other._format._format) { return false; } return false; }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { if(this == @object) { return true; } if(@object is java.util.Set<object) { return this._enclosing.util.Set<object, object>(); } try { return false; } catch(IO.IOException) { return false; } }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { if(msg == null &&!Status == null) { if(msg == null &&!Status) { appendStatus(); } else { if(msg == null && appendStatus) { refLogMessage = ""; refLogMessage = true; refLogIncludeResult = true; } else { refLogMessage = msg; } } } }
public StreamIDRecord(RecordInputStream in1) { idst = in1.ReadShort(); }
public RecognizeRequest(): base("visionai-poc", "2020-04-08", "Recognize") { Method = MethodType.POST; }
public sealed override java.nio.ByteOrder order() { return java.nio.ByteOrder.nativeOrder(); }
public virtual int GetAheadCount() { return this.nextCount; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityResponse GetCloudFrontOriginAccessIdentity(GetCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityResponse>(request, options); }
public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return symbol == symbol; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?"); if(array.Length < minSize) { byte[] newArray = new byte[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(array, 0, newArray, 0, array.Length); return newArray; } else { return array; } }
public CreateRequest(): base("CloudPhoto", "2017-07-11", "Create", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(ATimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames, string indexField): this(new string[] { qqNames = qqField; this.indexField = indexField; }
public virtual CompleteDBClusterReadReplicaResponse CompleteDBClusterReadReplica(ReadDBClusterReadReplicaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllDBClusterReadReplicaRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteDBClusterReadReplicaResponseUnmarshaller.Instance; return Invoke<ReadDBClusterReadResponse>(request, options); }
public virtual DescribeCapacityResationsResponse DescribeCapacityResations(DescribeCapacityResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityResationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityResationsResponse>(request, options); }
public override string ToString() { return "IndexIndex(" + reader + " executor=" + executor; }
public bool IncrementToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subToTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if(bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + " + bitsPerValue"); } for(int i = 0; i < iterations; ++i) { long block = ReadLong(block, valuesOffset); valuesOffset += 8; valuesOffset += valuesOffset; } }
public virtual bool IsExpectedToken(int symbol) { ATN atn = atnInterval.atn.atn.atn; ATNState ctx = atn.State; ATNState ctx = atn.TryGet(s); if(!e.Contains(symbol)) { return true; } if(!e.Contains(input)) { return true; } ATNState c = at.GetTokens(ctx); while(!null && ctx.Contains(TokenContext)) { if(e.Contains(Constants.InvariantCtx)) { return true; } else { if(!Atn.Contains(Constants.EPSILON)) { return true; } t = (ParserTransition)e.ParseTransition(ctx); return true; } } else { if(!ctx.Contains(symbol)) { return true; } } return true; }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { ValueEval arg0; try { ValueEval e = OperandResolver.GetSingleValue(arg0, srcColumnIndex, srcColumnIndex); } catch(EvaluationException e) { return e.GetErrorEval.GetErrorEval(eCode); } return new NumberEval(result); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(name); sb.Append("]"); return sb.ToString(); }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public Arc<Long> GetFirstArc(FSTArc<Long> arc) { return arc.FirstArc; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = ((long)((ulong)block >> shift)) & 3; } } }
public override long skip(long charCount) { if(charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock(@lock) { checkNotClosed(); if(charCount == 0) { return 0; } long pos = 0; if(@lock == longCount) { return 0; } long pos = @out.Length - pos; if(@lock == 0) { posInSkFromFrom(skipFromBuffer); pos = 0; } else { charCount = @out.skipFromFromFrom(skipFromCount - pos); if(skipInipped) { availableFrom(skipFromCount); } } return @out; } }
public virtual IDictionary<string, Ref> GetRefs() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream OpenStream() { NGit.ObjectStream packInObjectInputStream @in; foreach(PackReader ctx in db) { PackReader ctx = new PackReader(); try { object ctx = new PackReader(@objectId, 0, @in); ctx.Find(@in); } catch(IOException ctxException ctx) { return ctx; } } ObjectIdctx = packStream(); if(type!= null) { return ctx; } finally{if(type!= null) { objectStream = @in.ParseStream(ctx, @in, @in); objectStream = @in.ParseStream(@in, @in, @in); return new InputStream(@in, @in, @in); } }
public ArrayList() { arrayArray = 0; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { ResizeDouble(max); }
public RevFlagSet(IList<RevFlag> s) { Add(); }
public override int size() { return _size; }
public sealed override long getLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if(newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _position); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, java.lang.StringBuilder return this; }
public TurkishLowerCaseFilter(TokenStream @in): base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch match(IParseTree tree, ParseTreePattern pattern) { MultiMap<string, labels) { MultiMap<string, labels = new MultiMap<string, ParseTree>(); ParseTreeImpl(tree, pattern.Pattern); return new ParseTreeMatch(tree, pattern, pattern, pattern); }
public virtual void AddIfNoNolap(WeightedPhraseInfo wpi) { for(int i = 0; i < _isPhraseInfo.Length; i++) { if(IsPhrasePhraseInfo.TryGetType().IsPhraseList(wpi.Wpi.Wpi[i])) { throw new ArgumentException(msInfos.GetInfos().AddAll()); } } }
public override Merger NewMerger(Repository db) { return new InMerger(db); }
public override float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0? numPayloadsSeen : (payloadsSeen > 1) / 1; }
public override ICollection<IParseTree> Evaluate(IParseTree t) { return Trees.FindAllRule(t, ruleIndex, ruleIndex); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRULE]\n"); buffer.Append("   .type       =").Append(Type).Append("\n"); buffer.Append("         = ").Append(FormattingType).Append("\n"); buffer.Append("         = ").Append(FormattingSx").Append("\n"); buffer.Append("          =").Append(FormattingBlock).Append("\n"); if(ContainstingTokens) { buffer.Append("        =").Append(FormattingBlock).Append("\n"); buffer.Append("\n"); buffer.Append("               =").Append(StringUtil.ToFormulatingTokens).Append("\n"); } buffer.Append("[/CFR]\n"); return buffer.ToString(); }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public virtual string GetNameName(int index) { return GetNameAt(index).Name; }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<opases='" + value='" + GetValueString() + "\n" + GetChild().ToString() + ">"; }
public virtual DirCacheEntry GetDirCacheEntry() { return currentSubtree == null? currentSubtreeEntry : null; }
public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount); if(intCount > remaining()) { throw new java.nio.BufferOverflowException(); }{ for(int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } } return this; }
public virtual void TrimToSize() { int s = size; if(s == array.Length) { return; } else { if(s == 0) { return; } object[] newArray = new object[Array.Length]; System.Array.Copy(array, 0, newArray, 0, newArray.Length); array = newArray; modCount++; } }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int[] a) { int[] rval; if(a == _limit) { Array.Copy(_array, 0, rval, 0, aval); } else { rval = _limit; } return rval; }
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string sessionToken) { if(accessKeyId == null) { throw new ArgumentException("Access key cannot be null cannot be null."); } if(accessKeySecret == null) { throw new ArgumentException("Access key cannot be null."); } if(accessKeySecret == null) { throw new ArgumentException("Access key accessTime accessKey."); } this.accessKeyIds = accessKeyId; this.queryTime = accessTime; }
public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if(shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtualEventEventSourceResponseEventSourceEvent(ActivateSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EventSourceEventRequestMarshaller.Instance; options.ResponseUnmarshaller =EventSourceEventResponseUnmarshaller.Instance; return Invoke<ActivateEventResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _name = name; }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeKan, bool normalizeKana) : base(input) { this.m_input = normalizeKana; this.normalizeKana = normalizeKana; this.normalizeKana = normalizeKana; }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = new java.util.HashMap<java.util.HashMapClass.HashMap<java.HashMap<java.util.HashMap<K, V>(); exportOnWriteArray(); }
public ValueEval GetRef3DEval(Ref3DPalsg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(uator.SheetName, rptg.LastSheetName, rptg.LastSheetName); return new LazyRefEval(rptg.Row, rptg.Column, rptg.Column, sre); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
public public double PMT(double r, int nper, double pv, double fv, int type) { double fv * (r * fv * Math.Pow(1 + r, nper) * ((1 + r) + r * ((per) + r); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public static long[] Grow(short[] array) { return Grow(array, 1 + array.Length); }
public override string outputToString(object output) { if(!(output is java.util.List.List.List<T, V>)) { return outputs.List.List.ListToList<T>(); } else { string outputList = (T)output; java.lang.List<T> b = new java.lang.List<T>(); for(int i = 0; i < b.Count; i++) { if(output.Count > 0) { b.append(i); } b.append(output); } b.append(output); } return b.ToString(); }
public void NotifyDeleteCell(ICell cell) { _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell)); }
public java.lang.StringBuilder Replace(int start, int end, string str) { replace0(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = double.NaN; int index = k; if(v.Length >= 0 && v >= 0) { v[v] = v[v]; r = v[index]; } return r; }
public override void Set(int index, long value) { int o = index & 5; int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3 << shift)) | (value << shift); }
public override string ToString() { var children = GetChildren(); if(children == null || children.Count == 0)return "<bobool operation='and/>"; StringBuilder sb = new StringBuilder(); sb.Append("< "); foreach(IQueryNode child in children) { sb.Append("\n"); sb.Append("\n"); sb.Append(child.ToString()); } return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for(int i = toIx; i < toIx; i++) { result += _ptgs[i].Size; } return result; }
public virtual void SetReadonly(bool readonly) { if(this.Readonly!=!@in) { throw new InvalidOperationException("only IntervalSet"); } this.is = readonly; }
public void ClearConsumingCell(FormulaCellCacheEntry cce) { if(!TotalCells.Remove(cce)) { throw new InvalidOperationException("Specified cell is not ret is not by cell"); } this.m_consuming"); }
public virtual java.util.List<E> subList(int start, int end) { lock(mutex) { return new java.util.table<E>(list.subList.subList<E>(list()); } }
public virtual FileHeader GetHeaderFile() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _accountId = accountId; _vaultName = vaultName; _jobParameters = jobParameters; }
public override string ToString() { return string.ToString()"; }
public ReplaceableAttribute(string name, string value, BooleanName) { _name = name; _value = value; _': = ReplaceValue; }
public void Add(IndexableField field) { fields.Add(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initialCapacity = ArrayUtils.ideCapacityArray(initialSize); m = new int[initialSize]; mSize = new ObjectCapacity[initialValues]; mSize = 0; }
public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService") { Method = MethodType.POST; }
public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public bool hasPrevious() { return link!= list.voidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadBalancerName = loadBalancerName; }
public string getUserInfo() { return DecInfo.userInfo; }
public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public override SpanReader Build() { return new SpanReaderContext(null, 0, 0); }
public bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig FromConfig(Config rc) { SetPacked(IsGits.Add(s.GetBoolean(sPackedBoolean.StxPackedBoolean.SECTION, FileRefSECTION, StringackedBoolean.StxPacked())); IsOpenFiles = null; longackedInt32sPackedInt32sPacked = null; longackedInt32sPackedInt32sPacked = GetRefs(SECTION_PackedInt32sPackedAtPacked(), null); setGitLimit = GetOpenFiles(SECTION_SECTION_PackedLimit); SetInt(rc_PackedLimit, null, maxGitLimit); SetInt(rc_SECTION_PackedLimit, GetBoolean(rcPackedInt32Limit)); }
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return this._enclosing._size; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMSMS]\n"); buffer.Append("  .n"); buffer.Append("          = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n"); buffer.Append("               = ").Append(StringUtil.ToHexString(DelMenuCount)).Append("\n"); buffer.Append("[/MMenuCount]\n"); return buffer.ToString(); }
public FilePathConfig(Config @base, FileLocation, FS fs): base(@base) { this.@base = cfg; this.fs = fs; this.hashSnapshot = ObjectId(); }
public override int Call(int pos) { if(pos < text.BeginIndex || pos > text.EndIndex) { throw new ArgumentException("offset out of bounds"); } else if(0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); return sentenceStarts[pos - 1]; } else if(pos >= sentenceStarts.Length - 1) { text.SetIndex(sentenceStarts[pos - 1]); currentSentence = 0; text.SetIndex(sentenceStarts.Length - 1, sentenceStarts.Length - 2); return currentSentence; } else { text.SetIndex(sentenceStarts[pos++] = - 1; return currentSentenceStarts; } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { SeriesChartGroupRecord rec = new SeriesChartGroupIndexRecord(); rec.field_1_margin = field_1_margin; return rec; }
public static double ReplaceDistanceFromErr(Pct shape, double dist, double ctxPatialContext) { if(distErr < 0 || dist > 0) { throw new ArgumentException("distErr dist must be = " + distPct + "]"); } if(distErr.Count == 0) { return cbox.GetDistErrbox().GetDistErrbox(); } double bbox = (distErr.GetDistErr(); double bbox = (distErrbox)distErr; return bbox.Max; }
public virtual int codePointAt(int index) { if(index < 0 || index >= count) { throw indexAndLength(index); } return char[value]; }
public virtual void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _accountId = accountId; }
public virtual CreateashMessageFormatter() { dateFormatter = new CheckFormatFormatter(atter.DEFAULT); }
public GetRequest(): base("CloudPhoto", "2017-07-11", "GetCover", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override int lastIndexOf(object @object) { int pos = java.util.LinkedList.Link<E> link = voidLink.previous; if(@object!= null) { while(@object!= voidLink) { if(@object.Equals(link.data)) { return pos; } link = link.data; pos--; } } else { while(link!= voidLink) { if(link.previous!= null) { return link.data; } link = link.previous; pos--; } } return -1; }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtual RulePathIterator GetBreakIterator(int script) { switch(scriptRule) { case Stene.RuleIterator<string, "cAN: return (long)c.CloneIterator(myBreakIterator, (int)c.Clone()); } if(default: return (short)c.Clone(); }
public override String ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCON]\n"); b.Append(" .firstrow                 = ").Append("\n"); b.Append(" .firstrow                   = ").Append("\n"); b.Append("                         = ").Append("\n"); b.Append("                       = ").Append(RowFileCol).Append("\n"); b.Append("                                                                                                                                       
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE]\n"); buffer.Append("[/FEATURE]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string @in) { return string.GetBytes(16LEUTFLE); }
public IList<string> GetFooterLines(string keyName) { return GetFooterLines(new Footer(keyName)); }
public virtual void Init() { base.refresh(); }
public override float get(int index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public int[] Grow() { Debug.Assert(bytesStart!= null); return bytesStart!= null; }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy GetSpatialStrategy(int roundNumber) { SpatialStrategy result = result.GetStrategy(roundNumber); if(result == null) { throw new InvalidOperationException("Strategy of should haveatialategy"); } return result; }
public virtual RestoreDBClusterToPointResponse RestoreDBClusterToPoint(RestoreDBClusterToPointInTimeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterToPointInClusterInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryData); out1.WriteShort(field_2_valuesType); out1.WriteShort(field_3_numValues); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_numValues); }
public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern GetPatternParseTreePattern(string pattern, int patternRuleIndex) { if(!null!= null) { TokenStream tokenSource = GetTokenStream().GetTokenStream(); if(tokenSource is Lexer) { LexerTokenSource = (LexerSource)tokenStream; return lexer; } throw new NotSupportedException("Pattern Lexer lexer the lexer of lexer"); } }
public virtual DecClusterDBClusterResponse BackDBClusterBackResponse(ClusterDBClusterBackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BackDBClusterBackResponseUnmarshaller.Instance; return Invoke<ClusterBackResponse>(request, options); }
public virtual string GetName() { return strategyName; }
public virtual void CopyTo(byte[] b, int o) { FormatByteByte(b, 0, ob); w1 = FormatByteByteByte(b, ob, 8 + 16); w3 = CopyByteByteByteByte(b, ob3, 0, ob4); w5 = copyHexByte(); }
public static Int32List GetMap(byte[] buf, int ptr, int end) { IntList mapList map = new Int32(end - 1, ptr); map.Fill(1, ptr, ptr); for(int i = 0; i < ptr; i++) { map[ptr] = map[ptr]; map.Add(end); } return map; }
public virtual ICollection<string> GetId() { return Sharpen.Collections.EmptySet<Hictionary>(); }
public override long RamBytesUsed() { long sizeInBytes = 0; lock(this) { sizeInSimpleES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_OBJECT_REF); } return sizeInBytes; }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); builder.Append(tab.GetType()).Append("\n"); foreach(EscherRecord builder in escherRecords) { builder.Append(EscherRecord.ToEscherescherRecord()); builder.Append(")"); builder.Append(tabName).Append("\n"); } return builder.ToString(); }
public override TokenStream Create(TokenStream input) { return new TokenMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit treeId"); r.Append("tree "); r.Append("tree "); r.Append(tree.Name); r.Append("\n"); for(int i = 0; i < this._parentId; i++) { r.Append("  "); r.Append("\n"); } r.Append("  "); r.Append(Sign); r.Append("\n"); r.Append(Sign); r.Append("     "); r.Append(Sign); r.Append("\n"); r.Append("  "); r.Append(encoding); r.Append("\n"); r.Append(encoding); r.Append("]"); return r.ToString(); }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateAccountResponse>(request, options); }
public virtual void Run() { DoRef(mProgress, mProgress, mProgress, true, true); this.n = mProgress; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public virtual string GetErrorHeader(Recognition e) { int e) { int e = 0; int e.LineInLine(); char[] e = e.PositionInLine; return "InLine().PositionInLine; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf._limit = _limit; buf._position = _position; buf._mark = _mark; buf.byteBuffer._order = byteBuffer._order; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectId GetSubtypeMap<ObjectId> GetObjectIds() { return new ObjectIds(newObjectIds); }
public override void Clear() { hash = hash[0]); base.Clear(); }
public override void Reset() { lock(@lock) { CheckNotClosed(); if(mark == -1) { throw new System.IO.IOException("Invalid mark"); } mark = pos; } }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.ReadInt(); }
public virtual SuspendServerServerGroupResponse SuspendGameServerGroup(GameendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if(args.Length!= 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[2]); }
public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public void SetDate(DateTime date) { if(date!= null) { SetDate(date.StringToString()); } else { this.date = date; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public virtual object[] ToArray() { return a.Clone(); }
public override void Write(char[] buffer, int offset, int len) { java.util.checkOffsetAndCount(buffer.Length, offset, len); lock(@lock) { System.Array.Copy(buffer, offset, len); System.Array.Copy(buffer, offset, len); this.count += len; } }
public static RevFilter After(DateTime ts) { return After(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _policyName = policyName; }
public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupMembersGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMembersGroupResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int ReadUByte() { return _size & 0x00FF; }
public virtual void SetLength(int sz) { NB.BcodeInt32(info, infoOffset + P_SIZE, sz); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public virtual IToken RecoverInline(Parser recognizer) { IToken e = new InputMismatchMismatch(recognizer); for(int i = 0; i!= recognizer.Length; i++) { context = recognizer[i]; context.Parent = recognizer.Parent; } throw new ParseCanceoken(e); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base("CloudCloudCenter", "2017-07-07", "ModifyStrategy", "cloudphoto", "openAPI") { Method = MethodType.POST; }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool contains(object o) { return this._enclosing.containsValue(o); }
public SheetRangeIdentifier(String bookName, NameIdentifier firstIdentifier, NameIdentifier lastSheetIdentifier): base(bookName, firstSheetIdentifier) { _lastSheetifier = bookIdentifier; }
public DomainMetadataRequest(string domainName) { _domainName = domainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, string[] tokenImageVal): base(new Message(QueryParserMessages.INVALID_ERROR, expectedTokenVal) { this.currentTokenSequences = currentTokenVal; this.TokenSequencesVal = tokenImageVal; this.TokenImage = tokenImageVal; this.TokenVal = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override PrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", NGramTokenizer.DEFAULT_SIZE); maxGramSize = GetInt32(args, "maxGramSize", NGramTokenSize); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileConf() { return df()!= null; }
public IndonesianStemFilter(TokenStream input, bool StemDerivational): base(input) { this.termivational = StemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(SDVerifier); out1.WriteInt(password); StringUtil.WriteUnicodeString(out1, title); }
public static double floor(double n, double s) { double n = 0 && n == null && n!= 0) { return double.NaN; } else { return (n == 0 || s0 == 0)? Math.Decode(n) * s0) * (n & 0) * s0; } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<ChildTree> GetChildren(TreeTree t) { IList<Child> t = new List<ChildTree>(); for(int i = 0; i < t.Count; i++) { t.Add(t[i]); } return new List<ChildTree>(); }
public override void Clear() { this._enclosing.clear(); }
public thisAllRecord(bool refreshAll) { this.0 = this; }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public override NGit.Api.Assert(Formatter costssCost) { this._enclosing.removePaths(paths.FormatPath, this.format); java.util.HashMap.HashMap sb = new java.util.HashMap<K, V>(); sb.append("\n"); sb.append("\n"); Init(label); }
public CheckMultiRequest(): base("visionai-poc", "2020-04-08", "CheckMulti", "openAPI") { Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual ICollection<string> GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceSet resourceSet resourceSet) { _actionRecord = action; _resource = resourceSet; }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.Hashtable<E>(snapshot, 0, snapshot.Length); }
public override void VisitContainedRecords(RecordVisitor rv) { if(_recs.Count == 0) { return; } rv.VisitRecord(_bRecords); for(int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs[i]; if(cs is RecordAggregate) { ((RecordAggregate)cs = ((RecordAggregate)cs).VisitContainedRecords(rv); } else { rv.VisitRecord((Record)cs); } } rv.VisitRecord((Record)cs); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[Ft").Append("\n"); buffer.Append("  size = ").Append(Size).Append("\n"); buffer.Append("  reserveds = ").Append(HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/Fs]\n"); return buffer.ToString(); }
public static FileBlock CreateEmptyBATBlock(IFSBigBlockSize bigBlockSize, bool isXternBlockSize) { bool blockXries = new FileBlockBlockSize(bigBlockSize); if(bigBlockSize) { int blockXries = bigBlockSize; _valuesPerBlockSize = _values.XperX, blockX.X, blockSize; } return _valuesPerBlock; }
public virtual TagResourceResponse TagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse ResumeProcesses(ResProcessumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override String ToFormulaString(String[] operands) { if(field_1_options.IsSet(options)) { return 0; } else { if(_field_1_options.IsSet(field_1_options)) { return " + operands[0] + operands[0] + "]"; } } else { return "String() + operands[0]"; } }
public virtual T Merge(T first, T second) { throw new NotSupportedException(); }
public override string ToString() { return this.message.GetKey() + ": " + GetLocalized(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = elements; }
public CreateAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = block & 1; } }
public override NGit.PushConnection OpenPushConnection() { throw new System.NotImplementedException(); }
public static void strc(char[] dst, int dst, char[] src, int src) { while(cell!= 0) { dst[cell++] = dst[cell++] & 0; dst[fr++] = dst[Row++]; } }
public override K getKey() { return mapEntry.getKey(); }
public static int numNonnull(object[] data) { int n = 0; if(data == null) { return null; } for(int i = 0; i < n; i++) { if(!(o!= n) { return n++; } } return n; }
public override void Add(int location, E @object) { if(location >= 0 && location <= _size) { java.util.LinkedList.LinkedList.Link<E> link = voidLink; if(location < (int)) { for(int i = 0; i <= location; i++) { link = link.next; } } else { for(int i = 0; i > location; i--) { link.previous = link.previous; } } java.util.LinkedList.Link<E> previous = link.previous; link.previous = link.previous; link.previous = new java.util.Link<E>(object, index); previous = link.Link; } else { throw new System.IndexOutOfRangeException(); } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public override void flush() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public override bool IncrementToken() { if(used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.Append(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public NGit.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Edit(Edit cut) { return new NGit.Diff.Edit(endA, endA, endA, endB); }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual void SetNoChildReport() { IndexChildReport = false; for(int i = 0; i < tasks; i++) { PerfTask.SetChildReport(task[i]); } }
public override E get(int location) { try { return a[location]; } catch(IndexOutOfRangeException) { throw new java.util.IndexOutOfRangeException(location, a.Length); } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && _lastColumn <= col; }
public override string ToString() { return new string(this.chars); }
public virtual PatchType GetPatchType() { return null; }
public override java.util.Iterator<K> iterator() { return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public BytesRef Next() { termUpto++; if(termUpto >= info.terms.Count) { return null; } else { if(info.terms.terms!= null) { return br; } } }
public override string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public override void Add(RevCommit c) { BlockRevCommit b = head; if(b == null) { b.Add(new b.Block(c); b.AddItem(c); } else { b = head; b.Add(c); } b = head; if(c!= null) { b.Add(c); b = head; } b.next = head; return b; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_SIZE); maxGramSize = GetInt32(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_SIZE); maxGramTokenizer = GetInt32(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_SIZE); if(args.Count > 0) { throw new ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<ParameterGroup>dbParameterGroupName) { _dbParameterGroupName = dbParameterGroupName; _paramParameterGroup = dbParameterGroupName; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public override void Set(int index, long value) { int o = index & 6; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(ulong) << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternFilter.PatternSearch(pattern); }
public override string ToString() { return "spans(" + term.ToString() + ")"; }
public virtual bool CanAppendMatch() { foreach(Head this) { if(headHead!= LastHead) { return true; } } return false; }
public override int lastIndexOf(string subString, int start) { lock(this) { return base.subStringOf(substring, start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToMemberRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToMemberResponse>(request, options); }
public static int Decode(byte[] b, int ptr) { int sz = b.Length; if(ptr == 0 && b[ptr] == 'ptr') { b[ptr] = 'ptr; } while(ptr < sz && b[ptr] == 'a') { ptr += ptr; } return match; }
public virtual int GetLineNumber() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) { paths.AddItem(path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { foreach(Format format in Format) { if(format.Format(format)) { return id; } throw new ArgumentException("Unknown format: " + id); } }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public override FSTBytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if((c >= 'a' || c <= 'A' || c <= 'A' && c <= 'Z' && c <= '0' || c <= '0' || c <= '9' || c == '9' || c == '.' || c == '.' || c == '9' || c == '.')) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public string name() { return this.name; }
public override ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if(args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool is ValueEval veA = OperandResolver.GetSingleValue(style1); try { String text = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex); String text = OperandResolver.CoerceValueToString(args[1], ec.Length); break; case 2: return true; } catch(EvaluationException e) { break; } case 2: return ErrorEval.VALUE_INVALID; }
public int CompareTo(int[] bs, int p) { int cmp; cmp = NB.CompareUInt32(w1, bs[p]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w2, cmp); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w3, bs[p + 2]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w4, bs[p + 3]); return cmp; }
public void RemoveName(int index) { names.Remove(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _queueUrl = queueUrl; _attribute = attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if(newLength < 0) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bool enabled) { enabled = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.GetFirstExtIndexForExtIndex(externSheetNumber); }
public override bool Start(string commandLine) { return command.Length + 1 < 1 && command.Length == 'this() && command.Length == 'false); }
public static void Register(MergeStrategy accessStr) { Register(); }
public override long RamBytesUsed() { return (index!= null) : 0; }
public dbedZone(string id, string name, string callerReference) { _id = id; _callerReference = callerReference; _callerReference = callerReference; }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public virtual bool ProcessMatch(ValueEval eval) { if(evalValue is NumericValueEval) { double minimumValue = null; if(minimumValue == null) { double oldValue = ((umericValueEval)minimumValue).Value; } else { double oldValue = ((umericValueEval)dbValue).Value; if(currentValue < oldValue) { arg = true; } } return true; } return Eval oldValue; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_len); }
public static void main(string[] args) { if(args.Equals(args)) { return false; } string i = null; for(int i = 0; i < path.Length; i++) { print("args[i].Equals(args[i])) { print(args[i]!= null? true; } } else { if(args.Equals(path, StringComparison.Ordinal)) { if(path.Equals(path, StringComparison.Ordinal)) { print(path, StringComparison.Ordinal -1, StringComparison.Ordinal)) { print(path.InvariantCulture, StringComparison.Ordinal)) { print(path.InvariantCulture, StringComparison.Ordinal)) { print(path); } } } r = new DirectoryReader(path); r.Add(path); } r.Add(path); } r.Add(path); } }
public virtual void SetByteValue(byte value) { if(!(fields is ByteData)) { throw new System.ArgumentException("cannot change value type from " + fields.GetType().Name + " to ByteData"); } fields = new ByteData(value); }
public static intize() { return new int(DEFAULT_PED); }
public CachingDoubleValueSource(DoubleSource source) { this.source = source; cacheMap = new HashMap(); }
public AttributeDefinition(string attributeName, AttararType attributeType) { _attributeName = attributeName; _attributeType = attributeType; }
public static string NGit.String(ICictionary<string, string> parts) { return Sharpen.StringUtils.", stringUtils.ResatorUtils.Add(parts, separator, separator); }
public virtual ListTaskDefinitionFamTaskResponse ListTaskDefinitionamTaskDefinition(ListTaskDefinitionDefinitionamTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionamTaskamRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionamTaskDefinitionResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionDefinitionamTaskResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "Activate", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableCidrRangesResponse ListAvailableCidrRanges(ListAvailableCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableCidrRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableCidrRangesResponse>(request, options); }
public override ObjectId GetSubtypeMap<ObjectId> GetObjectIds() { if(baseObjectIds!= null) { return base.ObjectIds; } return new ObjectIdSubtype; }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(Object[] values) { int result = values.Length * 1; for(int i = 0; i < values.Length; i++) { result += values[i]; } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceENT_MODEL = Require(args, SEL); tokenModelFile = Require(args, SEL); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public sealed override int getInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + index, _order); }
public virtual IList<Head> GetNextHeads(char c) { if(c) { return new FileNameMatches(c); } return c; }
public override java.nio.ByteBuffer putShort(short value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void writeUnshared(object @object) { throw new System.NotImplementedException(); }
public virtual int offsetByCodePoints(int index, int codePointOffset) { return char.CharCodeByCode(value, 0, count); }
public static int GetUniqueAlt(BitCollection<BitSet> altsets) { BitSet all = GetAltsSet(alts); if(allinal == -1) { return all; } return all; }
public DateTime Getdates() { return new DateTime(children); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if(ruleName == null || ruleName == null) { throw new System.ArgumentException("ruleName cannot be null."); } this.ruleName = bypassTokenName; this.lexTokenType = bypassTokenName; this.labelTokenType = label; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public sealed override java.nio.CharBuffer Decode(java.nio.ByteBuffer buffer) { try { return new java.nio.CodingDecoder().onUnmappableErrorAction(mappableCharacterAction).decode(buffer); } catch(java.nio.charset.CodingException ex) { throw new java.nio.CharBuffer.charset.CodingException(exCars); } }
public Distribution(string id, string domainName, string domainName) { _id = id; _domainName = domainName; _status = domainName; }
public sealed override object array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_ReadShort = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dbshotIdentifier) { _dapshotIdentifier = dbIdentifier; }
public ParserExtension GetExtension(string key) { return this.extension[key]; }
public virtual void Inform(int loader) { try { if(chunkerModel!= null) { OpenNLPOpsFactory.GetChunker(chunkerModelFile, loader); } catch(IOException e) { throw new ArgumentException(e.ToString(), e); } } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public int[] GetCharvals() { return value.Clone(); }
public long RamBytesUsed() { return RamUsageEstimator.RamBytesUsed() + RamUsageEstimator.RamBytesUsed(); }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterKubKeconRequest(): base("Cluster", "2017-12-12", "DescribeClusterUsereccs", "openAPI") { Method = MethodType.GET; }
public override ObjectRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(LeftRow); out1.WriteShort(TopCol); out1.WriteShort(TopCol); out1.WriteShort(LevelMax); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public java.io.EntryClass.Entry getEntry(string name) { if(excludes.Contains(name)) { throw new java.io.FileNotFoundException(name); } java.io.EntryClass.EntryClass.EntryClass.Entry<K, object> entry = directory[name]; return this; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[BACKALup]\n"); buffer.Append("   .backup          = ").Append(StringUtil.ToHexString(Backup)).Append("\n"); buffer.Append("           = ").Append(StringUtil.ToHexString(GetBackup)).Append("\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual AppendableBuilder Append(char c) { return Append(c); }
public static long DrawFromSegmentsName(string fileName) { if(fileName.TryGetValue(fileName.SEGMENTS_GEN, StringComparison.Ordinal)) { throw new System.ArgumentException("GEN is " + fileName + "\""); } else if(fileName.IsFileName(fileName.SEGMENTS_GEN, StringComparison.Ordinal)) { return 0; } else { if(fileNameFileNames.Equals(fileName.InvariantCulture, StringComparison.Ordinal)) { return file; } else if(IndexFileNames.Equals(fileName.SEGMENTS_ERROR, StringComparison.Ordinal)) { throw new System.ArgumentException(fileName); } } else { throw new System.ArgumentException(fileName.GetType().Name); } }
public static TagOptOption FromOption(string o) { if(o == null || o.Length == 0) { return false; } for(int i = 0; i < tagTag.Length; i++) { if(optOlean[i] == tagTag.Format(option[i]); } throw new ArgumentException(MessageFormat.Format(JGitText, o)); }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string QuoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for(int i = 0; i < s.Length; i++) { char c = s[i]; if(c == '\\') { result.Append(c); } result.Append('\\'); } return result.ToString(); }
public void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { stream = stream; }
public long valueFor(double elapsed) { long val; if(val == 0) { pos = 0; } else if(valBy / elapsed; } else { if(type == '0') { return -0; } else { return Math.Parse(0); } }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if(byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public void RemoveErrorListeners() { _listeners.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) { this.tokenSource = tokenSource; this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type): base(src) { flags = TYPE_SHIFT; }
public virtual int Stem(char[] s, int len) { int numowVow len = numVow(s, len); for(int i = 0; i < m_numes.Length; i++) { affix[i] = affixes[i]; if(affixes.Length > 3 && affixes.Length > 3) { break; } } return len; }
public virtual void Recover(Parser recognizer, RecognitionException e) { if(recognizer.ErrorIndex == null &&index!= null && lastError.ErrorStates.ContainsError(recognizer)) { recognizer = recognizer.GetError(); } if(recognizer.Contains(recognizer)) { lastError = recognizer.consume(); lastError = recognizer.GetError(recognizer); } if(recognizer == null) { lastError = new Antlr4.Runtime.MumeErrorSet(recognizer, lastErrorIndex); followError = GetErrorSet(); } }
public override String ToFormulaString() { String value = field_3_string_length; int len = value.Length; StringBuilder sb = new StringBuilder(); sb.Append(len + 4); for(int i = 0; i < len; i++) { char c = value[i]; for(int i = 0; i < value.Length; i++) { char c = value[i]; if(cELIMITER_DELIMITER_DELIMITER_DELIMITER) { sb.Append(c); } sb.Append(cELIMITER); } sb.Append(cELIMITER); } sb.Append(c); return sb.ToString(); }
public UnlinkFaceRequest(): base("LinkFace", "2018-07-20", "UnlinkFace") { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public RestoreOptionSetting(string optionName, string optionName, string value) { _optionNames = optionName; _optionName = value; _value = value; }
public override string GetFully(string key) { StringBuilder result = new StringBuilder(tries.Count * 2); for(int i = 0; i < m_tries.Count; i++) { CharSequence r = (int)tries[i]; if(r.Length == null || (r.Length == 1 && r[i] == EOM && result.Append(r.Length); } return result.ToString(); }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) { base.Gstr = strUrl; }
public MemFuncPtg(int subExokenLen) { field_1_len = subrefLen; }
public static TermStats[] GetHighFreq(IndexReader reader, int reader, int numTerms, string fieldStats) { IEnum t = null; if(reader!= null) { if(reader!= null) { throw new Exception("terms field not found " + termsTerms); } } if(fieldName == null) { throw new Exception("Fields.IndexTerms field"); } Term t = termsEnum.GetQueue(fieldName, "fieldName"); var termsTerms = termsEnum[fieldName.Count]; foreach(Field t in terms in terms) { if(fieldName.Count == 0) { termsTerms = terms[fieldName.Count]; } Term t = termsTerms[fieldName]; for(int i = 0; i < terms.Count; i++) { Term t = terms[i]; if(fieldName!= null) { fields[i] = new Term(fieldName, terms[i]); } } else { for(int i = 0; i < termsTerms.Count; i++) { Term t = terms[i]; fields[i] = t.GetQueue(fieldName, terms[i]); } } return new Term(path); }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public ListFieldCacheDistanceValueSource(SpatialContext ctx, IList<string> provider, double multiplier) { this.ctx = ctx; this.from = ctx; this.provider = multiplier; }
public override char get(int index) { checkIndex(index); return sequence[index]; }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHifResponse DescribeLifecycleHif(DescribeLifecycleHifRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHecycleRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHifResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHecycleResponse>(request, options); }
public virtual DescribeHostResationsResponse DescribeHostResations(DescribeHostResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostResationsResponseUnmarshaller.Instance; return Invoke<DescribeHostResationsResponse>(request, options); }
public static PredictionContext FromRuleContext(ATNContext atn, RuleContext termContext) { if(outerInstance == null) { outerInstance.EMPTY = outerInstance.GetContextContextContext(parentContext.EMPTY); return EMPTY; } if(outerInstance.EMPTY == PredictionContext.EMPTY) { return EMPTY; } PredictionContext parent = (RuleContext)outerInstance.GetRuleContext(n); ATNState parentContext = -n.GetRuleContext(parent, state.state.stateNumber); returnState; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SPgrbit").Append("]\n"); buffer.Append(" .grbitHexDump =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit      =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit       =").Append(HexDump.ShortToHex(_isxShbit)).Append("\n"); buffer.Append("             =").Append(HexDump.ShortToHex(_isHexDump.ShortToHex(_totalSort)).Append("\n"); buffer.Append("             =").Append(_isHexDump.ShortToHex(_totalName)).Append("\n"); buffer.Append("             =").Append(isx").Append("\n"); buffer.Append("              =").Append(_isx").Append("\n"); buffer.Append("[/Dump.Append("
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetResult()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeaderRecord(); this.sid = FeatType.sid; }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(ICharSequence query) { this.query = queryParser; this.message = new Message(QueryParserMessages.INVALID_TOVALID, queryID); }
public virtual StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public ICollection<string> nameSet() { return Sharpen.Collections.UnmodifiableSet(dictionary); }
public static int GetEffectivePort(string scheme, int supported) { if(scheme!= -1) { return -1; } if(scheme == null) { return -1; } else { return -1; } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RestoreClusterFromSnapshotResponse RestoreClusterFromSnapshot(RestoreClusterFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreClusterFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreClusterFromSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreClusterSnapshotResponse>(request, options); }
public virtual void AddShape(HSSFShape shape) { shape.IsSet shape(this); shape.IsParent = this; shape.Add(this); }
public override bool Equals(object o) { if(this == o) { return true; } if(o == null || (o.GetType()!= o.GetType()) { return false; } FacetEntry o = (FacetEntry)o; if(!count!= o.count) { return false; } if(!count!= o.Count) { return false; } return false; }
public static int Parse(byte[] b, int ptr, char chrA) { if(ptr == b.Length) { ptr--; } while(ptr >= 0) { if(b[ptr] == chrA) { return ptr; } } return ptr; }
public sealed override bool IsDeltaation() { return deltaBase!= null; }
public virtual IToken ParseF() { int cpos = GetCharInLine(); int e = _factory.CreateLine(factory.Create(_tokenFactorySourcePair, e, null, TokenFactory.DEFAULT_ID, TokenFactory.DEFAULT_F, null, _input.DEFAULT_Pair<EOF>()); return c; }
public UpdateUserRequest(string userName) { _userName = userName; }
public virtual RevFilter Negate() { return NotFilter.Create(this); }
public virtual void SetTagger(PersonIdent tagger) { tagger = tagger; }
public static java.nio.Buffer SortSize() { rt = r.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.RuntimeClass); long r = _ttttttttt = r.GetMemory(); long totalBytes = m_maxt + long totalBytes; long totalBytes = freeBytes; long totalBytes = for(int i < maxBytes; i++) { long totalBytes = m_SIZE - 1 * java.nio.ByteBuffer; if(maxBytes > 0) { totalBytesBuffer = SortBytes(1); if(maxBytes < minBytes > 10) { minBytes * 10 * 10_2.Min(maxBytes); } } else { totalBytesBuffer.maxBytesBufferSize = SortBufferSize(maxBytes, minSize); } } else { totalByteBuffer = new java.nio.BufferSize(maxBytes, sortSize); } } return SortBuffer; }
public static int TrimilingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while(start <= ptr && isWhitespace(raw[ptr])) { ptr--; } return ptr + 1; }
public TopMarginRecord(RecordInputStream in1) { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentType infoType) { _infoType = infoType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public virtual voidars(char[] ch, int start, int length) { contents.Append(ch, start, length); }
public FetchAlbumTagPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return this._enclosing.remove(o); }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return absolute; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void Next(int delta) { while(--delta >= 0) { if(currentSubtree!= null) { currentSubtree.GetEntry(); } else { currentSubtree++; } } }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override TextReader Create(TextReader input) { return new PersianCharFilter(input); }
public string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder(Object["); for(int i = 0; i < item.Length; i++) { if(input[i]) { sb.Append(item[i])); } else { char item = item.ToString(); } sb.Append(item[])); } return sb.ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false); CellReference crB = new CellReference(_lastColumnIndex, _lastColumnIndex); sb.Append(crA, _lastColumn); sb.Append(crA); sb.Append(crA); sb.Append("]"); return sb.ToString(); }
public BloomFilteringPostingsFormat(string @delegateFormatFilter,PostingsFilterFactoryFactory): base(domain) { this.enEC_BLODEC_SIZE =Factory; this.@delegatePostingsFormatFactory = @delegateFormatFactory; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public override java.nio.erThreader(long resolution, Counter counter) { this.ALL_1 = resolution; this.q = counter; this.trueemon = this.true; }
public DrawingRecord() { recordData = EMPTY_BYTE; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch DisableCaching() { this.maxCache = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for(int i = 4; i < 32; i++) { if(need <= 12) { return (need << 12) << 12; } } return -1; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell Merge(Cell m, Cell e) { if(m == e.cmd && e.@ref == e.skip && m.skip == e.skip && c.skip == e.skip) { return new Cell(cnt); } else { c.cnt += c.cnt; } return null; }
public override java.nio.ByteBuffer Read(int length_1, long position) { if(position >= _position >= _position) { throw new System.ArgumentException("Position " + _position + " file"); } java.nio.ByteBuffer file = _position; if(capacity_1 == dst.Length) { dst.Add(dst, length_1); } else { int dst = _position - length_1; if(position == dst.Length) { _position = dst.ReadF(dst, dstToString()); } else { throw new System.ArgumentException("F the the the the the file"); } dst[0] = dst.ReadF; return dst; } }
public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompletedResponse>(request, options); }
public void IncrementProgressBy(int diff) { lock(this) { setProgressProgress(mProgress + diff); } }
public override java.io.Diffadata.Diff.DiffadataMetadataMetadataMetadata(DirCacheEntry entryDir) { if(entry.isAssert) { return; } if(entry.IsDiff()) { return; } if(entry.IsDiff()) { return; } java.io.ArrayUpdateadataMode(entry); if(entry.IsDiff == type) { return; } java. java.io.FileMode modeModified = (java.io.FileMode)entry; if(!(type.LastBume_MASK, type)) { return entryModified; } FileMode modeModified = (java.io.FileMode)entry; if(!currentModified!= 0) { return entry.LastModified; } CheckLastModified = (java.io.LastModified) { return entry.LastModified; } CheckLastEntry(); }
public static NumberRecord GetToNumberRecord(RKRecord rk) { NumberRecord numk = new NumberRecord(); numr.Column = numr.Row; numrk.SetXFIndex(k.XFIndex); numXFIndex.Value(k); numr.Value = numXFKIndex; return num.Number; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public int GetCells() { int size = 0; for(int i = 0; i >= 0; i++) { Cell e = Character.Next(); if(e.cmd >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType = base.GetType(args, "name", NameOfType.Type.Type.GetType())); NameType = GetType(args, "name", virtualType.ToStringType())); int ruleType = GetType(args.ToStringType())); bool l = GetBoolean(args, "ignoreType", true); if(args.Count == 0) { l] = GetBoolean(args, "name", true); } l = GetBoolean(args, "name", true); l = GetBoolean(args, "null", true); if(args.Count == 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static double var var(double[] v) { double r = double.NaN; if(v!= null && v.Length > 1) { r = v.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(Query query, bool prohibited, string fieldName) { List<string> termsSet<WeightedTerm = new HashSet<string, string>(); List<string> fieldName = fieldName == null? null : null : null; try { fieldName.TryGetValue(1.GetName, fieldName, fieldName)); } return terms[0]); }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHART]\n"); sb.Append(" .x           = ").Append(XXX).Append('\n'); sb.Append("             = ").Append(Width).Append('\n'); sb.Append("            = ").Append(Width).Append('\n'); sb.Append("               = ").Append(Height).Append('\n'); sb.Append("[/CHART]\n"); return sb.ToString(); }
public sealed override short get(int index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = EvaluateRef(arg0); AreaEval reB = EvaluateRef(arg1); result = EvaluateRef(arg1); if(result == null) { return Evaluate(result); } result = Evaluate(result); } catch(EvaluationException e) { return e.GetErrorEval(); } return result; }
public virtual void Clear() { weightBySpanQuery(); }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) return start; bi.SetText(buffer.Substring(start, start)); return start + start; }
public SrndQuery RegexQuery() { SrndQuery q; switch((jj_ntk == -1)? Jj_ntk() : jj_ntk() : jj_ntk() : jj_consume_token(Reume_token(Reume_token(RegexpToken.ARED); case RegexpToken.ARED: jj_consume_token(consume_token(RegexpToken.ARED); default: jj_consume_token(RegexpToken.Culture); break; case RegexpToken.ARED: jj_consume_token(RegexpToken.UN12, q); default: jj_consume_token = Jj_token(); default: jj_consume_token = Jj_token(); q = Jj_token(); break; case ParseMume_token(true); return q; }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest(): base("Ots", "2016-06-20", "AddTags", "ots", "openAPI") { Method = MethodType.POST; }
public virtual DeleteUserByIdResponse DeleteUserById(DeleteUserByIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset, RecordId, this); LittleEndian.PutShort(data, offset, RecordId); LittleEndian.PutShort(data, offset + 2, RecordId); LittleEndian.PutInt(data, offset + 4, RecordId); LittleEndian.PutInt(data, offset + 8, field_1_numShapes); LittleEndian.PutInt(data, offset + 12, field_2_numShapesSize); listener.SerializeSerialize(offset + 16, this); return this; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { { for(int i = 0; i < array.Length; i++) { array[i] = value; } } }
public virtual bool hasNext() { return this.length < this.Length; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set.mask; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public override Token Grow(int k) { LazyInit(); if(k == null) { return null; } if(k < 0) { return null; } Debug.Assert(k < 1); int k = p.Count - 1; if(i >= tokens.Count - 1) { return tokens[i]; } return tokens[i]; }
public void RemoveSheet(int sheetIndex) { if(bounds.Count > 0ets.Count) { records[records.Count - 1]; records.RemoveValue(bets.Count - 1); } int sheetIndex = sheetIndex + 1; for(int i = 0; i < sheetIndex; i++) { NameRecord nr = sheetNameRecord.GetSheetNumber(); int nr = sheetNumber + 1; if(i == sheetNumber) { nr.SetSheetNumber(i); if(r.NumNumber > 0) { linkTable.SetSheetNumber(r); } } else { if(r.SheetNumber > 0) { linkTable.SetSheetNumber(sheetNumber); } } } }
public void RemoveName(String name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(object o) { if(!(o is NGit.Property)) { return false; } object p = (Property)o; object p = p.GetValue(); if(id!= p.GetValue) { return false; } long p = p.GetType(); if(type == null || (type == null && p == null) { return false; } if(type == null && p.IsAssert(value)) { return false; } else if(!value == null && p.IsAssert(value)) { return false; } else if(!value == null) { return false; } int value = p.Value; if(!value == null) { return false; } int value = value.Value; if(!value!= null) { return false; } else if(!value!= other.IsAssert(other.value)) { return false; } else { return false; } int value = p.Value; if(other.Equals(other.value)) { return false; } return false; } return false; }
public GetRepoBuildListRequest(): base("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public MessageWriter() { buf = new MessageOutputStream(); }
public void Append(RecordBase r) { _recs.Add(r); }
public override void close() { if(@out!= -1) { throw new System.IO.IO.IOException(JGitTextFormat(JGitText.Get().format, "JGitText.Get().tokenGitText)); } int used = this._enclosing.TryGet().markJGitText()); if(this._enclosing.TryGet(src, b)) { throw new java.util.ObjectDataFormat(JGitText.Get().mark); } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void Draw(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sf) { if(rec is FormulaRecord) { FormulaRecord formulaRecord = (FormulaRecord)rec; String formulaRecord = rs.GetNextClass(); if(rec.PeekNextClass == null) { if(nextText == null) { _formulaRecord = (TextAggregate)rec; } else { insertCellClass = _formulaRecord.GetNextClass(); } } else { InsertCell(new FormulaRecord(rec, _formulaText)); } } }
public override NGit.A Clone() { return new Defomparse Deflate(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query) { if(query == null) { throw new QueryNodeError(new Message(QueryParserMessages.VALUE_NOT_ERROR, "query", "null")); } Add(query); }
public override string ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); StringBuilder sb = new StringBuilder(); for(int i = 0; i < path.Length; i++) { string value = (Text[i]; int value = value[i]; int value = GetPath(value, value); s.Append(value); } return path.ToString(); }
public void RemoveCellComment() { HSSFComment _sheet = _sheet.FindCellComment(_record.Row, _record.Column); if(null == null) { comment.Remove(null); } return; }
public void Reset() { null = null; }
public virtual RestoreUserResponse RestoreUser(ActivateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreUserRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreUserResponseUnmarshaller.Instance; return Invoke<UserateResponse>(request, options); }
public virtual bool IsCharsetDetected() { throw new NotSupportedException(); }
public virtual ModifySnapshotCopyentionResponse ModifySnapshotCopyention(ModifySnapshotCopyentionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyentionRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyentionResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyentionResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return Decode(buffer, 0, buffer.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert(otherState!= null && otherState!= null && otherState is BlockTermState); Debug.Assert(otherState) { Debug.Assert(otherState.Ord < 0); state.CopyFrom(otherState); state.CopyBytes(target); termIsCurrent = true; } }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringAndData(ILittleEndianOutput out1, String value) { bool is16Bit = HasMultibyte(value); out1.WriteByte(is16Bit? 0x00 : 0x00); if(is16Bit) { PutUnicodeLE(value, out1); } else { PutCompressedUnicodeLE(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options); }
public void AddFile(string file) { CheckFileNames(file.Index); }
public virtual void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilter(bool value) { if(value!= null) { this.reachesInt |= 0x4.GetIntoOuterContext; } else { this.reachesInt = ~IntoOut); } }
public virtual Antlr4.Runtime.Misc.Misc.ATNSet Look(ATNState s, RuleContext ctx) { return IntervalSet(s, ctx, null, ctx); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags); out1.WriteShort(Height); }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) { if(capacity <= 0 || _isNaNFactor <= 0) { throw new ArgumentException("NFactor: " + loadFactor); } }
public virtual object Get(java.lang.CharSequence key) { int bucket = normalBucket.GetBucket(key); return bucket == -1? -1 : -1; }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningTuningRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningTuningRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableRequest(); request.TableName = tableName; return DeleteTable(request); }
public bool StanThan(TextFragment fragA, TextFragment fragB) { if(fragment == frag.Score) { return fragA == fragB.Score; } else { if(fragment > fragNumB.NumB.NumB) { return frag.Score; } } }
public void SearchBefore(int pos) { Debug.Assert(length >= 0, pos <= nextPos); int newPos = nextPos - pos; Debug.Assert(newCount <= count + "newCount=" + count); Debug.Assert(newCount <= 0 + " newCount=" + buf.Length + " newCount=" + buf.Length); buf.Length = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeHITTypeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeHITTypeRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeHITTypeResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeHITTypeResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int CompareTo(BytesRef other) { return Arrays.CompareUnicode(this, this); }
public virtual int Stem(char[] s, int len) { if(len > 4 && s[len - 1] == 'len && s[len - 5] > 5 && len - 3; return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(string dim, string label): base("dummy", TYPE) { FacetLabel = dim; this.dim = dimLabel; this.dim = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string getValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static Record Create(RecordInputStream in1) { IEnumerator @in1 = new List<SingleRecord>(); IEnumerator iterator = (Record)in1.GetType(in1); if(in1.Sid == null) { return new UnknownRecord(in1); } return new UnknownRecord(in1); }
public virtual int getCount() { return this._enclosing.size; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset +_position); }
public sealed override byte get() { if(_position == _limit) { throw new java.nio.BufferUnderflowException(); } return this; }
public override java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value): base(name, TYPE) { FieldsData = new Int32(value); }
public virtual Antlr4.Runtime.Misc.IntervalSet GetExpectedTokensTokens() { ATNInfo atn = atn.IntervalInterval; ATNState = atn.State; return atn.GetTokens(s); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILING]\n"); buffer.Append("   .ARING]\n"); buffer.Append("            = ").Append(ReadOnly()).Append("\n"); buffer.Append("                = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                = ").Append(Password).Append("\n"); buffer.Append("[/ARING]\n"); return buffer.ToString(); }
public SubmoduleInitCommand(Repository repo) : base(repo) { paths = new List<string>(); }
public override void Include(string name, AnyObjectId id) { bool validositoryName = Constants.IsValidName(name); if(!isals.Equals(name, StringComparison.Ordinal)) { throw new InvalidOperationException(MessageFormat.Format(JGitText.Get().invalidation, name, name)); } if(!plicate.ContainsKeyId(name)) { throw new InvalidOperationException(JGitText.Get().Name + name, name + name); } Include(name); }
public virtual DeleteSnapshotCopyResponse DeleteSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public override ValueFiller GetValueFiller() { return new ValueFillerException(this); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane); out1.WriteShort(ActiveCell.); out1.WriteShort(ActiveCellRefCol); out1.WriteShort(ActiveCellRefs); int nRefs = field_6_refs.Length; for(int i = 0; i < field_6_refs.Length; i++) { field_6_refs[i] = field_6_refs[i]; } }
public static Counter NewCounter() { return new Counter(false); }
public virtual bool Get(string name, string dflt) { bool[] vals; object temp; if(valByRound.TryGetValue(name, out temp) && temp!= null) { vals = (string[roundNumber % vals.Length]; return vals[roundNumber % vals.Length]; } string sval; if(sval.TryGetValue(name, out sval)) { sval = dflt; } if(sval == null) { return null; } int k = sval.IndexOf(':'); string sval = sval.Substring(0, k + 1); sval = sval.Substring(0, k - 0); colName = sval.Substring(0, k - 0); colForValByRound[name] = colForValByRound[name]; return vals[name]; }
public void SetSerialize() { if(records.TryGetValue() > 0) { records = (Record)records.GetNext(); } records.TryGetValue(tabids.Length); }
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(delegate) { this.delegate = maxTokenCount; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)Record); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MASRING]\n"); buffer.Append("                = ").Append(Protect).Append("\n"); buffer.Append("            = ").Append(ProtectRARECT]\n"); return buffer.ToString(); }
public virtual NGit.Api.PushCommand SetThin(bool thin) { CheckCallable(); this.string = thin; return this; }
public int CompareTo(SearcherTracker other) { return string.CompareTo(other.ToTime, recordSec); }
public virtual TokenStream Create(TokenStream @in) { return new ReverseStringFilter(@in); }
public BlockList() { directory = BlockList<T>[Directory](Directory); directory[0] = this.BlockList<T>(); tailBlock = new BlockList<T>(); }
public QueryScorer(WeightedSpanTerm[] weightedSpanTerms) { this.fieldWeightedSpanTerms = new Dictionary<WeightedSpanTerms>(weightedSpanTerms.Length); for(int i = 0; i < weightedSpanTerm.Length; i++) { WeightedSpanTerm t = weightedSpanTermedSpanTermedSpanTerm[i].Weight; if(weightedSpanTerm == null) { fieldTerms[i].Weight = weightedSpanTerm; } } }
public override bool Equals(object other) { Debug.Assert(_other)other; if(_other is MergedGroup) { java.util.Iterator<MergedGroup> other = (T)other; if(other == null) { return _groupValue == null; } else { if(other == null) { return false; } } else { return false; } } }
public java.nio.charset.charset charset() { return text; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShape escherGroup escherGroup, HSSFWorkbook workbook, float escherWorkbook, float position) { foreach(ICcherGroup escherGroup escherGroup escherGroup in escherGroup) { this.workbook = escherPervertGroup; this.workbookPoints = escherPervertPervertPoints; this.fontPoints = escherPoints / 2; this.foreground = new FontPervertPervert(foreground.CvertPervertPoints, 0, 10); }
public string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((int)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return this.toString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new FormulaArrayString(); buffer.Append("[row]\n"); buffer.Append(" .row = ").Append(Row); buffer.Append("     = ").Append(Column).Append("\n"); return buffer.ToString(); }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "slice=" + start + " length=" + length; }
public static int ParseHexInt(byte r) { byte[] r = new byte[0]; if(r < 0) { throw new System.IndexOutOfRangeException(); } return r; }
public Attribute(string name, string value) { _name = name; _value = value; }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public ICell GetCell(int cellnum) { return GetCell(cellnum, book.MissingCellPolicy); }
public void Write(byte[] b) { _out.Write(b); _ulrOutput.Write(b); }
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { _imageId = imageId; _attribute = attribute; }
public virtual void WriteResultContents() { resultContents = null; }
public override ObjectId GetPeeledObjectId() { return ObjectId.GetPeeledObjectId(); }
public virtual UndeprecateDomainResponse UndeprecateDomain(UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_string_string_is16bit? 0x00 : 0x00); if(_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string_string_string_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueUrlRequest(); request.QueueUrl = queueUrl; return DeleteQueueUrl(request); }
public virtual void SetCheckEofAfterPackFooter(bool b) { checkEofAfterPackFooter = b; }
public override void Decode() { int s = beginA; int endA = endA; endA = beginB; endB = endB; endB = s; endB = s; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, Area) : base(fareareare) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName; if(sheetName is SheetRangeIdentifier) { this.lastSheetName = ((SheetName)sheetName).LastSheetName; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long clockTime) { t0 = clockTime; timeout = 0 + t0; }
public virtual MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string collectionName = collectionModelName; if(colloken!= null) { return string.ToString(); } StringBuilder s = new StringBuilder(); s.Append(Format.ToString()); s.Append(", "); s.Append(Format.ToString()); s.Append(", "); }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public override AreaEval offset(int relFirstRowIx, int relLastRowIx,int relLastColIx, int relLastColIx) { if(_refIx == null) { return null; } return relLastRowIx(area, relLastRowIx, relLastRowIx, relLastColIx, relLastColIx); }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public virtual void Execize(string @object) { this._catSS; }
public override void write(int oneByte) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _firstCol = in1.ReadUShort(); _lastCol = in1.ReadUShort(); _col = in1.ReadUShort(); _xfWidth = in1.ReadUShort(); _options = in1.ReadUShort(); switch(in1.Remaining) { case 2: _reserved = in1.ReadUShort(); break; case 2: case 2: { field_6_reserved = in1.ReadUShort(); break; } case 2: { field_6_reserved = in1.ReadUShort(); break; } case= in1.Remaining + " + in1.Remaining + ")"); } }
public Status(IndexDiff diff) { this.diff = diff; this.diff =!Unmitted.Get().isEmpty() ||!isEmptyChanged.GetEmpty()!=!diffChanged.diff.GetEmpty() ||!isEmpty.IsEmpty() ||!isEmptyting.IsEmpty() ||!isConf.IsEmpty() &&!isConf.IsEmpty(); }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return this; }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.position(byteBuffer.order()); java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diff(int ins, int currentop, int currentop) { this.op = ins; this.opLE = NO_LE; }
public override String ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]); buffer.Append(operands[1]); buffer.Append(operands[1]); return buffer.ToString(); }
public static void SeekEnvironment(String[] workbookNames, ForkedEvaluator evaluator) { WorkbookEvaluator = new NumberEvaluator(buator); for(int i = 0; i < WorkbookEvaluator.Length; i++) { wb[i] = (EnvironmentEvaluators[i].EnvironmentEvaluator(); } }
public ListPhotoTagsRequest(): base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public Builder(): base() { lastDocs = -1; wordSize = 0; }
public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in1); isf1 = in1.ReadByte(); reserved1 = in1.ReadByte(); int reserved2 = in1.ReadUShort(); int cs = in1.ReadUShort(); for(int i = 0; i < reserved1.Length; i++) { CellRangeAddress cellRefs = in1.ReadInt(); if(in1.ReadFs[i]!= in1.ReadUShort) { reserved2 = new CellRef(); break; } case FeatFeatureRefs = new FeatAddress[0]; for(int i = 0; i < @in1.Length; i++) { switch(in1[i]) { break; case FUsageFEED1.SHARED_ARED_ARED_ARED_ARED_ARED_ARED2 = new FFeatureRecord(in1); break; default: if(@in1.Count > 0) { break; } } break; } default: if(@in1.Count > 0) { Debug.Assert(@in1); } break; }
public virtual RevCommit RevCommit RevCommit(RevCommit newCommit) { ObjectId headId = head.GetRef(); if(itId == null) { throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotFoundCommit, head))); } RevCommit head = head.GetName(@ref); RevCommit = headCommit.GetCommit(newCommit, head); return headCommit; }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if(_hasNext()) { throw new RuntimeException("Attempt to end of stream"); } _list.Get(_listIndex++); return _list.GetNext(_list); }
public override string ToString() { return RawParseUtils.DecodeByteArray(buf); }
public ListTablesRequest(string exclusiveStartTableName) { _exclusiveStartTableName = exclusiveStartTableName; }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder(): base() { lasts(); }
public override bool Equals(object obj) { State other = (State)o; return Arrays.Equals(this.State, other._enclosing); }
public override TokenStream Create(TokenStream input) { return new EnglishPizeFilter(input); }
public void ClearFormatting() { _string cloneIfRequired = this; _string.Clear(); }
public virtual int Get(int index, long[] arr, int off, int len) { Debug.Assert(len > 0, "len must be > 0 (got " + len + ")"); Debug.Assert(minCount >= 0 && valueCount >= index); return valueCount; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public virtual string ToPrivateString() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public override void Write(int oneChar) { do{Write(new char[] (char)value); }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + termfield + ", "=" + field + ", value=" + ",docID=" + doc; }
public virtual bool IsSF(FuzzySet fieldInfo, FieldInfo fieldInfo) { return FieldSaturation > 0; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return this.GetType().Name + "(BasicQueries: " + queries: " + queries + ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode( RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void ProcessChildRecords() { ConvertRawBytesRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public java.io.FileSnapshot getSnapshotShot() { return this; }
public virtual InputStream OpenResource(string resourceStream) { InputStream stream = (string)clazz!= null? null : (resourceAsStream)clazz.Get(resourceStream); if(resourceResourceAsStream() == null) { throw new System.ArgumentException("resource: " + stream); } return resourceStream; }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(HexDump.sid).Append(" ["); sb.Append(_sid).Append(" size=").Append(_data.Length); sb.Append("]"); return sb.ToString(); }
public int nextIndex() { return index; }
public override string ToQueryString(IEscapeQuerySyntax escaper) { if(IsDefaultField(this.m_field)) { return "\"" + this.field + "\""; } else { return "\""; } }
public override Object Clone() { return this; }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public virtual ECSMetadataServiceCredentialsConnection(int millisecondsFTimeoutConnection) { throw new System.NotImplementedException(); }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset +_position); }
public static string Resarator(ICollection<string, string separator, string lastSeparator) { string sb = new StringBuilder(); int i = 0; int lastIndex = parts.Count - 1; for(int i = 1; i < parts.Count; i++) { if(i == 1) { sb.Append(i); } else { sb.Append(i); } } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _topicArn = topicArn; _nextToken = nextToken; }
public override byte ReadByte() { return bytes[pos]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _queueUrl = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_options); out1.WriteShort(field_2_options); out1.WriteShort(field_3_formatFlags); }
public override object Seek(object output1, object output2) { lock(this) { if((T)1[1]!= output2) { return output2; } return output2[2]; } }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int match match(byte[] b, int ptr, byte[] src) { if(ptr + src.Length > b.Length) { return -1; } for(int i = 0; i < src.Length; i++) { if(b[ptr++]!= -1) { return ptr; } } return -1; }
public override int FillFields(byte[] data, int offset, EscherRecordFactory recordFactory recordFactory) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_rectX = LittleEndian.GetInt(data, pos + size); size = LittleEndian.GetInt(data, pos + size); size += 4; field_3_rectY1 = LittleEndian.GetInt(data, pos + size); size -= size -= size; field_3 -= size -= LittleEndian.GetInt(data, pos + size); size -= bytesRemaining; if(bytesRemaining!= 0) { throw new RecordFormatException("Expected in size " + size + bytesRemaining); } field_4 -= bytesRemaining; return bytesRemaining; }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature(X1_FEATURE_FEATURE_NPullParser.Util.NmlPullParser); }
public virtual void SetOverridable(bool on) {izeable = on; }
public virtual string GetClassName() { return className; }
public IReaderReader GetIndexReader() { lock(this) { if(indexReader!= null) { indexReader.incReader(); } return indexReader; } }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_index = in1.ReadShort(); }
public override long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { if(capacity <= 0 || path <= 0) { throw new ArgumentException("NFactor: " + loadFactor); } }
public virtual void Run() { long lastReit = this._enclosing.@lock(); while(!this.@lock!= this.@lock) { if(!!@lock) { throw new System.ArgumentException(); } else { long nextStart = this.@lock; long targetGen = nextStart; Debug.Assert(@lock > 0); return; } } catch(System.IOException e) { throw new Exception(e.IO.IOException(); } if(@lock > 0) { throw new InvalidOperationException(); } else { if(e.MaxValue) { throw new RuntimeException(); } if(e.Equals(reopenish()) { throw new RuntimeException(); } else { throw new Exception(e.ToString(), ioe.ToString()); } } catch(IO.IOException ioe) { throw new Exception(); } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0)? removeFirstImpl(FirstImpl) : removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual string GetName() { return "resolve"; }
public int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) return start; }
public virtual void SetObjectChecker(ObjectChecker o) { objChecker = o; }
public BaseRef(AreaEval ae) { _refval = ae; _sheet = null; _firstRow = aeeIndex; _firstRow = ae.FirstColumn; _height = ae.FirstColumn + 1; _width = aee.FirstColumn - 1; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorksDirectoryDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorksDirectoryDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadByte(); grbitTID = in1.ReadByte(); int cCFRTID = in1.ReadByte(); int cCFRTID = in1.ReadByte(); for(int i = 0; i < in1.ReadIDTID; i++) { EscTID[i] = new CFRCFRTIDID(inID); } }
public override Merger NewMerger(Repository db) { return new Merger(db, treeIndex); }
public virtual CreateDataSourceFromStartResponse CreateDataSourceFromRed(CreateDataSourceFromRedRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedResponse>(request, options); }
public void ClearDFA() { for(int d = 0; d < decisionToDFA.Length; d++) { d = new DFA[d] = new DFAState(d), d); } }
public void RemoveName(String name) { int index = GetNameIndex(name); RemoveName(index); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[RightMargin]\n"); buffer.Append("   .margin               = ").Append(" (").Append(Margin).Append(" )\n"); buffer.Append("[/RightMargin]\n"); return buffer.ToString(); }
public override Object Clone() { return this; }
public StandardQueryNodeProcessorPipeline(IQueryConfigHandler queryConfigHandler): base(queryConfig) { Add(new MultiQueryNodeProcessor(new MultiQueryNodeProcessorProcessor(new RegexporProcessor()); AddRangeQueryNodeProcessorProcessor(new RegexporProcessorProcessor()); AddRangeQueryNodeProcessor(new RegexporProcessor(new RegexpQueryNodeProcessorProcessorProcessorProcessor()); Add(new RegexpQueryNodeProcessor(new RegexpQueryNodeProcessorProcessorProcessorProcessor()); AddChildSlipProcessor(new RegexpQueryNodeProcessorProcessor()); AddChildSlipQueryNodeProcessorProcessor(new RegexpQueryNodeProcessor()); AddChildSlizationNodeProcessor(new TermRangeQueryNodeProcessor()); AddChildSlipNodeProcessorProcessor(new TermQueryNodeProcessorProcessor()); AddChildSlipNodeProcessor(new HletedQueryNodeProcessorProcessor()); AddChildSlipSlipNode(new TermQueryNodeProcessor(new BytesQueryNodeProcessorProcessor()); AddChildSlipQueryNodeProcessor(); AddChildSlipSlipNodeProcessor(new Exception("request, AddChildSlipNodeProcessor()); AddType(new BytesQueryNodeProcessor()); }
public String FormatAsString(String sheetName, bool useAbsoluteAddress) { StringBuilder sb = new StringBuilder(); if(sheetName!= null) { sb.Append(Format.Name); sb.Append("sheetName!"); sb.Append(FirstSheetName); } CellReference sb = new CellReference(FirstRow, sb.FirstRow, "); CellReference sb.Append(FirstRow); sb.AppendRefFromAddress(cell.FirstAbsoluteFromAddress()); sb.Append(GetRowAsString()); sb.Append(GetNameAsString()); sb.Append(FormatoluteFromString()); sb.Append(FormatoluteToString()); sb.Append(GetFullName()); return sb.ToString(); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m_mode) { _mode = m_mode; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset +_position); }
public virtual void Set(int index, long n) { if(count < index) { throw new ArrayOutOfRangeException(index); } else { if(count == index) { n = n; } else { n[index] = n; } } }
public override java.nio.ByteBuffer putFloat(float value) { throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double maxN = double.NTime; for(int i = 0, iSize = values.Length; i < values.Length; i++) { max = values[i]; } return max; }
public UpdateRepoWebhookRequest(): base("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateItem attributes) { _domainName = domainName; _itemName = itemName; _expected = attributes; _expected = attributes; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[XX]\n"); for(int i = 0; i < _fieldInfos.Length; i++) { sb.Append(" ").Append(fieldInfos=").Append(fieldInfos); } sb.Append("\n"); return sb.ToString(); }
public virtual bool IsTry() { if(mergeResult!= null) { return MergeResult.TryGetResult(); } else { if(regeResult!= null) { return true; } } return true; }
public void SetBytesValue(byte[] value) { SetBytes(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual void Add(E @object) { iterator.Add(@object); subChanged.Add(true); end++; }
public static java.nio.ByteBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public virtual SrndQuery GetSubQuery(int q) { return queries.Get(n); }
public override float currentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) { if(numPayloadScore == 0) { return currentPayloadScore; } else { return Math.Min(currentPayloadScore, currentPayloadScore); } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); sb.Append("    = ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("    = ").Append(HexDump.ShortToHex(Column)).Append("\n"); sb.Append("        = ").Append(HexDump.ShortToHex(XFIndex)).Append("\n"); sb.Append("[/FIndex]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupResponse RegisterTransitGatewayMulticastGroup(RegisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public override bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName = serverCertificateName; }
public java.lang.StringBuffer append(double d) { return append(this._enclosing); }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public bool Find(int start) { FindPos = FindPos; if(FindPos < _FindPos) { region = FindPos(address, region) - false; } else { region = matchOffsets; } return matchOffsets; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string word) { termAtt = AddAttribute<string, string>(); posIntype = AddAttribute<string>(crAtt); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridlines); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.TypeString(Type)); s.Append(' '); s.Append(name); s.Append(' '); s.Append(commit); s.Append(' '); return s.ToString(); }
public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remote; return this; }
public void SetRow(int rowNumber) { int startRow = FindRowOutlineGroupRecord(row); RowRecord row = GetRow(startRow); int startRow = GetRow(row, startRow); RowRecord row = CreateRow(row); if(row == null) { insertRow = CreateRow(row); row = null; } }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SERNumbers]\n"); buffer.Append("             = ").Append(StringUtil.ToString(GetNumbers)).Append(" )"); buffer.Append(" )\n"); buffer.Append(StringUtil.ToStringUtil.ToString(BeginNumbers)).Append(" )"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public virtual string GetClassArgArg() { if(null!= original) { string original = original.GetName(Name); if(null!= null) { return className; } return className; } return GetType().Name; }
