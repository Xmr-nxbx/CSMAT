{"java": ["public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_vcenter);\r\n}", "public void addAll(BlockList<T> src) {\r\n    if(src.size == 0)return;\r\n    int srcDirIdx = 0;\r\n    for(; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);\r\n    if(src.tailBlkIdx != 0)addAll(src.tailBlock, 0, src.tailBlkIdx);\r\n}", "public void writeByte(byte b) {\r\n    if(upto == blockSize) {\r\n        if(currentBlock != null) {\r\n            addBlock(currentBlock);\r\n        }\r\n        currentBlock = new byte[blockSize];\r\n        upto = 0;\r\n    }\r\n    currentBlock[upto++] = b;\r\n}", "public ObjectId getObjectId() {\r\n    return objectId;\r\n}", "public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDomainEntry(request);\r\n}", "public long ramBytesUsed() {\r\n    return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);\r\n}", "public final String getFullMessage() {\r\n    byte[] raw = buffer;\r\n    int msgB = RawParseUtils.tagMessage(raw, 0);\r\n    if(msgB < 0) {\r\n        return \"\";\r\n    }\r\n    return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);\r\n}", "public POIFSFileSystem() {\r\n    this(true);\r\n    _header.setBATCount(1);\r\n    _header.setBATArray(new int[] {1});\r\n    BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);\r\n    bb.setOurBlockIndex(1);\r\n    _bat_blocks.add(bb);\r\n    setNextBlock(0, POIFSConstants.END_OF_CHAIN);\r\n    setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);\r\n    _property_table.setStartBlock(0);\r\n}", "public void init(int address) {\r\n    slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];\r\n    assert slice != null;\r\n    upto = address & ByteBlockPool.BYTE_BLOCK_MASK;\r\n    offset0 = address;\r\n    assert upto < slice.length;\r\n}", "public SubmoduleAddCommand setPath(String path) {\r\n    this.path = path;\r\n    return this;\r\n}", "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListIngestions(request);\r\n}", "public QueryParserTokenManager(CharStream stream, int lexState) {\r\n    this(stream);\r\n    SwitchTo(lexState);\r\n}", "public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetShardIterator(request);\r\n}", "public ModifyStrategyRequest() {\r\n    super(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\");\r\n    setMethod(MethodType.POST);\r\n}", "public boolean ready() throws IOException {synchronized(lock) {\r\n        if(in == null) {\r\n            throw new IOException(\"InputStreamReader is closed\");\r\n        }\r\n        try {\r\n            return bytes.hasRemaining() || in.available() > 0;\r\n        } catch(IOException e) {\r\n            return false;\r\n        }\r\n    }}", "public EscherOptRecord getOptRecord() {\r\n    return _optRecord;\r\n}", "public synchronized int read(byte[] buffer, int offset, int length) {\r\n    if(buffer == null) {\r\n        throw new NullPointerException(\"buffer == null\");\r\n    }\r\n    Arrays.checkOffsetAndCount(buffer.length, offset, length);\r\n    if(length == 0) {\r\n        return 0;\r\n    }\r\n    int copylen = count - pos < length ? count - pos : length;\r\n    for(int i = 0; i < copylen; i++) {\r\n        buffer[offset + i] = (byte) this.buffer.charAt(pos + i);\r\n    }\r\n    pos += copylen;\r\n    return copylen;\r\n}", "public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {\r\n    this.sentenceOp = sentenceOp;\r\n}", "public void print(String str) {\r\n    write(str != null ? str : String.valueOf((Object) null));\r\n}", "public NotImplementedFunctionException(String functionName, NotImplementedException cause) {\r\n    super(functionName, cause);\r\n    this.functionName = functionName;\r\n}", "public V next() {\r\n    return super.nextEntry().getValue();\r\n}", "public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {int available = bufferLength - bufferPosition; if(len <= available) {\r\n        if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);\r\n        bufferPosition+=len;\r\n    } else {\r\n        if(available > 0) {\r\n            System.arraycopy(buffer, bufferPosition, b, offset, available);\r\n            offset += available;\r\n            len -= available;\r\n            bufferPosition += available;\r\n        }\r\n        if(useBuffer && len<bufferSize) {\r\n            refill();\r\n            if(bufferLength<len) {\r\n                System.arraycopy(buffer, 0, b, offset, bufferLength);\r\n                throw new EOFException(\"read past EOF: \" + this);\r\n            } else {\r\n                System.arraycopy(buffer, 0, b, offset, len);\r\n                bufferPosition=len;\r\n            }\r\n        } else {\r\n            long after = bufferStart+bufferPosition+len;\r\n            if(after > length())throw new EOFException(\"read past EOF: \" + this);\r\n            readInternal(b, offset, len);\r\n            bufferStart = after;\r\n            bufferPosition = 0;\r\n            bufferLength = 0;\r\n        }\r\n    }}", "public TagQueueResult tagQueue(TagQueueRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTagQueue(request);\r\n}", "public void remove() {\r\n    throw new UnsupportedOperationException();\r\n}", "public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyCacheSubnetGroup(request);\r\n}", "public void setParams(String params) {\r\n    super.setParams(params);\r\n    language = country = variant = \"\";\r\n    StringTokenizer st = new StringTokenizer(params, \",\");\r\n    if(st.hasMoreTokens())language = st.nextToken();\r\n    if(st.hasMoreTokens())country = st.nextToken();\r\n    if(st.hasMoreTokens())variant = st.nextToken();\r\n}", "public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDocumentationVersion(request);\r\n}", "public boolean equals(Object obj) {\r\n    if(!(obj instanceof FacetLabel)) {\r\n        return false;\r\n    }\r\n    FacetLabel other = (FacetLabel) obj;\r\n    if(length != other.length) {\r\n        return false;\r\n    }\r\n    for(int i = length - 1; i >= 0; i--) {\r\n        if(!components[i].equals(other.components[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetInstanceAccessDetails(request);\r\n}", "public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {\r\n    HSSFPolygon shape = new HSSFPolygon(this, anchor);\r\n    shape.setParent(this);\r\n    shape.setAnchor(anchor);\r\n    shapes.add(shape);\r\n    onCreate(shape);\r\n    return shape;\r\n}", "public String getSheetName(int sheetIndex) {\r\n    return getBoundSheetRec(sheetIndex).getSheetname();\r\n}", "public GetDashboardResult getDashboard(GetDashboardRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDashboard(request);\r\n}", "public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateSigninDelegateGroupsWithAccount(request);\r\n}", "public void addMultipleBlanks(MulBlankRecord mbr) {\r\n    for(int j = 0; j < mbr.getNumColumns(); j++) {\r\n        BlankRecord br = new BlankRecord();\r\n        br.setColumn((short)(j + mbr.getFirstColumn()));\r\n        br.setRow(mbr.getRow());\r\n        br.setXFIndex(mbr.getXFAt(j));\r\n        insertCell(br);\r\n    }\r\n}", "public static String quote(String string) {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"\\\\Q\");\r\n    int apos = 0;\r\n    int k;\r\n    while((k = string.indexOf(\"\\\\E\", apos)) >= 0) {\r\n        sb.append(string.substring(apos, k + 2)).append(\"\\\\\\\\E\\\\Q\");\r\n        apos = k + 2;\r\n    }\r\n    return sb.append(string.substring(apos)).append(\"\\\\E\").toString();\r\n}", "public ByteBuffer putInt(int value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public ArrayPtg(Object[][] values2d) {\r\n    int nColumns = values2d[0].length;\r\n    int nRows = values2d.length;\r\n    _nColumns = (short) nColumns;\r\n    _nRows = (short) nRows;\r\n    Object[] vv = new Object[_nColumns * _nRows];\r\n    for(int r=0; r<nRows; r++) {\r\n        Object[] rowData = values2d[r];\r\n        for(int c=0; c<nColumns; c++) {\r\n            vv[getValueIndex(c, r)] = rowData[c];\r\n        }\r\n    }\r\n    _arrayValues = vv;\r\n    _reserved0Int = 0;\r\n    _reserved1Short = 0;\r\n    _reserved2Byte = 0;\r\n}", "public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetIceServerConfig(request);\r\n}", "public String toString() {\r\n    return getClass().getName() + \" [\" +getValueAsString() +\"]\";\r\n}", "public String toString(String field) {\r\n    return \"ToChildBlockJoinQuery (\"+parentQuery.toString()+\")\";\r\n}", "public final void incRef() {\r\n    refCount.incrementAndGet();\r\n}", "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateConfigurationSetSendingEnabled(request);\r\n}", "public int getNextXBATChainOffset() {\r\n    return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;\r\n}", "public void multiplyByPowerOfTen(int pow10) {\r\n    TenPower tp = TenPower.getInstance(Math.abs(pow10));\r\n    if(pow10 < 0) {\r\n        mulShift(tp._divisor, tp._divisorShift);\r\n    } else {\r\n        mulShift(tp._multiplicand, tp._multiplierShift);\r\n    }\r\n}", "public String toString() {\r\n    final StringBuilder b = new StringBuilder();\r\n    final int          l = length();\r\n    b.append(File.separatorChar);\r\n    for(int i = 0; i < l; i++) {\r\n        b.append(getComponent(i));\r\n        if(i < l - 1) {\r\n            b.append(File.separatorChar);\r\n        }\r\n    }\r\n    return b.toString();\r\n}", "public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {\r\n    this.fetcher = fetcher;\r\n    this.fetcher.setRoleName(roleName);\r\n    return this;\r\n}", "public void setProgressMonitor(ProgressMonitor pm) {\r\n    progressMonitor = pm;\r\n}", "public void reset() {\r\n    if(!first()) {\r\n        ptr = 0;\r\n        if(!eof())parseEntry();\r\n    }\r\n}", "public E previous() {\r\n    if(iterator.previousIndex() >= start) {\r\n        return iterator.previous();\r\n    }\r\n    throw new NoSuchElementException();\r\n}", "public String getNewPrefix() {\r\n    return this.newPrefix;\r\n}", "public int indexOfValue(int value) {\r\n    for(int i = 0; i < mSize; i++)if(mValues[i] == value)return i;\r\n    return -1;\r\n}", "public List<CharsRef> uniqueStems(char word[], int length) {\r\n    List<CharsRef> stems = stem(word, length);\r\n    if(stems.size() < 2) {\r\n        return stems;\r\n    }\r\n    CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);\r\n    List<CharsRef> deduped = new ArrayList<>();\r\n    for(CharsRef s : stems) {\r\n        if(!terms.contains(s)) {\r\n            deduped.add(s);\r\n            terms.add(s);\r\n        }\r\n    }\r\n    return deduped;\r\n}", "public GetGatewayResponsesResult getGatewayResponses(GetGatewayResponsesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetGatewayResponses(request);\r\n}", "public void setPosition(long pos) {\r\n    currentBlockIndex = (int)(pos >> blockBits);\r\n    currentBlock = blocks[currentBlockIndex];\r\n    currentBlockUpto = (int)(pos & blockMask);\r\n}", "public long skip(long n) {\r\n    int s = (int) Math.min(available(), Math.max(0, n));\r\n    ptr += s;\r\n    return s;\r\n}", "public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {\r\n    setBootstrapActionConfig(bootstrapActionConfig);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_row);\r\n    out.writeShort(field_2_col);\r\n    out.writeShort(field_3_flags);\r\n    out.writeShort(field_4_shapeid);\r\n    out.writeShort(field_6_author.length());\r\n    out.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);\r\n    if(field_5_hasMultibyte) {\r\n        StringUtil.putUnicodeLE(field_6_author, out);\r\n    } else {\r\n        StringUtil.putCompressedUnicode(field_6_author, out);\r\n    }\r\n    if(field_7_padding != null) {\r\n        out.writeByte(field_7_padding.intValue());\r\n    }\r\n}", "public int lastIndexOf(String string) {\r\n    return lastIndexOf(string, count);\r\n}", "public boolean add(E object) {\r\n    return addLastImpl(object);\r\n}", "public void unsetSection(String section, String subsection) {\r\n    ConfigSnapshot src, res;\r\n    do {\r\n        src = state.get();\r\n        res = unsetSection(src, section, subsection);\r\n    } while(!state.compareAndSet(src, res));\r\n}", "public final String getTagName() {\r\n    return tagName;\r\n}", "public void addSubRecord(int index, SubRecord element) {\r\n    subrecords.add(index, element);\r\n}", "public boolean remove(Object o) {\r\n    synchronized(mutex) {\r\n        return delegate().remove(o);\r\n    }\r\n}", "public DoubleMetaphoneFilter create(TokenStream input) {\r\n    return new DoubleMetaphoneFilter(input, maxCodeLength, inject);\r\n}", "public long length() {\r\n    return inCoreLength();\r\n}", "public void setValue(boolean newValue) {\r\n    value = newValue;\r\n}", "public Pair(ContentSource oldSource, ContentSource newSource) {\r\n    this.oldSource = oldSource;\r\n    this.newSource = newSource;\r\n}", "public int get(int i) {\r\n    if(count <= i)throw new ArrayIndexOutOfBoundsException(i);\r\n    return entries[i];\r\n}", "public CreateRepoRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"CreateRepo\", \"cr\");\r\n    setUriPattern(\"/repos\");\r\n    setMethod(MethodType.PUT);\r\n}", "public boolean isDeltaBaseAsOffset() {\r\n    return deltaBaseAsOffset;\r\n}", "public void remove() {\r\n    if(expectedModCount == list.modCount) {\r\n        if(lastLink != null) {\r\n            Link<ET> next = lastLink.next;\r\n            Link<ET> previous = lastLink.previous;\r\n            next.previous = previous;\r\n            previous.next = next;\r\n            if(lastLink == link) {\r\n                pos--;\r\n            }\r\n            link = previous;\r\n            lastLink = null;\r\n            expectedModCount++;\r\n            list.size--;\r\n            list.modCount++;\r\n        } else {\r\n            throw new IllegalStateException();\r\n        }\r\n    } else {\r\n        throw new ConcurrentModificationException();\r\n    }\r\n}", "public MergeShardsResult mergeShards(MergeShardsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeMergeShards(request);\r\n}", "public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAllocateHostedConnection(request);\r\n}", "public int getBeginIndex() {\r\n    return start;\r\n}", "public static final WeightedTerm[] getTerms(Query query) {\r\n    return getTerms(query,false);\r\n}", "public ByteBuffer compact() {\r\n    throw new ReadOnlyBufferException();\r\n}", "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = byte0 >>> 2;\r\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);\r\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);\r\n        values[valuesOffset++] = byte2 & 63;\r\n    }\r\n}", "public String getHumanishName() throws IllegalArgumentException {String s = getPath(); if(\"/\".equals(s) || \"\".equals(s)) s = getHost(); if(s == null) throw new IllegalArgumentException(); String[] elements; if(\"file\".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split(\"[\\\\\" + File.separatorChar + \"/]\"); elseelements = s.split(\"/+\"); if(elements.length == 0)throw new IllegalArgumentException(); String result = elements[elements.length - 1]; if(Constants.DOT_GIT.equals(result))result = elements[elements.length - 2]; else if(result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length()); return result;}", "public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeNotebookInstanceLifecycleConfig(request);\r\n}", "public String getAccessKeySecret() {\r\n    return this.accessKeySecret;\r\n}", "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateVpnConnection(request);\r\n}", "public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeVoices(request);\r\n}", "public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListMonitoringExecutions(request);\r\n}", "public DescribeJobRequest(String vaultName, String jobId) {\r\n    setVaultName(vaultName);\r\n    setJobId(jobId);\r\n}", "public EscherRecord getEscherRecord(int index) {\r\n    return escherRecords.get(index);\r\n}", "public GetApisResult getApis(GetApisRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetApis(request);\r\n}", "public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteSmsChannel(request);\r\n}", "public TrackingRefUpdate getTrackingRefUpdate() {\r\n    return trackingRefUpdate;\r\n}", "public void print(boolean b) {\r\n    print(String.valueOf(b));\r\n}", "public QueryNode getChild() {\r\n    return getChildren().get(0);\r\n}", "public NotIgnoredFilter(int workdirTreeIndex) {\r\n    this.index = workdirTreeIndex;\r\n}", "public AreaRecord(RecordInputStream in) {\r\n    field_1_formatFlags            = in.readShort();\r\n}", "public GetThumbnailRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"GetThumbnail\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTransitGatewayVpcAttachments(request);\r\n}", "public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePutVoiceConnectorStreamingConfiguration(request);\r\n}", "public OrdRange getOrdRange(String dim) {\r\n    return prefixToOrdRange.get(dim);\r\n}", "public String toString() {\r\n    String symbol = \"\";\r\n    if(startIndex >= 0 && startIndex < getInputStream().size()) {\r\n        symbol = getInputStream().getText(Interval.of(startIndex,startIndex));\r\n        symbol = Utils.escapeWhitespace(symbol, false);\r\n    }\r\n    return String.format(Locale.getDefault(), \"%s('%s')\", LexerNoViableAltException.class.getSimpleName(), symbol);\r\n}", "public E peek() {\r\n    return peekFirstImpl();\r\n}", "public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateWorkspaces(request);\r\n}", "public NumberFormatIndexRecord clone() {\r\n    return copy();\r\n}", "public DescribeRepositoriesResult describeRepositories(DescribeRepositoriesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeRepositories(request);\r\n}", "public SparseIntArray(int initialCapacity) {\r\n    initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);\r\n    mKeys = new int[initialCapacity];\r\n    mValues = new int[initialCapacity];\r\n    mSize = 0;\r\n}", "public HyphenatedWordsFilter create(TokenStream input) {\r\n    return new HyphenatedWordsFilter(input);\r\n}", "public CreateDistributionWithTagsResult createDistributionWithTags(CreateDistributionWithTagsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDistributionWithTags(request);\r\n}", "public RandomAccessFile(String fileName, String mode) throws FileNotFoundException {this(new File(fileName), mode);}", "public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteWorkspaceImage(request);\r\n}", "public static String toHex(long value) {\r\n    StringBuilder sb = new StringBuilder(16);\r\n    writeHex(sb, value, 16, \"\");\r\n    return sb.toString();\r\n}", "public UpdateDistributionResult updateDistribution(UpdateDistributionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDistribution(request);\r\n}", "public HSSFColor getColor(short index) {\r\n    if(index == HSSFColorPredefined.AUTOMATIC.getIndex()) {\r\n        return HSSFColorPredefined.AUTOMATIC.getColor();\r\n    }\r\n    byte[] b = _palette.getColor(index);\r\n    return (b == null) ? null : new CustomColor(index, b);\r\n}", "public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {\r\n    throw new NotImplementedFunctionException(_functionName);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort((short)field_1_number_crn_records);\r\n    out.writeShort((short)field_2_sheet_table_index);\r\n}", "public DescribeDBEngineVersionsResult describeDBEngineVersions() {\r\n    return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());\r\n}", "public FormatRun(short character, short fontIndex) {\r\n    this._character = character;\r\n    this._fontIndex = fontIndex;\r\n}", "public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {\r\n    byte[] result = new byte[length * 2];\r\n    int end = offset + length;\r\n    int resultIndex = 0;\r\n    for(int i = offset; i < end; ++i) {\r\n        char ch = chars[i];\r\n        result[resultIndex++] = (byte)(ch >> 8);\r\n        result[resultIndex++] = (byte) ch;\r\n    }\r\n    return result;\r\n}", "public UploadArchiveResult uploadArchive(UploadArchiveRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUploadArchive(request);\r\n}", "public List<Token> getHiddenTokensToLeft(int tokenIndex) {\r\n    return getHiddenTokensToLeft(tokenIndex, -1);\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj)return true;\r\n    if(!super.equals(obj))return false;\r\n    if(getClass() != obj.getClass())return false;\r\n    AutomatonQuery other = (AutomatonQuery) obj;\r\n    if(!compiled.equals(other.compiled))return false;\r\n    if(term == null) {\r\n        if(other.term != null)return false;\r\n    } else if(!term.equals(other.term))return false;\r\n    return true;\r\n}", "public SpanQuery makeSpanClause() {\r\n    SpanQuery [] spanQueries = new SpanQuery[size()];\r\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\r\n    int i = 0;\r\n    while(sqi.hasNext()) {\r\n        SpanQuery sq = sqi.next();\r\n        float boost = weightBySpanQuery.get(sq);\r\n        if(boost != 1f) {\r\n            sq = new SpanBoostQuery(sq, boost);\r\n        }\r\n        spanQueries[i++] = sq;\r\n    }\r\n    if(spanQueries.length == 1)return spanQueries[0];\r\n    elsereturn new SpanOrQuery(spanQueries);\r\n}", "public StashCreateCommand stashCreate() {\r\n    return new StashCreateCommand(repo);\r\n}", "public FieldInfo fieldInfo(String fieldName) {\r\n    return byName.get(fieldName);\r\n}", "public DescribeEventSourceResult describeEventSource(DescribeEventSourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeEventSource(request);\r\n}", "public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDocumentAnalysis(request);\r\n}", "public CancelUpdateStackResult cancelUpdateStack(CancelUpdateStackRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCancelUpdateStack(request);\r\n}", "public ModifyLoadBalancerAttributesResult modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyLoadBalancerAttributes(request);\r\n}", "public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSetInstanceProtection(request);\r\n}", "public ModifyDBProxyResult modifyDBProxy(ModifyDBProxyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyDBProxy(request);\r\n}", "public void add(char[] output, int offset, int len, int endOffset, int posLength) {\r\n    if(count == outputs.length) {\r\n        outputs = ArrayUtil.grow(outputs, count+1);\r\n    }\r\n    if(count == endOffsets.length) {\r\n        final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];\r\n        System.arraycopy(endOffsets, 0, next, 0, count);\r\n        endOffsets = next;\r\n    }\r\n    if(count == posLengths.length) {\r\n        final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];\r\n        System.arraycopy(posLengths, 0, next, 0, count);\r\n        posLengths = next;\r\n    }\r\n    if(outputs[count] == null) {\r\n        outputs[count] = new CharsRefBuilder();\r\n    }\r\n    outputs[count].copyChars(output, offset, len);\r\n    endOffsets[count] = endOffset;\r\n    posLengths[count] = posLength;\r\n    count++;\r\n}", "public FetchLibrariesRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"FetchLibraries\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public boolean exists() {\r\n    return fs.exists(objects);\r\n}", "public FilterOutputStream(OutputStream out) {\r\n    this.out = out;\r\n}", "public ScaleClusterRequest() {\r\n    super(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"csk\");\r\n    setUriPattern(\"/clusters/[ClusterId]\");\r\n    setMethod(MethodType.PUT);\r\n}", "public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {\r\n    return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);\r\n}", "public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListObjectParentPaths(request);\r\n}", "public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCacheSubnetGroups(request);\r\n}", "public void setSharedFormula(boolean flag) {\r\n    field_5_options =sharedFormula.setShortBoolean(field_5_options, flag);\r\n}", "public boolean isReuseObjects() {\r\n    return reuseObjects;\r\n}", "public ErrorNode addErrorNode(Token badToken) {\r\n    ErrorNodeImpl t = new ErrorNodeImpl(badToken);\r\n    addAnyChild(t);\r\n    t.setParent(this);\r\n    return t;\r\n}", "public LatvianStemFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public EventSubscription removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRemoveSourceIdentifierFromSubscription(request);\r\n}", "public static TokenFilterFactory forName(String name, Map<String,String> args) {\r\n    return loader.newInstance(name, args);\r\n}", "public AddAlbumPhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"AddAlbumPhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public GetThreatIntelSetResult getThreatIntelSet(GetThreatIntelSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetThreatIntelSet(request);\r\n}", "public RevFilter clone() {\r\n    return new Binary(a.clone(), b.clone());\r\n}", "public boolean equals(Object o) {\r\n    return o instanceof ArmenianStemmer;\r\n}", "public final boolean hasArray() {\r\n    return protectedHasArray();\r\n}", "public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateContributorInsights(request);\r\n}", "public void unwriteProtectWorkbook() {\r\n    records.remove(fileShare);\r\n    records.remove(writeProtect);\r\n    fileShare = null;\r\n    writeProtect = null;\r\n}", "public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {\r\n    super(dedup, analyzer);\r\n    this.expand = expand;\r\n}", "public RequestSpotInstancesResult requestSpotInstances(RequestSpotInstancesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRequestSpotInstances(request);\r\n}", "public byte[] getObjectData() {\r\n    return findObjectRecord().getObjectData();\r\n}", "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetContactAttributes(request);\r\n}", "public String toString() {\r\n    return getKey() + \": \" + getValue();\r\n}", "public ListTextTranslationJobsResult listTextTranslationJobs(ListTextTranslationJobsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListTextTranslationJobs(request);\r\n}", "public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetContactMethods(request);\r\n}", "public static short lookupIndexByName(String name) {\r\n    FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);\r\n    if(fd == null) {\r\n        fd = getInstanceCetab().getFunctionByNameInternal(name);\r\n        if(fd == null) {\r\n            return -1;\r\n        }\r\n    }\r\n    return (short) fd.getIndex();\r\n}", "public DescribeAnomalyDetectorsResult describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAnomalyDetectors(request);\r\n}", "public static String insertId(String message, ObjectId changeId) {\r\n    return insertId(message, changeId, false);\r\n}", "public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {long sz = db.getObjectSize(this, objectId); if(sz < 0) {\r\n        if(typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);\r\n        throw new MissingObjectException(objectId.copy(), typeHint);\r\n    } return sz;}", "public ImportInstallationMediaResult importInstallationMedia(ImportInstallationMediaRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeImportInstallationMedia(request);\r\n}", "public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePutLifecycleEventHookExecutionStatus(request);\r\n}", "public NumberPtg(LittleEndianInput in)  {\r\n    this(in.readDouble());\r\n}", "public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetFieldLevelEncryptionConfig(request);\r\n}", "public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDetector(request);\r\n}", "public ReportInstanceStatusResult reportInstanceStatus(ReportInstanceStatusRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeReportInstanceStatus(request);\r\n}", "public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteAlarm(request);\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new PortugueseStemFilter(input);\r\n}", "public FtCblsSubRecord() {\r\n    reserved = new byte[ENCODED_SIZE];\r\n}", "@Override public boolean remove(Object object) {\r\n    synchronized(mutex) {\r\n        return c.remove(object);\r\n    }\r\n}", "public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDedicatedIp(request);\r\n}", "public String toString() {\r\n    return precedence + \" >= _p\";\r\n}", "public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListStreamProcessors(request);\r\n}", "public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {\r\n    setLoadBalancerName(loadBalancerName);\r\n    setPolicyName(policyName);\r\n}", "public WindowProtectRecord(int options) {\r\n    _options = options;\r\n}", "public UnbufferedCharStream(int bufferSize) {\r\n    n = 0;\r\n    data = new int[bufferSize];\r\n}", "public GetOperationsResult getOperations(GetOperationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetOperations(request);\r\n}", "public void copyRawTo(byte[] b, int o) {\r\n    NB.encodeInt32(b, o, w1);\r\n    NB.encodeInt32(b, o + 4, w2);\r\n    NB.encodeInt32(b, o + 8, w3);\r\n    NB.encodeInt32(b, o + 12, w4);\r\n    NB.encodeInt32(b, o + 16, w5);\r\n}", "public WindowOneRecord(RecordInputStream in) {\r\n    field_1_h_hold            = in.readShort();\r\n    field_2_v_hold            = in.readShort();\r\n    field_3_width             = in.readShort();\r\n    field_4_height            = in.readShort();\r\n    field_5_options           = in.readShort();\r\n    field_6_active_sheet      = in.readShort();\r\n    field_7_first_visible_tab = in.readShort();\r\n    field_8_num_selected_tabs = in.readShort();\r\n    field_9_tab_width_ratio   = in.readShort();\r\n}", "public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopWorkspaces(request);\r\n}", "public void close() throws IOException {if(isOpen) {\r\n        isOpen = false;\r\n        try {\r\n            dump();\r\n        }\r\n        finally {try {\r\n            channel.truncate(fileLength);\r\n        } finally {try {\r\n            channel.close();\r\n        } finally {fos.close();}}}\r\n    }}", "public DescribeMatchmakingRuleSetsResult describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeMatchmakingRuleSets(request);\r\n}", "public String getPronunciation(int wordId, char surface[], int off, int len) {\r\n    return null;\r\n}", "public String getPath() {\r\n    return pathStr;\r\n}", "public static double devsq(double[] v) {\r\n    double r = Double.NaN;\r\n    if(v!=null && v.length >= 1) {\r\n        double m = 0;\r\n        double s = 0;\r\n        int n = v.length;\r\n        for(int i=0; i<n; i++) {\r\n            s += v[i];\r\n        }\r\n        m = s / n;\r\n        s = 0;\r\n        for(int i=0; i<n; i++) {\r\n            s += (v[i]- m) * (v[i] - m);\r\n        }\r\n        r = (n == 1)? 0: s;\r\n    }\r\n    return r;\r\n}", "public DescribeResizeResult describeResize(DescribeResizeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeResize(request);\r\n}", "public final boolean hasPassedThroughNonGreedyDecision() {\r\n    return passedThroughNonGreedyDecision;\r\n}", "public int end() {\r\n    return end(0);\r\n}", "public void traverse(CellHandler handler) {\r\n    int firstRow = range.getFirstRow();\r\n    int lastRow = range.getLastRow();\r\n    int firstColumn = range.getFirstColumn();\r\n    int lastColumn = range.getLastColumn();\r\n    final int width = lastColumn - firstColumn + 1;\r\n    SimpleCellWalkContext ctx = new SimpleCellWalkContext();\r\n    Row currentRow = null;\r\n    Cell currentCell = null;\r\n    for(ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {\r\n        currentRow = sheet.getRow(ctx.rowNumber);\r\n        if(currentRow == null) {\r\n            continue;\r\n        }\r\n        for(ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {\r\n            currentCell = currentRow.getCell(ctx.colNumber);\r\n            if(currentCell == null) {\r\n                continue;\r\n            }\r\n            if(isEmpty(currentCell) && !traverseEmptyCells) {\r\n                continue;\r\n            }\r\n            long rowSize = ArithmeticUtils.mulAndCheck((long)ArithmeticUtils.subAndCheck(ctx.rowNumber, firstRow), (long)width);\r\n            ctx.ordinalNumber = ArithmeticUtils.addAndCheck(rowSize, (ctx.colNumber - firstColumn + 1));\r\n            handler.onCell(currentCell, ctx);\r\n        }\r\n    }\r\n}", "public int getReadIndex() {\r\n    return pos;\r\n}", "public int compareTo(ScoreTerm other) {\r\n    if(this.boost == other.boost)return other.bytes.get().compareTo(this.bytes.get());\r\n    elsereturn Float.compare(this.boost, other.boost);\r\n}", "public int normalize(char s[], int len) {\r\n    for(int i = 0; i < len; i++) {\r\n        switch(s[i]) {\r\n        case FARSI_YEH:\r\n        case YEH_BARREE:\r\n            s[i] = YEH;\r\n            break;\r\n        case KEHEH:\r\n            s[i] = KAF;\r\n            break;\r\n        case HEH_YEH:\r\n        case HEH_GOAL:\r\n            s[i] = HEH;\r\n            break;\r\n        case HAMZA_ABOVE:\r\n            len = delete(s, i, len);\r\n            i--;\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    return len;\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(_options);\r\n}", "public DiagnosticErrorListener(boolean exactOnly) {\r\n    this.exactOnly = exactOnly;\r\n}", "public KeySchemaElement(String attributeName, KeyType keyType) {\r\n    setAttributeName(attributeName);\r\n    setKeyType(keyType.toString());\r\n}", "public GetAssignmentResult getAssignment(GetAssignmentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetAssignment(request);\r\n}", "public boolean hasObject(AnyObjectId id) {\r\n    return findOffset(id) != -1;\r\n}", "public GroupingSearch setAllGroups(boolean allGroups) {\r\n    this.allGroups = allGroups;\r\n    return this;\r\n}", "public synchronized void setMultiValued(String dimName, boolean v) {\r\n    DimConfig ft = fieldTypes.get(dimName);\r\n    if(ft == null) {\r\n        ft = new DimConfig();\r\n        fieldTypes.put(dimName, ft);\r\n    }\r\n    ft.multiValued = v;\r\n}", "public int getCellsVal() {\r\n    Iterator<Character> i = cells.keySet().iterator();\r\n    int size = 0;\r\n    for(; i.hasNext();) {\r\n        Character c = i.next();\r\n        Cell e = at(c);\r\n        if(e.cmd >= 0) {\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}", "public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVoiceConnector(request);\r\n}", "public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLifecyclePolicy(request);\r\n}", "public void write(byte[] b) {\r\n    int len = b.length;\r\n    checkPosition(len);\r\n    System.arraycopy(b, 0, _buf, _writeIndex, len);\r\n    _writeIndex += len;\r\n}", "public RebaseResult getRebaseResult() {\r\n    return this.rebaseResult;\r\n}", "public static int getNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) {\r\n    for(int i = 0; i < usableBitSetSizes.length; i++) {\r\n        int numSetBitsAtDesiredSaturation = (int)(usableBitSetSizes[i] * desiredSaturation);\r\n        int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation);\r\n        if(estimatedNumUniqueValues > maxNumberOfValuesExpected) {\r\n            return usableBitSetSizes[i];\r\n        }\r\n    }\r\n    return -1;\r\n}", "public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDashboard(request);\r\n}", "public CreateSegmentResult createSegment(CreateSegmentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSegment(request);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[DBCELL]\\n\");\r\n    buffer.append(\"    .rowoffset = \").append(HexDump.intToHex(field_1_row_offset)).append(\"\\n\");\r\n    for(int k = 0; k < field_2_cell_offsets.length; k++) {\r\n        buffer.append(\"    .cell_\").append(k).append(\" = \").append(HexDump.shortToHex(field_2_cell_offsets[ k ])).append(\"\\n\");\r\n    }\r\n    buffer.append(\"[/DBCELL]\\n\");\r\n    return buffer.toString();\r\n}", "public List<String> getUndeletedList() {\r\n    return undeletedList;\r\n}", "public String toString() {\r\n    return \"[INTERFACEEND/]\\n\";\r\n}", "public MergeScheduler clone() {\r\n    return this;\r\n}", "public PlainTextDictionary(Reader reader) {\r\n    in = new BufferedReader(reader);\r\n}", "public StringBuilder append(CharSequence csq) {\r\n    if(csq == null) {\r\n        appendNull();\r\n    } else {\r\n        append0(csq, 0, csq.length());\r\n    }\r\n    return this;\r\n}", "public ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListAssociatedStacks(request);\r\n}", "public static double avedev(double[] v) {\r\n    double r = 0;\r\n    double m = 0;\r\n    double s = 0;\r\n    for(int i=0, iSize=v.length; i<iSize; i++) {\r\n        s += v[i];\r\n    }\r\n    m = s / v.length;\r\n    s = 0;\r\n    for(int i=0, iSize=v.length; i<iSize; i++) {\r\n        s += Math.abs(v[i]-m);\r\n    }\r\n    r = s / v.length;\r\n    return r;\r\n}", "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeByoipCidrs(request);\r\n}", "public GetDiskResult getDisk(GetDiskRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDisk(request);\r\n}", "public DBClusterParameterGroup createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDBClusterParameterGroup(request);\r\n}", "public static CharBuffer wrap(char[] array, int start, int charCount) {\r\n    Arrays.checkOffsetAndCount(array.length, start, charCount);\r\n    CharBuffer buf = new ReadWriteCharArrayBuffer(array);\r\n    buf.position = start;\r\n    buf.limit = start + charCount;\r\n    return buf;\r\n}", "public SubmoduleStatusType getType() {\r\n    return type;\r\n}", "public DescribeGameServerGroupResult describeGameServerGroup(DescribeGameServerGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeGameServerGroup(request);\r\n}", "public Pattern pattern() {\r\n    return pattern;\r\n}", "public V setValue(V object) {\r\n    throw new UnsupportedOperationException();\r\n}", "public StringBuilder stem(CharSequence word) {\r\n    CharSequence cmd = stemmer.getLastOnPath(word);\r\n    if(cmd == null)return null;\r\n    buffer.setLength(0);\r\n    buffer.append(word);\r\n    Diff.apply(buffer, cmd);\r\n    if(buffer.length() > 0)return buffer;\r\n    elsereturn null;\r\n}", "public RenameFaceRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public char requireChar(Map<String,String> args, String name) {\r\n    return require(args, name).charAt(0);\r\n}", "public static String toStringTree(Tree t) {\r\n    return toStringTree(t, (List<String>)null);\r\n}", "public String toString() {\r\n    return \"<deleted/>\";\r\n}", "public GetRepoWebhookLogListRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetRepoWebhookLogList\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs\");\r\n    setMethod(MethodType.GET);\r\n}", "public GetJobUnlockCodeResult getJobUnlockCode(GetJobUnlockCodeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetJobUnlockCode(request);\r\n}", "public RemoveTagsRequest(String resourceId) {\r\n    setResourceId(resourceId);\r\n}", "public short getGB2312Id(char ch) {\r\n    try {\r\n        byte[] buffer = Character.toString(ch).getBytes(\"GB2312\");\r\n        if(buffer.length != 2) {\r\n            return -1;\r\n        }\r\n        int b0 = (buffer[0] & 0x0FF) - 161;\r\n        int b1 = (buffer[1] & 0x0FF) - 161;\r\n        return (short)(b0 * 94 + b1);\r\n    } catch(UnsupportedEncodingException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}", "public BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd) {\r\n    commands.addAll(cmd);\r\n    return this;\r\n}", "public short checkExternSheet(int sheetNumber) {\r\n    return (short)getOrCreateLinkTable().checkExternSheet(sheetNumber);\r\n}", "@Override public boolean equals(Object object) {\r\n    return c.equals(object);\r\n}", "public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {AnyQueryNode andNode = (AnyQueryNode) queryNode; BooleanQuery.Builder bQuery = new BooleanQuery.Builder(); List<QueryNode> children = andNode.getChildren(); if(children != null) {\r\n        for(QueryNode child : children) {\r\n            Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\r\n            if(obj != null) {\r\n                Query query = (Query) obj;\r\n                try {\r\n                    bQuery.add(query, BooleanClause.Occur.SHOULD);\r\n                } catch(TooManyClauses ex) {\r\n                    throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);\r\n                }\r\n            }\r\n        }\r\n    } bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements()); return bQuery.build();}", "public DescribeStreamProcessorResult describeStreamProcessor(DescribeStreamProcessorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStreamProcessor(request);\r\n}", "public DescribeDashboardPermissionsResult describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDashboardPermissions(request);\r\n}", "public Ref peel(Ref ref) {\r\n    try {\r\n        return getRefDatabase().peel(ref);\r\n    } catch(IOException e) {\r\n        return ref;\r\n    }\r\n}", "public long ramBytesUsed() {\r\n    return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES     + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);\r\n}", "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDomainSuggestions(request);\r\n}", "public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStackEvents(request);\r\n}", "public void setRule(int idx, ConditionalFormattingRule cfRule) {\r\n    setRule(idx, (HSSFConditionalFormattingRule)cfRule);\r\n}", "public CreateResolverRuleResult createResolverRule(CreateResolverRuleRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateResolverRule(request);\r\n}", "public SeriesIndexRecord(RecordInputStream in) {\r\n    field_1_index = in.readShort();\r\n}", "public GetStylesRequest() {\r\n    super(\"lubancloud\", \"2018-05-09\", \"GetStyles\", \"luban\");\r\n    setMethod(MethodType.POST);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_gridset_flag);\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    Toffs other = (Toffs) obj;\r\n    if(getStartOffset() != other.getStartOffset()) {\r\n        return false;\r\n    }\r\n    if(getEndOffset() != other.getEndOffset()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateGatewayGroup(request);\r\n}", "public CreateParticipantConnectionResult createParticipantConnection(CreateParticipantConnectionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateParticipantConnection(request);\r\n}", "public static double irr(double[] income) {\r\n    return irr(income, 0.1d);\r\n}", "public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterWorkspaceDirectory(request);\r\n}", "public RevertCommand include(AnyObjectId commit) {\r\n    return include(commit.getName(), commit);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {\r\n    ValueEval veText1;\r\n    try {\r\n        veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    String iNumber = OperandResolver.coerceValueToString(veText1);\r\n    Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);\r\n    boolean result = m.matches();\r\n    String imaginary = \"\";\r\n    if(result) {\r\n        String imaginaryGroup = m.group(5);\r\n        boolean hasImaginaryPart = imaginaryGroup.equals(\"i\") || imaginaryGroup.equals(\"j\");\r\n        if(imaginaryGroup.length() == 0) {\r\n            return new StringEval(String.valueOf(0));\r\n        }\r\n        if(hasImaginaryPart) {\r\n            String sign = \"\";\r\n            String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN);\r\n            if(imaginarySign.length() != 0 && !(imaginarySign.equals(\"+\"))) {\r\n                sign = imaginarySign;\r\n            }\r\n            String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE);\r\n            if(groupImaginaryNumber.length() != 0) {\r\n                imaginary = sign + groupImaginaryNumber;\r\n            } else {\r\n                imaginary = sign + \"1\";\r\n            }\r\n        }\r\n    } else {\r\n        return ErrorEval.NUM_ERROR;\r\n    }\r\n    return new StringEval(imaginary);\r\n}", "public E pollLast() {\r\n    Map.Entry<E, Object> entry = backingMap.pollLastEntry();\r\n    return (entry == null) ? null : entry.getKey();\r\n}", "public int readUShort() {\r\n    int ch1 = readUByte();\r\n    int ch2 = readUByte();\r\n    return (ch2 << 8) + (ch1 << 0);\r\n}", "public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {\r\n    setSnapshotId(snapshotId);\r\n    setAttribute(attribute.toString());\r\n    setOperationType(operationType.toString());\r\n}", "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListBonusPayments(request);\r\n}", "public V get(CharSequence cs) {\r\n    if(cs == null)throw new NullPointerException();\r\n    return null;\r\n}", "public TokenFilter create(TokenStream input) {\r\n    CommonGramsFilter commonGrams = (CommonGramsFilter) super.create(input);\r\n    return new CommonGramsQueryFilter(commonGrams);\r\n}", "public String getPath() {\r\n    return path;\r\n}", "public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeInitiateMultipartUpload(request);\r\n}", "public StringBuilder insert(int offset, int i) {\r\n    insert0(offset, Integer.toString(i));\r\n    return this;\r\n}", "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long block = blocks[blocksOffset++];\r\n        for(int shift = 62; shift >= 0; shift -= 2) {\r\n            values[valuesOffset++] = (int)((block >>> shift) & 3);\r\n        }\r\n    }\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new ElisionFilter(input, articles);\r\n}", "public boolean eat(Row in, int remap[]) {\r\n    int sum = 0;\r\n    for(Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {\r\n        Cell c = i.next();\r\n        sum += c.cnt;\r\n        if(c.ref >= 0) {\r\n            if(remap[c.ref] == 0) {\r\n                c.ref = -1;\r\n            }\r\n        }\r\n    }\r\n    int frame = sum / 10;\r\n    boolean live = false;\r\n    for(Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {\r\n        Cell c = i.next();\r\n        if(c.cnt < frame && c.cmd >= 0) {\r\n            c.cnt = 0;\r\n            c.cmd = -1;\r\n        }\r\n        if(c.cmd >= 0 || c.ref >= 0) {\r\n            live |= true;\r\n        }\r\n    }\r\n    return !live;\r\n}", "final public Token getToken(int index) {\r\n    Token t = jj_lookingAhead ? jj_scanpos : token;\r\n    for(int i = 0; i < index; i++) {\r\n        if(t.next != null) t = t.next;\r\n        else t = t.next = token_source.getNextToken();\r\n    }\r\n    return t;\r\n}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getClass().getName()).append(\" [ARRAY]\\n\");\r\n    sb.append(\" range=\").append(getRange()).append(\"\\n\");\r\n    sb.append(\" options=\").append(HexDump.shortToHex(_options)).append(\"\\n\");\r\n    sb.append(\" notUsed=\").append(HexDump.intToHex(_field3notUsed)).append(\"\\n\");\r\n    sb.append(\" formula:\").append(\"\\n\");\r\n    Ptg[] ptgs = _formula.getTokens();\r\n    for(int i = 0; i < ptgs.length; i++) {\r\n        Ptg ptg = ptgs[i];\r\n        sb.append(ptg).append(ptg.getRVAType()).append(\"\\n\");\r\n    }\r\n    sb.append(\"]\");\r\n    return sb.toString();\r\n}", "public GetFolderResult getFolder(GetFolderRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetFolder(request);\r\n}", "@Override public void add(int location, E object) {\r\n    throw new UnsupportedOperationException();\r\n}", "public PositiveScoresOnlyCollector(Collector in) {\r\n    super(in);\r\n}", "public CreateRepoBuildRuleRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"CreateRepoBuildRule\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");\r\n    setMethod(MethodType.PUT);\r\n}", "public BaseRef(AreaEval ae) {\r\n    _refEval = null;\r\n    _areaEval = ae;\r\n    _firstRowIndex = ae.getFirstRow();\r\n    _firstColumnIndex = ae.getFirstColumn();\r\n    _height = ae.getLastRow() - ae.getFirstRow() + 1;\r\n    _width = ae.getLastColumn() - ae.getFirstColumn() + 1;\r\n}", "public DrawingManager2(EscherDggRecord dgg) {\r\n    this.dgg = dgg;\r\n}", "public void reset() {\r\n    if(!first())reset(raw);\r\n}", "public final CharsetDecoder reset() {\r\n    status = INIT;\r\n    implReset();\r\n    return this;\r\n}", "public BufferedReader(Reader in, int size) {\r\n    super(in);\r\n    if(size <= 0) {\r\n        throw new IllegalArgumentException(\"size <= 0\");\r\n    }\r\n    this.in = in;\r\n    buf = new char[size];\r\n}", "public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCodeRepository(request);\r\n}", "public DBSubnetGroup createDBSubnetGroup(CreateDBSubnetGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDBSubnetGroup(request);\r\n}", "public RenameBranchCommand setOldName(String oldName) {\r\n    checkCallable();\r\n    this.oldName = oldName;\r\n    return this;\r\n}", "public DeleteBranchCommand setForce(boolean force) {\r\n    checkCallable();\r\n    this.force = force;\r\n    return this;\r\n}", "public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopCompilationJob(request);\r\n}", "public synchronized final void incrementSecondaryProgressBy(int diff) {\r\n    setSecondaryProgress(mSecondaryProgress + diff);\r\n}", "public int[] clear() {\r\n    return bytesStart = null;\r\n}", "public String getRawPath() {\r\n    return path;\r\n}", "public GetUserSourceAccountRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetUserSourceAccount\", \"cr\");\r\n    setUriPattern(\"/users/sourceAccount\");\r\n    setMethod(MethodType.GET);\r\n}", "public CreateExportJobResult createExportJob(CreateExportJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateExportJob(request);\r\n}", "public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDedicatedIpPool(request);\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(obj instanceof HSSFCellStyle) {\r\n        final HSSFCellStyle other = (HSSFCellStyle) obj;\r\n        if(_format == null) {\r\n            if(other._format != null) {\r\n                return false;\r\n            }\r\n        } else if(!_format.equals(other._format)) {\r\n            return false;\r\n        }\r\n        if(_index != other._index) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public ReleaseHostsResult releaseHosts(ReleaseHostsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeReleaseHosts(request);\r\n}", "public boolean equals(Object object) {\r\n    if(this == object) {\r\n        return true;\r\n    }\r\n    if(object instanceof Set) {\r\n        Set<?> s = (Set<?>) object;\r\n        try {\r\n            return size() == s.size() && containsAll(s);\r\n        } catch(NullPointerException ignored) {\r\n            return false;\r\n        } catch(ClassCastException ignored) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}", "public void setRefLogMessage(String msg, boolean appendStatus) {\r\n    customRefLog = true;\r\n    if(msg == null && !appendStatus) {\r\n        disableRefLog();\r\n    } else if(msg == null && appendStatus) {\r\n        refLogMessage = \"\";\r\n        refLogIncludeResult = true;\r\n    } else {\r\n        refLogMessage = msg;\r\n        refLogIncludeResult = appendStatus;\r\n    }\r\n}", "public StreamIDRecord(RecordInputStream in) {\r\n    idstm = in.readShort();\r\n}", "public RecognizeCarRequest() {\r\n    super(\"visionai-poc\", \"2020-04-08\", \"RecognizeCar\");\r\n    setMethod(MethodType.POST);\r\n}", "public final ByteOrder order() {\r\n    return ByteOrder.nativeOrder();\r\n}", "public int getAheadCount() {\r\n    return aheadCount;\r\n}", "public boolean isNewFragment() {\r\n    return false;\r\n}", "public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetCloudFrontOriginAccessIdentityConfig(request);\r\n}", "public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {\r\n    return label == symbol;\r\n}", "public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteTransitGateway(request);\r\n}", "public static byte[] grow(byte[] array, int minSize) {\r\nassert minSize >= 0: \"size must be positive (got \"\r\n    + minSize + \"): likely integer overflow?\";\r\n    if(array.length < minSize) {\r\n        return growExact(array, oversize(minSize, Byte.BYTES));\r\n    }\r\n    elsereturn array;\r\n}", "public CreateTransactionRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"CreateTransaction\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public BatchRefUpdate setRefLogIdent(PersonIdent pi) {\r\n    refLogIdent = pi;\r\n    return this;\r\n}", "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetLaunchTemplateData(request);\r\n}", "public ParseInfo(ProfilingATNSimulator atnSimulator) {\r\n    this.atnSimulator = atnSimulator;\r\n}", "public SimpleQQParser(String qqNames[], String indexField) {\r\n    this.qqNames = qqNames;\r\n    this.indexField = indexField;\r\n}", "public DBCluster promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePromoteReadReplicaDBCluster(request);\r\n}", "public DescribeCapacityReservationsResult describeCapacityReservations(DescribeCapacityReservationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCapacityReservations(request);\r\n}", "public String toString() {\r\n    return \"IndexSearcher(\" + reader + \"; executor=\" + executor + \"; sliceExecutionControlPlane \" + sliceExecutor + \")\";\r\n}", "public final boolean incrementToken() {\r\n    return false;\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(main + 1);\r\n    out.writeShort(subFrom);\r\n    out.writeShort(subTo);\r\n}", "public void decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) {\r\n    if(bitsPerValue > 32) {\r\n        throw new UnsupportedOperationException(\"Cannot decode \" + bitsPerValue + \"-bits values into an int[]\");\r\n    }\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long block = readLong(blocks, blocksOffset);\r\n        blocksOffset += 8;\r\n        valuesOffset = decode(block, values, valuesOffset);\r\n    }\r\n}", "public boolean isExpectedToken(int symbol) {\r\n    ATN atn = getInterpreter().atn;\r\n    ParserRuleContext ctx = _ctx;\r\n    ATNState s = atn.states.get(getState());\r\n    IntervalSet following = atn.nextTokens(s);\r\n    if(following.contains(symbol)) {\r\n        return true;\r\n    }\r\n    if(!following.contains(Token.EPSILON)) return false;\r\n    while(ctx!=null && ctx.invokingState>=0 && following.contains(Token.EPSILON)) {\r\n        ATNState invokingState = atn.states.get(ctx.invokingState);\r\n        RuleTransition rt = (RuleTransition)invokingState.transition(0);\r\n        following = atn.nextTokens(rt.followState);\r\n        if(following.contains(symbol)) {\r\n            return true;\r\n        }\r\n        ctx = (ParserRuleContext)ctx.parent;\r\n    }\r\n    if(following.contains(Token.EPSILON) && symbol == Token.EOF) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public UpdateStreamResult updateStream(UpdateStreamRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateStream(request);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    try {\r\n        OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);\r\n        return ErrorEval.NA;\r\n    } catch(EvaluationException e) {\r\n        int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());\r\n        return new NumberEval(result);\r\n    }\r\n}", "public String toString() {\r\n    return getClass().getName() + \" [\" + _index + \" \" + _name + \"]\";\r\n}", "public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListAssignmentsForHIT(request);\r\n}", "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteAccessControlRule(request);\r\n}", "public Arc<Long> getFirstArc(FST.Arc<Long> arc) {\r\n    return fst.getFirstArc(arc);\r\n}", "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long block = blocks[blocksOffset++];\r\n        for(int shift = 48; shift >= 0; shift -= 16) {\r\n            values[valuesOffset++] = (int)((block >>> shift) & 65535);\r\n        }\r\n    }\r\n}", "public long skip(long charCount) throws IOException {if(charCount < 0) {\r\n        throw new IllegalArgumentException(\"charCount < 0: \" + charCount);\r\n    } synchronized(lock) {\r\n        checkNotClosed();\r\n        if(charCount == 0) {\r\n            return 0;\r\n        }\r\n        long inSkipped;\r\n        int availableFromBuffer = buf.length - pos;\r\n        if(availableFromBuffer > 0) {\r\n            long requiredFromIn = charCount - availableFromBuffer;\r\n            if(requiredFromIn <= 0) {\r\n                pos += charCount;\r\n                return charCount;\r\n            }\r\n            pos += availableFromBuffer;\r\n            inSkipped = in.skip(requiredFromIn);\r\n        } else {\r\n            inSkipped = in.skip(charCount);\r\n        }\r\n        return inSkipped + availableFromBuffer;\r\n    }}", "public Map<String, Ref> getRefsMap() {\r\n    return advertisedRefs;\r\n}", "public UpdateApiKeyResult updateApiKey(UpdateApiKeyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateApiKey(request);\r\n}", "public ObjectStream openStream() throws MissingObjectException, IOException {PackInputStream packIn; @SuppressWarnings(\"resource\")DfsReader ctx = db.newReader(); try {\r\n        try {\r\n            packIn = new PackInputStream(pack, objectOffset + headerLength, ctx);\r\n            ctx = null;\r\n        } catch(IOException packGone) {\r\n            ObjectId obj = pack.getReverseIdx(ctx).findObject(objectOffset);\r\n            return ctx.open(obj, type).openStream();\r\n        }\r\n    } finally {if(ctx != null) {\r\n    ctx.close();\r\n    }} int bufsz = 8192; InputStream in = new BufferedInputStream(new InflaterInputStream(packIn, packIn.ctx.inflater(), bufsz),bufsz); return new ObjectStream.Filter(type, size, in);}", "public ArrayList() {\r\n    array = EmptyArray.OBJECT;\r\n}", "public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDetectorVersion(request);\r\n}", "public void resize() {\r\n    resize(Double.MAX_VALUE);\r\n}", "public RevFlagSet(Collection<RevFlag> s) {\r\n    this();\r\n    addAll(s);\r\n}", "public int size() {\r\n    return size;\r\n}", "public final long getLong() {\r\n    int newPosition = position + SizeOf.LONG;\r\n    if(newPosition > limit) {\r\n        throw new BufferUnderflowException();\r\n    }\r\n    long result = Memory.peekLong(backingArray, offset + position, order);\r\n    position = newPosition;\r\n    return result;\r\n}", "public StringBuilder insert(int offset, long l) {\r\n    insert0(offset, Long.toString(l));\r\n    return this;\r\n}", "public TurkishLowerCaseFilter(TokenStream in) {\r\n    super(in);\r\n}", "public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {\r\n    MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();\r\n    ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);\r\n    return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);\r\n}", "public void addIfNoOverlap(WeightedPhraseInfo wpi) {\r\n    for(WeightedPhraseInfo existWpi : getPhraseList()) {\r\n        if(existWpi.isOffsetOverlap(wpi)) {\r\n            existWpi.getTermsInfos().addAll(wpi.getTermsInfos());\r\n            return;\r\n        }\r\n    }\r\n    getPhraseList().add(wpi);\r\n}", "public ThreeWayMerger newMerger(Repository db) {\r\n    return new InCoreMerger(db);\r\n}", "public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {\r\n    return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;\r\n}", "public Collection<ParseTree> evaluate(ParseTree t) {\r\n    return Trees.findAllRuleNodes(t, ruleIndex);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[CFRULE]\\n\");\r\n    buffer.append(\"    .condition_type   =\").append(getConditionType()).append(\"\\n\");\r\n    buffer.append(\"    OPTION FLAGS=0x\").append(Integer.toHexString(getOptions())).append(\"\\n\");\r\n    if(containsFontFormattingBlock()) {\r\n        buffer.append(_fontFormatting).append(\"\\n\");\r\n    }\r\n    if(containsBorderFormattingBlock()) {\r\n        buffer.append(_borderFormatting).append(\"\\n\");\r\n    }\r\n    if(containsPatternFormattingBlock()) {\r\n        buffer.append(_patternFormatting).append(\"\\n\");\r\n    }\r\n    buffer.append(\"    Formula 1 =\").append(Arrays.toString(getFormula1().getTokens())).append(\"\\n\");\r\n    buffer.append(\"    Formula 2 =\").append(Arrays.toString(getFormula2().getTokens())).append(\"\\n\");\r\n    buffer.append(\"[/CFRULE]\\n\");\r\n    return buffer.toString();\r\n}", "public DescribeServiceUpdatesResult describeServiceUpdates(DescribeServiceUpdatesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeServiceUpdates(request);\r\n}", "public String getNameName(int index) {\r\n    return getNameAt(index).getNameName();\r\n}", "public DescribeLocationsResult describeLocations() {\r\n    return describeLocations(new DescribeLocationsRequest());\r\n}", "public String toString() {\r\n    return \"<phraseslop value='\" + getValueString() + \"'>\" + \"\\n\"+ getChild().toString() + \"\\n</phraseslop>\";\r\n}", "public DirCacheEntry getDirCacheEntry() {\r\n    return currentSubtree == null ? currentEntry : null;\r\n}", "public IntBuffer put(int[] src, int srcOffset, int intCount) {\r\n    Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);\r\n    if(intCount > remaining()) {\r\n        throw new BufferOverflowException();\r\n    }\r\n    for(int i = srcOffset; i < srcOffset + intCount; ++i) {\r\n        put(src[i]);\r\n    }\r\n    return this;\r\n}", "public void trimToSize() {\r\n    int s = size;\r\n    if(s == array.length) {\r\n        return;\r\n    }\r\n    if(s == 0) {\r\n        array = EmptyArray.OBJECT;\r\n    } else {\r\n        Object[] newArray = new Object[s];\r\n        System.arraycopy(array, 0, newArray, 0, s);\r\n        array = newArray;\r\n    }\r\n    modCount++;\r\n}", "public DescribeLocalGatewayVirtualInterfacesResult describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLocalGatewayVirtualInterfaces(request);\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new RussianLightStemFilter(input);\r\n}", "public int [] toArray(final int [] a) {\r\n    int[] rval;\r\n    if(a.length == _limit) {\r\n        System.arraycopy(_array, 0, a, 0, _limit);\r\n        rval = a;\r\n    } else {\r\n        rval = toArray();\r\n    }\r\n    return rval;\r\n}", "public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken,long roleSessionDurationSeconds) {\r\n    if(accessKeyId == null) {\r\n        throw new IllegalArgumentException(\"Access key ID cannot be null.\");\r\n    }\r\n    if(accessKeySecret == null) {\r\n        throw new IllegalArgumentException(\"Access key secret cannot be null.\");\r\n    }\r\n    this.accessKeyId = accessKeyId;\r\n    this.accessKeySecret = accessKeySecret;\r\n    this.sessionToken = sessionToken;\r\n    this.roleSessionDurationSeconds = roleSessionDurationSeconds;\r\n    this.sessionStartedTimeInMilliSeconds = System.currentTimeMillis();\r\n}", "public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {\r\n    if(shortCount > remaining()) {\r\n        throw new BufferUnderflowException();\r\n    }\r\n    System.arraycopy(backingArray, offset + position, dst, dstOffset, shortCount);\r\n    position += shortCount;\r\n    return this;\r\n}", "public ActivateEventSourceResult activateEventSource(ActivateEventSourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeActivateEventSource(request);\r\n}", "public DescribeReceiptRuleSetResult describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeReceiptRuleSet(request);\r\n}", "public Filter(String name) {\r\n    setName(name);\r\n}", "public DoubleBuffer put(double c) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public CreateTrafficPolicyInstanceResult createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateTrafficPolicyInstance(request);\r\n}", "public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {\r\n    super(input);\r\n    this.normalizeKanji = normalizeKanji;\r\n    this.normalizeKana = normalizeKana;\r\n    buffer.reset(input);\r\n}", "public void writeLong(long v) {\r\n    writeInt((int)(v >>  0));\r\n    writeInt((int)(v >> 32));\r\n}", "public FileResolver() {\r\n    exports = new ConcurrentHashMap<>();\r\n    exportBase = new CopyOnWriteArrayList<>();\r\n}", "public ValueEval getRef3DEval(Ref3DPxg rptg) {\r\n    SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());\r\n    return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);\r\n}", "public DeleteDatasetResult deleteDataset(DeleteDatasetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDataset(request);\r\n}", "public StartRelationalDatabaseResult startRelationalDatabase(StartRelationalDatabaseRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartRelationalDatabase(request);\r\n}", "public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings() {\r\n    return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());\r\n}", "static public double pmt(double r, int nper, double pv, double fv, int type) {\r\n    return -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r*type) * (Math.pow(1 + r, nper) - 1));\r\n}", "public DescribeDocumentVersionsResult describeDocumentVersions(DescribeDocumentVersionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDocumentVersions(request);\r\n}", "public ListPublishingDestinationsResult listPublishingDestinations(ListPublishingDestinationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListPublishingDestinations(request);\r\n}", "public DeleteAccountAliasRequest(String accountAlias) {\r\n    setAccountAlias(accountAlias);\r\n}", "public static long[] grow(long[] array) {\r\n    return grow(array, 1 + array.length);\r\n}", "public String outputToString(Object output) {\r\n    if(!(output instanceof List)) {\r\n        return outputs.outputToString((T) output);\r\n    } else {\r\n        List<T> outputList = (List<T>) output;\r\n        StringBuilder b = new StringBuilder();\r\n        b.append('[');\r\n        for(int i=0; i<outputList.size(); i++) {\r\n            if(i > 0) {\r\n                b.append(\", \");\r\n            }\r\n            b.append(outputs.outputToString(outputList.get(i)));\r\n        }\r\n        b.append(']');\r\n        return b.toString();\r\n    }\r\n}", "public void notifyDeleteCell(Cell cell) {\r\n    _bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));\r\n}", "public StringBuilder replace(int start, int end, String str) {\r\n    replace0(start, end, str);\r\n    return this;\r\n}", "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSetIdentityPoolConfiguration(request);\r\n}", "public static double kthSmallest(double[] v, int k) {\r\n    double r = Double.NaN;\r\n    int index = k-1;\r\n    if(v!=null && v.length > index && index >= 0) {\r\n        Arrays.sort(v);\r\n        r = v[index];\r\n    }\r\n    return r;\r\n}", "public void set(int index, long value) {\r\n    final int o = index >>> 5;\r\n    final int b = index & 31;\r\n    final int shift = b << 1;\r\n    blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);\r\n}", "public String toString() {\r\n    if(getChildren() == null || getChildren().size() == 0)return \"<boolean operation='and'/>\";\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"<boolean operation='and'>\");\r\n    for(QueryNode child : getChildren()) {\r\n        sb.append(\"\\n\");\r\n        sb.append(child.toString());\r\n    }\r\n    sb.append(\"\\n</boolean>\");\r\n    return sb.toString();\r\n}", "public int sumTokenSizes(int fromIx, int toIx) {\r\n    int result = 0;\r\n    for(int i=fromIx; i<toIx; i++) {\r\n        result += _ptgs[i].getSize();\r\n    }\r\n    return result;\r\n}", "public void setReadonly(boolean readonly) {\r\n    if(this.readonly && !readonly) throw new IllegalStateException(\"can't alter readonly IntervalSet\");\r\n    this.readonly = readonly;\r\n}", "public final void clearConsumingCell(FormulaCellCacheEntry cce) {\r\n    if(!_consumingCells.remove(cce)) {\r\n        throw new IllegalStateException(\"Specified formula cell is not consumed by this cell\");\r\n    }\r\n}", "@Override public List<E> subList(int start, int end) {\r\n    synchronized(mutex) {\r\n        return new SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);\r\n    }\r\n}", "public FileHeader getFileHeader() {\r\n    return file;\r\n}", "public AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAttachLoadBalancers(request);\r\n}", "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {\r\n    setAccountId(accountId);\r\n    setVaultName(vaultName);\r\n    setJobParameters(jobParameters);\r\n}", "public String toString() {\r\n    return \"SPL\";\r\n}", "public ReplaceableAttribute(String name, String value, Boolean replace) {\r\n    setName(name);\r\n    setValue(value);\r\n    setReplace(replace);\r\n}", "public final void add(IndexableField field) {\r\n    fields.add(field);\r\n}", "public DeleteStackSetResult deleteStackSet(DeleteStackSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteStackSet(request);\r\n}", "public GetRepoBuildRuleListRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetRepoBuildRuleList\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");\r\n    setMethod(MethodType.GET);\r\n}", "public SparseArray(int initialCapacity) {\r\n    initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);\r\n    mKeys = new int[initialCapacity];\r\n    mValues = new Object[initialCapacity];\r\n    mSize = 0;\r\n}", "public InvokeServiceRequest() {\r\n    super(\"industry-brain\", \"2018-07-12\", \"InvokeService\");\r\n    setMethod(MethodType.POST);\r\n}", "public ListAlbumPhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbumPhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public boolean hasPrevious() {\r\n    return link != list.voidLink;\r\n}", "public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteHsmConfiguration(request);\r\n}", "public CreateLoadBalancerRequest(String loadBalancerName) {\r\n    setLoadBalancerName(loadBalancerName);\r\n}", "public String getUserInfo() {\r\n    return decode(userInfo);\r\n}", "public TagAttendeeResult tagAttendee(TagAttendeeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTagAttendee(request);\r\n}", "public String getRefName() {\r\n    return name;\r\n}", "public SpanNearQuery build() {\r\n    return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered);\r\n}", "public boolean isSubTotal(int rowIndex, int columnIndex) {\r\n    return false;\r\n}", "public DescribeDBProxiesResult describeDBProxies(DescribeDBProxiesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDBProxies(request);\r\n}", "public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetVoiceConnectorProxy(request);\r\n}", "public WindowCacheConfig fromConfig(Config rc) {\r\n    setPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION,CONFIG_KEY_PACKED_GIT_USE_STRONGREFS,isPackedGitUseStrongRefs()));\r\n    setPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles()));\r\n    setPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit()));\r\n    setPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize()));\r\n    setPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));\r\n    setDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit()));\r\n    long maxMem = Runtime.getRuntime().maxMemory();\r\n    long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThreshold());\r\n    sft = Math.min(sft, maxMem / 4);\r\n    sft = Math.min(sft, Integer.MAX_VALUE);\r\n    setStreamFileThreshold((int) sft);\r\n    return this;\r\n}", "public static Date getJavaDate(double date) {\r\n    return getJavaDate(date, false, null, false);\r\n}", "public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartPersonTracking(request);\r\n}", "@Override public int size() {\r\n    return totalSize;\r\n}", "public GetRouteResult getRoute(GetRouteRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetRoute(request);\r\n}", "public DeleteClusterResult deleteCluster(DeleteClusterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteCluster(request);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[MMS]\\n\");\r\n    buffer.append(\"    .addMenu        = \").append(Integer.toHexString(getAddMenuCount())).append(\"\\n\");\r\n    buffer.append(\"    .delMenu        = \").append(Integer.toHexString(getDelMenuCount())).append(\"\\n\");\r\n    buffer.append(\"[/MMS]\\n\");\r\n    return buffer.toString();\r\n}", "public FileBasedConfig(Config base, File cfgLocation, FS fs) {\r\n    super(base);\r\n    configFile = cfgLocation;\r\n    this.fs = fs;\r\n    this.snapshot = FileSnapshot.DIRTY;\r\n    this.hash = ObjectId.zeroId();\r\n}", "public int following(int pos) {\r\n    if(pos < text.getBeginIndex() || pos > text.getEndIndex()) {\r\n        throw new IllegalArgumentException(\"offset out of bounds\");\r\n    } else if(0 == sentenceStarts.length) {\r\n        text.setIndex(text.getBeginIndex());\r\n        return DONE;\r\n    } else if(pos >= sentenceStarts[sentenceStarts.length - 1]) {\r\n        text.setIndex(text.getEndIndex());\r\n        currentSentence = sentenceStarts.length - 1;\r\n        return DONE;\r\n    } else {\r\n        currentSentence = (sentenceStarts.length - 1) / 2;\r\n        moveToSentenceAt(pos, 0, sentenceStarts.length - 2);\r\n        text.setIndex(sentenceStarts[++currentSentence]);\r\n        return current();\r\n    }\r\n}", "public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateParameterGroup(request);\r\n}", "public SeriesChartGroupIndexRecord clone() {\r\n    return copy();\r\n}", "public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {\r\n    if(distErrPct < 0 || distErrPct > 0.5) {\r\n        throw new IllegalArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\");\r\n    }\r\n    if(distErrPct == 0 || shape instanceof Point) {\r\n        return 0;\r\n    }\r\n    Rectangle bbox = shape.getBoundingBox();\r\n    Point ctr = bbox.getCenter();\r\n    double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());\r\n    double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);\r\n    return diagonalDist * distErrPct;\r\n}", "public int codePointAt(int index) {\r\n    if(index < 0 || index >= count) {\r\n        throw indexAndLength(index);\r\n    }\r\n    return Character.codePointAt(value, index, count);\r\n}", "public void setPasswordVerifier(int passwordVerifier) {\r\n    this.passwordVerifier = passwordVerifier;\r\n}", "public ListVaultsRequest(String accountId) {\r\n    setAccountId(accountId);\r\n}", "public SquashMessageFormatter() {\r\n    dateFormatter = new GitDateFormatter(Format.DEFAULT);\r\n}", "public GetVideoCoverRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public int lastIndexOf(Object object) {\r\n    int pos = size;\r\n    Link<E> link = voidLink.previous;\r\n    if(object != null) {\r\n        while(link != voidLink) {\r\n            pos--;\r\n            if(object.equals(link.data)) {\r\n                return pos;\r\n            }\r\n            link = link.previous;\r\n        }\r\n    } else {\r\n        while(link != voidLink) {\r\n            pos--;\r\n            if(link.data == null) {\r\n                return pos;\r\n            }\r\n            link = link.previous;\r\n        }\r\n    }\r\n    return -1;\r\n}", "public DescribeSpotFleetRequestsResult describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSpotFleetRequests(request);\r\n}", "public IndexFacesResult indexFaces(IndexFacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeIndexFaces(request);\r\n}", "public RuleBasedBreakIterator getBreakIterator(int script) {\r\n    switch(script) {\r\n    case UScript.JAPANESE:\r\n        return (RuleBasedBreakIterator)cjkBreakIterator.clone();\r\n    case UScript.MYANMAR:\r\n        if(myanmarAsWords) {\r\n            return (RuleBasedBreakIterator)defaultBreakIterator.clone();\r\n        } else {\r\n            return (RuleBasedBreakIterator)myanmarSyllableIterator.clone();\r\n        }\r\n    default:\r\n        return (RuleBasedBreakIterator)defaultBreakIterator.clone();\r\n    }\r\n}", "public String toString() {\r\n    StringBuilder b = new StringBuilder();\r\n    b.append(\"[DCONREF]\\n\");\r\n    b.append(\"    .ref\\n\");\r\n    b.append(\"        .firstrow   = \").append(firstRow).append(\"\\n\");\r\n    b.append(\"        .lastrow    = \").append(lastRow).append(\"\\n\");\r\n    b.append(\"        .firstcol   = \").append(firstCol).append(\"\\n\");\r\n    b.append(\"        .lastcol    = \").append(lastCol).append(\"\\n\");\r\n    b.append(\"    .cch            = \").append(charCount).append(\"\\n\");\r\n    b.append(\"    .stFile\\n\");\r\n    b.append(\"        .h          = \").append(charType).append(\"\\n\");\r\n    b.append(\"        .rgb        = \").append(getReadablePath()).append(\"\\n\");\r\n    b.append(\"[/DCONREF]\\n\");\r\n    return b.toString();\r\n}", "public int getPackedGitOpenFiles() {\r\n    return packedGitOpenFiles;\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[FEATURE HEADER]\\n\");\r\n    buffer.append(\"[/FEATURE HEADER]\\n\");\r\n    return buffer.toString();\r\n}", "public static byte[] getToUnicodeLE(String string) {\r\n    return string.getBytes(UTF16LE);\r\n}", "public final List<String> getFooterLines(String keyName) {\r\n    return getFooterLines(new FooterKey(keyName));\r\n}", "public void refresh() {\r\n    super.refresh();\r\n    clearReferences();\r\n}", "public float get(int index) {\r\n    checkIndex(index);\r\n    return byteBuffer.getFloat(index * SizeOf.FLOAT);\r\n}", "public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDetector(request);\r\n}", "public int[] grow() {\r\n    assert bytesStart != null;\r\n    return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);\r\n}", "public ListExclusionsResult listExclusions(ListExclusionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListExclusions(request);\r\n}", "public static SpatialStrategy getSpatialStrategy(int roundNumber) {\r\n    SpatialStrategy result = spatialStrategyCache.get(roundNumber);\r\n    if(result == null) {\r\n        throw new IllegalStateException(\"Strategy should have been init'ed by SpatialDocMaker by now\");\r\n    }\r\n    return result;\r\n}", "public DBCluster restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRestoreDBClusterToPointInTime(request);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_categoryDataType);\r\n    out.writeShort(field_2_valuesDataType);\r\n    out.writeShort(field_3_numCategories);\r\n    out.writeShort(field_4_numValues);\r\n    out.writeShort(field_5_bubbleSeriesType);\r\n    out.writeShort(field_6_numBubbleValues);\r\n}", "public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePostAgentProfile(request);\r\n}", "public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {\r\n    if(getTokenStream()!=null) {\r\n        TokenSource tokenSource = getTokenStream().getTokenSource();\r\n        if(tokenSource instanceof Lexer) {\r\n            Lexer lexer = (Lexer)tokenSource;\r\n            return compileParseTreePattern(pattern, patternRuleIndex, lexer);\r\n        }\r\n    }\r\n    throw new UnsupportedOperationException(\"Parser can't discover a lexer to use\");\r\n}", "public BacktrackDBClusterResult backtrackDBCluster(BacktrackDBClusterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeBacktrackDBCluster(request);\r\n}", "public String getName() {\r\n    return strategyName;\r\n}", "public void copyTo(byte[] b, int o) {\r\n    formatHexByte(b, o + 0, w1);\r\n    formatHexByte(b, o + 8, w2);\r\n    formatHexByte(b, o + 16, w3);\r\n    formatHexByte(b, o + 24, w4);\r\n    formatHexByte(b, o + 32, w5);\r\n}", "public static final IntList lineMap(byte[] buf, int ptr, int end) {\r\n    IntList map = new IntList((end - ptr) / 36);\r\n    map.fillTo(1, Integer.MIN_VALUE);\r\n    for(; ptr < end; ptr = nextLF(buf, ptr)) {\r\n        map.add(ptr);\r\n    }\r\n    map.add(end);\r\n    return map;\r\n}", "public Set<ObjectId> getAdditionalHaves() {\r\n    return Collections.emptySet();\r\n}", "public synchronized long ramBytesUsed() {\r\n    long sizeInBytes = BASE_RAM_BYTES_USED + fields.size() * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\r\n    for(SimpleTextTerms simpleTextTerms : termsCache.values()) {\r\n        sizeInBytes += (simpleTextTerms!=null) ? simpleTextTerms.ramBytesUsed() : 0;\r\n    }\r\n    return sizeInBytes;\r\n}", "public String toXml(String tab) {\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(tab).append(\"<\").append(getRecordName()).append(\">\\n\");\r\n    for(EscherRecord escherRecord : getEscherRecords()) {\r\n        builder.append(escherRecord.toXml(tab + \"\\t\"));\r\n    }\r\n    builder.append(tab).append(\"</\").append(getRecordName()).append(\">\\n\");\r\n    return builder.toString();\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new GalicianMinimalStemFilter(input);\r\n}", "public String toString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.append(\"Commit\");\r\n    r.append(\"={\\n\");\r\n    r.append(\"tree \");\r\n    r.append(treeId != null ? treeId.name() : \"NOT_SET\");\r\n    r.append(\"\\n\");\r\n    for(ObjectId p : parentIds) {\r\n        r.append(\"parent \");\r\n        r.append(p.name());\r\n        r.append(\"\\n\");\r\n    }\r\n    r.append(\"author \");\r\n    r.append(author != null ? author.toString() : \"NOT_SET\");\r\n    r.append(\"\\n\");\r\n    r.append(\"committer \");\r\n    r.append(committer != null ? committer.toString() : \"NOT_SET\");\r\n    r.append(\"\\n\");\r\n    r.append(\"gpgSignature \");\r\n    r.append(gpgSignature != null ? gpgSignature.toString() : \"NOT_SET\");\r\n    r.append(\"\\n\");\r\n    if(encoding != null && !References.isSameObject(encoding, UTF_8)) {\r\n        r.append(\"encoding \");\r\n        r.append(encoding.name());\r\n        r.append(\"\\n\");\r\n    }\r\n    r.append(\"\\n\");\r\n    r.append(message != null ? message : \"\");\r\n    r.append(\"}\");\r\n    return r.toString();\r\n}", "public IndicNormalizationFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public OptionGroup createOptionGroup(CreateOptionGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateOptionGroup(request);\r\n}", "public AssociateMemberAccountResult associateMemberAccount(AssociateMemberAccountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateMemberAccount(request);\r\n}", "public void run() {\r\n    doRefreshProgress(mId, mProgress, mFromUser, true);\r\n    mRefreshProgressRunnable = this;\r\n}", "public SetTerminationProtectionResult setTerminationProtection(SetTerminationProtectionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSetTerminationProtection(request);\r\n}", "public String getErrorHeader(RecognitionException e) {\r\n    int line = e.getOffendingToken().getLine();\r\n    int charPositionInLine = e.getOffendingToken().getCharPositionInLine();\r\n    return \"line \"+line+\":\"+charPositionInLine;\r\n}", "public CharBuffer asReadOnlyBuffer() {\r\n    CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\r\n    buf.limit = limit;\r\n    buf.position = position;\r\n    buf.mark = mark;\r\n    buf.byteBuffer.order = byteBuffer.order;\r\n    return buf;\r\n}", "public StopSentimentDetectionJobResult stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopSentimentDetectionJob(request);\r\n}", "public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {\r\n    if(newObjectIds != null)return newObjectIds;\r\n    return new ObjectIdSubclassMap<>();\r\n}", "public void clear() {\r\n    hash = hash(new byte[0]);\r\n    super.clear();\r\n}", "public void reset() throws IOException {synchronized(lock) {\r\n        checkNotClosed();\r\n        if(mark == -1) {\r\n            throw new IOException(\"Invalid mark\");\r\n        }\r\n        pos = mark;\r\n    }}", "public RefErrorPtg(LittleEndianInput in)  {\r\n    field_1_reserved = in.readInt();\r\n}", "public SuspendGameServerGroupResult suspendGameServerGroup(SuspendGameServerGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSuspendGameServerGroup(request);\r\n}", "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {\r\n    if(args.length != 3) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);\r\n}", "public GetRepoRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetRepo\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");\r\n    setMethod(MethodType.GET);\r\n}", "public void setDate(Date date) {\r\n    if(date != null) {\r\n        setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND));\r\n    } else {\r\n        this.date = null;\r\n    }\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new GermanMinimalStemFilter(input);\r\n}", "public Object[] toArray() {\r\n    return a.clone();\r\n}", "public void write(char[] buffer, int offset, int len) {\r\n    Arrays.checkOffsetAndCount(buffer.length, offset, len);\r\n    synchronized(lock) {\r\n        expand(len);\r\n        System.arraycopy(buffer, offset, this.buf, this.count, len);\r\n        this.count += len;\r\n    }\r\n}", "public static final RevFilter after(Date ts) {\r\n    return after(ts.getTime());\r\n}", "public DeleteGroupPolicyRequest(String groupName, String policyName) {\r\n    setGroupName(groupName);\r\n    setPolicyName(policyName);\r\n}", "public DeregisterTransitGatewayMulticastGroupMembersResult deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeregisterTransitGatewayMulticastGroupMembers(request);\r\n}", "public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeBatchDeleteScheduledAction(request);\r\n}", "public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateAlgorithm(request);\r\n}", "public int readUByte() {\r\n    return readByte() & 0x00FF;\r\n}", "public void setLength(int sz) {\r\n    NB.encodeInt32(info, infoOffset + P_SIZE, sz);\r\n}", "public DescribeScalingProcessTypesResult describeScalingProcessTypes() {\r\n    return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());\r\n}", "public ListResourceRecordSetsResult listResourceRecordSets(ListResourceRecordSetsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListResourceRecordSets(request);\r\n}", "public Token recoverInline(Parser recognizer)throws RecognitionException{InputMismatchException e = new InputMismatchException(recognizer); for(ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()) {\r\n        context.exception = e;\r\n    } throw new ParseCancellationException(e);}", "public SetTagsForResourceResult setTagsForResource(SetTagsForResourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSetTagsForResource(request);\r\n}", "public ModifyStrategyRequest() {\r\n    super(\"CloudCallCenter\", \"2017-07-05\", \"ModifyStrategy\", \"CloudCallCenter\", \"innerAPI\");\r\n}", "public DescribeVpcEndpointServicesResult describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeVpcEndpointServices(request);\r\n}", "public EnableLoggingResult enableLogging(EnableLoggingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeEnableLogging(request);\r\n}", "public boolean contains(Object o) {\r\n    return ConcurrentHashMap.this.containsValue(o);\r\n}", "public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {\r\n    super(bookName, firstSheetIdentifier);\r\n    _lastSheetIdentifier = lastSheetIdentifier;\r\n}", "public DomainMetadataRequest(String domainName) {\r\n    setDomainName(domainName);\r\n}", "public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {\r\n    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));\r\n    this.currentToken = currentTokenVal;\r\n    this.expectedTokenSequences = expectedTokenSequencesVal;\r\n    this.tokenImage = tokenImageVal;\r\n}", "public FetchPhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"FetchPhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public PrintWriter writer() {\r\n    return writer;\r\n}", "public NGramTokenizerFactory(Map<String, String> args) {\r\n    super(args);\r\n    minGramSize = getInt(args, \"minGramSize\", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);\r\n    maxGramSize = getInt(args, \"maxGramSize\", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public boolean isDirectoryFileConflict() {\r\n    return dfConflict != null;\r\n}", "public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {\r\n    super(input);\r\n    this.stemDerivational = stemDerivational;\r\n}", "public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateTrafficPolicy(request);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeInt(fSD);\r\n    out.writeInt(passwordVerifier);\r\n    StringUtil.writeUnicodeString(out, title);\r\n    out.write(securityDescriptor);\r\n}", "public static double floor(double n, double s) {\r\n    if(s==0 && n!=0) {\r\n        return Double.NaN;\r\n    } else {\r\n        return (n==0 || s==0) ? 0 : Math.floor(n/s) * s;\r\n    }\r\n}", "public ByteArrayDataOutput(byte[] bytes, int offset, int len) {\r\n    reset(bytes, offset, len);\r\n}", "public static List<Tree> getChildren(Tree t) {\r\n    List<Tree> kids = new ArrayList<Tree>();\r\n    for(int i=0; i<t.getChildCount(); i++) {\r\n        kids.add(t.getChild(i));\r\n    }\r\n    return kids;\r\n}", "public void clear() {\r\n    Hashtable.this.clear();\r\n}", "public RefreshAllRecord(boolean refreshAll) {\r\n    this(0);\r\n    setRefreshAll(refreshAll);\r\n}", "public DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteNamedQuery(request);\r\n}", "public GraphvizFormatter(ConnectionCosts costs) {\r\n    this.costs = costs;\r\n    this.bestPathMap = new HashMap<>();\r\n    sb.append(formatHeader());\r\n    sb.append(\"  init [style=invis]\\n\");\r\n    sb.append(\"  init -> 0.0 [label=\\\"\" + BOS_LABEL + \"\\\"]\\n\");\r\n}", "public CheckMultiagentRequest() {\r\n    super(\"visionai-poc\", \"2020-04-08\", \"CheckMultiagent\");\r\n    setMethod(MethodType.POST);\r\n}", "public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListUserProfiles(request);\r\n}", "public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateRelationalDatabaseFromSnapshot(request);\r\n}", "public StartTaskResult startTask(StartTaskRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartTask(request);\r\n}", "public Set<String> getIgnoredPaths() {\r\n    return ignoredPaths;\r\n}", "public FeatSmartTag(RecordInputStream in) {\r\n    data = in.readRemainder();\r\n}", "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {\r\n    setAction(action.toString());\r\n    setResourceRecordSet(resourceRecordSet);\r\n}", "public DeleteImageResult deleteImage(DeleteImageRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteImage(request);\r\n}", "public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateConfigurationSet(request);\r\n}", "public Iterator<E> iterator() {\r\n    Object[] snapshot = elements;\r\n    return new CowIterator<E>(snapshot, 0, snapshot.length);\r\n}", "public void visitContainedRecords(RecordVisitor rv) {\r\n    if(_recs.isEmpty()) {\r\n        return;\r\n    }\r\n    rv.visitRecord(_bofRec);\r\n    for(int i = 0; i < _recs.size(); i++) {\r\n        RecordBase rb = _recs.get(i);\r\n        if(rb instanceof RecordAggregate) {\r\n            ((RecordAggregate) rb).visitContainedRecords(rv);\r\n        } else {\r\n            rv.visitRecord((org.apache.poi.hssf.record.Record) rb);\r\n        }\r\n    }\r\n    rv.visitRecord(EOFRecord.instance);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[FtCbls ]\").append(\"\\n\");\r\n    buffer.append(\"  size     = \").append(getDataSize()).append(\"\\n\");\r\n    buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(\"\\n\");\r\n    buffer.append(\"[/FtCbls ]\").append(\"\\n\");\r\n    return buffer.toString();\r\n}", "public static BATBlock createEmptyBATBlock(final POIFSBigBlockSize bigBlockSize, boolean isXBAT) {\r\n    BATBlock block = new BATBlock(bigBlockSize);\r\n    if(isXBAT) {\r\n        final int _entries_per_xbat_block = bigBlockSize.getXBATEntriesPerBlock();\r\n        block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN;\r\n    }\r\n    return block;\r\n}", "public TagResourceResult tagResource(TagResourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTagResource(request);\r\n}", "public DeleteMailboxPermissionsResult deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteMailboxPermissions(request);\r\n}", "public ListDatasetGroupsResult listDatasetGroups(ListDatasetGroupsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListDatasetGroups(request);\r\n}", "public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeResumeProcesses(request);\r\n}", "public GetPersonTrackingResult getPersonTracking(GetPersonTrackingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetPersonTracking(request);\r\n}", "public String toFormulaString(String[] operands) {\r\n    if(space.isSet(_options)) {\r\n        return operands[ 0 ];\r\n    } else if(optiIf.isSet(_options)) {\r\n        return toFormulaString() + \"(\" + operands[0] + \")\";\r\n    } else if(optiSkip.isSet(_options)) {\r\n        return toFormulaString() + operands[0];\r\n    } else {\r\n        return toFormulaString() + \"(\" + operands[0] + \")\";\r\n    }\r\n}", "public T merge(T first, T second) {\r\n    throw new UnsupportedOperationException();\r\n}", "public String toString() {\r\n    return this.message.getKey() + \": \" + getLocalizedMessage();\r\n}", "public XPath(Parser parser, String path) {\r\n    this.parser = parser;\r\n    this.path = path;\r\n    elements = split(path);\r\n}", "public CreateAccountAliasRequest(String accountAlias) {\r\n    setAccountAlias(accountAlias);\r\n}", "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        final byte block = blocks[blocksOffset++];\r\n        values[valuesOffset++] = (block >>> 7) & 1;\r\n        values[valuesOffset++] = (block >>> 6) & 1;\r\n        values[valuesOffset++] = (block >>> 5) & 1;\r\n        values[valuesOffset++] = (block >>> 4) & 1;\r\n        values[valuesOffset++] = (block >>> 3) & 1;\r\n        values[valuesOffset++] = (block >>> 2) & 1;\r\n        values[valuesOffset++] = (block >>> 1) & 1;\r\n        values[valuesOffset++] = block & 1;\r\n    }\r\n}", "public PushConnection openPush() throws TransportException {return new TcpPushConnection();}", "public static void strcpy(char[] dst, int di, char[] src, int si) {\r\n    while(src[si] != 0) {\r\n        dst[di++] = src[si++];\r\n    }\r\n    dst[di] = 0;\r\n}", "@Override public K getKey() {\r\n    return mapEntry.getKey();\r\n}", "public static int numNonnull(Object[] data) {\r\n    int n = 0;\r\n    if(data == null) return n;\r\n    for(Object o : data) {\r\n        if(o!=null) n++;\r\n    }\r\n    return n;\r\n}", "public void add(int location, E object) {\r\n    if(location >= 0 && location <= size) {\r\n        Link<E> link = voidLink;\r\n        if(location < (size / 2)) {\r\n            for(int i = 0; i <= location; i++) {\r\n                link = link.next;\r\n            }\r\n        } else {\r\n            for(int i = size; i > location; i--) {\r\n                link = link.previous;\r\n            }\r\n        }\r\n        Link<E> previous = link.previous;\r\n        Link<E> newLink = new Link<E>(object, previous, link);\r\n        previous.next = newLink;\r\n        link.previous = newLink;\r\n        size++;\r\n        modCount++;\r\n    } else {\r\n        throw new IndexOutOfBoundsException();\r\n    }\r\n}", "public DescribeDomainResult describeDomain(DescribeDomainRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDomain(request);\r\n}", "public void flush() throws IOException {super.flush();}", "public PersianCharFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public boolean incrementToken() {\r\n    if(used) {\r\n        return false;\r\n    }\r\n    clearAttributes();\r\n    termAttribute.append(value);\r\n    offsetAttribute.setOffset(0, length);\r\n    used = true;\r\n    return true;\r\n}", "public static FloatBuffer allocate(int capacity) {\r\n    if(capacity < 0) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return new ReadWriteFloatArrayBuffer(capacity);\r\n}", "public final Edit after(Edit cut) {\r\n    return new Edit(cut.endA, endA, cut.endB, endB);\r\n}", "public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateRuleVersion(request);\r\n}", "public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListVoiceConnectorTerminationCredentials(request);\r\n}", "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDeploymentTarget(request);\r\n}", "public void setNoChildReport() {\r\n    letChildReport  = false;\r\n    for(final PerfTask task : tasks) {\r\n        if(task instanceof TaskSequence) {\r\n            ((TaskSequence)task).setNoChildReport();\r\n        }\r\n    }\r\n}", "public E get(int location) {\r\n    try {\r\n        return a[location];\r\n    } catch(ArrayIndexOutOfBoundsException e) {\r\n        throw java.util.ArrayList.throwIndexOutOfBoundsException(location, a.length);\r\n    }\r\n}", "public DescribeDataSetResult describeDataSet(DescribeDataSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDataSet(request);\r\n}", "public SkipWorkTreeFilter(int treeIdx) {\r\n    this.treeIdx = treeIdx;\r\n}", "public DescribeNetworkInterfacesResult describeNetworkInterfaces() {\r\n    return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());\r\n}", "public final boolean contains(int row, int col) {\r\n    return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;\r\n}", "public String toString() {\r\n    return new String(this.chars);\r\n}", "public PatchType getPatchType() {\r\n    return patchType;\r\n}", "public Iterator<K> iterator() {\r\n    return new KeyIterator();\r\n}", "public CreateScriptResult createScript(CreateScriptRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateScript(request);\r\n}", "public BytesRef next() {\r\n    termUpto++;\r\n    if(termUpto >= info.terms.size()) {\r\n        return null;\r\n    } else {\r\n        info.terms.get(info.sortedTerms[termUpto], br);\r\n        return br;\r\n    }\r\n}", "public String outputToString(CharsRef output) {\r\n    return output.toString();\r\n}", "public AssociateWebsiteAuthorizationProviderResult associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateWebsiteAuthorizationProvider(request);\r\n}", "public void unpop(RevCommit c) {\r\n    Block b = head;\r\n    if(b == null) {\r\n        b = free.newBlock();\r\n        b.resetToMiddle();\r\n        b.add(c);\r\n        head = b;\r\n        tail = b;\r\n        return;\r\n    } else if(b.canUnpop()) {\r\n        b.unpop(c);\r\n        return;\r\n    }\r\n    b = free.newBlock();\r\n    b.resetToEnd();\r\n    b.unpop(c);\r\n    b.next = head;\r\n    head = b;\r\n}", "public EdgeNGramTokenizerFactory(Map<String, String> args) {\r\n    super(args);\r\n    minGramSize = getInt(args, \"minGramSize\", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);\r\n    maxGramSize = getInt(args, \"maxGramSize\", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public ModifyDBParameterGroupRequest(String dBParameterGroupName, java.util.List<Parameter> parameters) {\r\n    setDBParameterGroupName(dBParameterGroupName);\r\n    setParameters(parameters);\r\n}", "public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetHostedZoneLimit(request);\r\n}", "public void set(int index, long value) {\r\n    final int o = index >>> 6;\r\n    final int b = index & 63;\r\n    final int shift = b << 0;\r\n    blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);\r\n}", "public RevFilter clone() {\r\n    return new PatternSearch(pattern());\r\n}", "public String toString() {\r\n    return \"spans(\" + term.toString() + \")@\" +(doc == -1 ? \"START\" : (doc == NO_MORE_DOCS) ? \"ENDDOC\": doc + \" - \" + (position == NO_MORE_POSITIONS ? \"ENDPOS\" : position));\r\n}", "public boolean canAppendMatch() {\r\n    for(Head head : heads) {\r\n        if(head != LastHead.INSTANCE) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "public synchronized int lastIndexOf(String subString, int start) {\r\n    return super.lastIndexOf(subString, start);\r\n}", "public DeleteNetworkAclEntryResult deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteNetworkAclEntry(request);\r\n}", "public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateMemberToGroup(request);\r\n}", "public static final int committer(byte[] b, int ptr) {\r\n    final int sz = b.length;\r\n    if(ptr == 0)ptr += 46;\r\n    while(ptr < sz && b[ptr] == 'p')ptr += 48;\r\n    if(ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);\r\n    return match(b, ptr, committer);\r\n}", "public int getLineNumber() {\r\n    return row;\r\n}", "public SubmoduleUpdateCommand addPath(String path) {\r\n    paths.add(path);\r\n    return this;\r\n}", "public GetPushTemplateResult getPushTemplate(GetPushTemplateRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetPushTemplate(request);\r\n}", "public DescribeVaultResult describeVault(DescribeVaultRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeVault(request);\r\n}", "public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections() {\r\n    return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());\r\n}", "public ByteBuffer putLong(int index, long value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterDevice(request);\r\n}", "public static Format byId(int id) {\r\n    for(Format format : Format.values()) {\r\n        if(format.getId() == id) {\r\n            return format;\r\n        }\r\n    }\r\n    throw new IllegalArgumentException(\"Unknown format id: \" + id);\r\n}", "public DeleteAppResult deleteApp(DeleteAppRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApp(request);\r\n}", "public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetBaiduChannel(request);\r\n}", "public FST.BytesReader getBytesReader() {\r\n    return fst.getBytesReader();\r\n}", "public static boolean isValidSchemeChar(int index, char c) {\r\n    if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\r\n        return true;\r\n    }\r\n    if(index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListAppliedSchemaArns(request);\r\n}", "public String name() {\r\n    return this.name;\r\n}", "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    if(args.length < 1) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    boolean isA1style;\r\n    String text;\r\n    try {\r\n        ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());\r\n        text = OperandResolver.coerceValueToString(ve);\r\n        switch(args.length) {\r\n        case 1:\r\n            isA1style = true;\r\n            break;\r\n        case 2:\r\n            isA1style = evaluateBooleanArg(args[1], ec);\r\n            break;\r\n        default:\r\n            return ErrorEval.VALUE_INVALID;\r\n        }\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    return evaluateIndirect(ec, text, isA1style);\r\n}", "public final int compareTo(int[] bs, int p) {\r\n    int cmp;\r\n    cmp = NB.compareUInt32(w1, bs[p]);\r\n    if(cmp != 0)return cmp;\r\n    cmp = NB.compareUInt32(w2, bs[p + 1]);\r\n    if(cmp != 0)return cmp;\r\n    cmp = NB.compareUInt32(w3, bs[p + 2]);\r\n    if(cmp != 0)return cmp;\r\n    cmp = NB.compareUInt32(w4, bs[p + 3]);\r\n    if(cmp != 0)return cmp;\r\n    return NB.compareUInt32(w5, bs[p + 4]);\r\n}", "public void removeName(int index) {\r\n    names.remove(index);\r\n    workbook.removeName(index);\r\n}", "public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {\r\n    setQueueUrl(queueUrl);\r\n    setAttributeNames(attributeNames);\r\n}", "public static boolean[] copyOf(boolean[] original, int newLength) {\r\n    if(newLength < 0) {\r\n        throw new NegativeArraySizeException();\r\n    }\r\n    return copyOfRange(original, 0, newLength);\r\n}", "public static void setEnabled(boolean enabled) {\r\n    ENABLED = enabled;\r\n}", "public DeleteLogPatternResult deleteLogPattern(DeleteLogPatternRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLogPattern(request);\r\n}", "public boolean contains(char[] text, int off, int len) {\r\n    return map.containsKey(text, off, len);\r\n}", "public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber) {\r\n    return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber);\r\n}", "public boolean handles(String commandLine) {\r\n    return command.length() + 1 < commandLine.length()&& commandLine.charAt(command.length()) == ' '&& commandLine.startsWith(command);\r\n}", "public static void register(MergeStrategy imp) {\r\n    register(imp.getName(), imp);\r\n}", "public long ramBytesUsed() {\r\n    return BASE_RAM_BYTES_USED + ((index!=null)? index.ramBytesUsed() : 0);\r\n}", "public HostedZone(String id, String name, String callerReference) {\r\n    setId(id);\r\n    setName(name);\r\n    setCallerReference(callerReference);\r\n}", "public GetFindingsResult getFindings(GetFindingsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetFindings(request);\r\n}", "public DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTopicsDetectionJob(request);\r\n}", "public boolean processMatch(ValueEval eval) {\r\n    if(eval instanceof NumericValueEval) {\r\n        if(minimumValue == null) {\r\n            minimumValue = eval;\r\n        } else {\r\n            double currentValue = ((NumericValueEval)eval).getNumberValue();\r\n            double oldValue = ((NumericValueEval)minimumValue).getNumberValue();\r\n            if(currentValue < oldValue) {\r\n                minimumValue = eval;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}", "public void write(LittleEndianOutput out) {\r\n    out.writeByte(sid + getPtgClass());\r\n    out.writeShort(field_1_len_ref_subexpression);\r\n}", "public static void main(String[] args) throws IOException {boolean printTree = false; String path = null; for(int i=0; i<args.length; i++) {\r\n        if(args[i].equals(\"-printTree\")) {\r\n            printTree = true;\r\n        } else {\r\n            path = args[i];\r\n        }\r\n    } if(args.length != (printTree ? 2 : 1)) {\r\n        System.out.println(\"\\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\\n\");\r\n        System.exit(1);\r\n    } Directory dir = FSDirectory.open(Paths.get(path)); TaxonomyReader r = new DirectoryTaxonomyReader(dir); printStats(r, System.out, printTree); r.close(); dir.close();}", "public void setByteValue(byte value) {\r\n    if(!(fieldsData instanceof Byte)) {\r\n        throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to Byte\");\r\n    }\r\n    fieldsData = Byte.valueOf(value);\r\n}", "public static int initialize() {\r\n    return initialize(DEFAULT_SEED);\r\n}", "public CachingDoubleValueSource(DoubleValuesSource source) {\r\n    this.source = source;\r\n    cache = new HashMap<>();\r\n}", "public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {\r\n    setAttributeName(attributeName);\r\n    setAttributeType(attributeType.toString());\r\n}", "public static String join(Collection<String> parts, String separator) {\r\n    return StringUtils.join(parts, separator, separator);\r\n}", "public ListTaskDefinitionFamiliesResult listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListTaskDefinitionFamilies(request);\r\n}", "public ListComponentsResult listComponents(ListComponentsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListComponents(request);\r\n}", "public ActivatePhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"ActivatePhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public CreateMatchmakingRuleSetResult createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateMatchmakingRuleSet(request);\r\n}", "public ListAvailableManagementCidrRangesResult listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListAvailableManagementCidrRanges(request);\r\n}", "public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {\r\n    if(baseObjectIds != null)return baseObjectIds;\r\n    return new ObjectIdSubclassMap<>();\r\n}", "public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeletePushTemplate(request);\r\n}", "public CreateDomainEntryResult createDomainEntry(CreateDomainEntryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDomainEntry(request);\r\n}", "public static int getEncodedSize(Object[] values) {\r\n    int result = values.length * 1;\r\n    for(Object value : values) {\r\n        result += getEncodedSize(value);\r\n    }\r\n    return result;\r\n}", "public OpenNLPTokenizerFactory(Map<String,String> args) {\r\n    super(args);\r\n    sentenceModelFile = require(args, SENTENCE_MODEL);\r\n    tokenizerModelFile = require(args, TOKENIZER_MODEL);\r\n    if(! args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public final int getInt(int index) {\r\n    checkIndex(index, SizeOf.INT);\r\n    return Memory.peekInt(backingArray, offset + index, order);\r\n}", "public List<Head> getNextHeads(char c) {\r\n    if(matches(c)) {\r\n        return newHeads;\r\n    }\r\n    return FileNameMatcher.EMPTY_HEAD_LIST;\r\n}", "public ByteBuffer putShort(short value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public void writeUnshared(Object object) throws IOException {writeObject(object, true);}", "public int offsetByCodePoints(int index, int codePointOffset) {\r\n    return Character.offsetByCodePoints(value, 0, count, index,codePointOffset);\r\n}", "public static int getUniqueAlt(Collection<BitSet> altsets) {\r\n    BitSet all = getAlts(altsets);\r\n    if(all.cardinality()==1) return all.nextSetBit(0);\r\n    return ATN.INVALID_ALT_NUMBER;\r\n}", "public Date getWhen() {\r\n    return new Date(when);\r\n}", "public RuleTagToken(String ruleName, int bypassTokenType, String label) {\r\n    if(ruleName == null || ruleName.isEmpty()) {\r\n        throw new IllegalArgumentException(\"ruleName cannot be null or empty.\");\r\n    }\r\n    this.ruleName = ruleName;\r\n    this.bypassTokenType = bypassTokenType;\r\n    this.label = label;\r\n}", "public DisableOrganizationAdminAccountResult disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisableOrganizationAdminAccount(request);\r\n}", "public CreateRoomResult createRoom(CreateRoomRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateRoom(request);\r\n}", "public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteReplicationGroup(request);\r\n}", "public final CharBuffer decode(ByteBuffer buffer) {\r\n    try {\r\n        return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).decode(buffer);\r\n    } catch(CharacterCodingException ex) {\r\n        throw new Error(ex.getMessage(), ex);\r\n    }\r\n}", "public Distribution(String id, String status, String domainName) {\r\n    setId(id);\r\n    setStatus(status);\r\n    setDomainName(domainName);\r\n}", "public final double[] array() {\r\n    return protectedArray();\r\n}", "public DateWindow1904Record(RecordInputStream in) {\r\n    field_1_window = in.readShort();\r\n}", "public DeleteDBSnapshotRequest(String dBSnapshotIdentifier) {\r\n    setDBSnapshotIdentifier(dBSnapshotIdentifier);\r\n}", "public final ParserExtension getExtension(String key) {\r\n    return this.extensions.get(key);\r\n}", "public void inform(ResourceLoader loader) {\r\n    try {\r\n        if(chunkerModelFile != null) {\r\n            OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);\r\n        }\r\n    } catch(IOException e) {\r\n        throw new IllegalArgumentException(e);\r\n    }\r\n}", "public CompleteVaultLockResult completeVaultLock(CompleteVaultLockRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCompleteVaultLock(request);\r\n}", "public final int[] getCharIntervals() {\r\n    return points.clone();\r\n}", "public long ramBytesUsed() {\r\n    return values.ramBytesUsed()+ super.ramBytesUsed()+ Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;\r\n}", "public RegisterInstancesWithLoadBalancerResult registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterInstancesWithLoadBalancer(request);\r\n}", "public DescribeClusterUserKubeconfigRequest() {\r\n    super(\"CS\", \"2015-12-15\", \"DescribeClusterUserKubeconfig\", \"csk\");\r\n    setUriPattern(\"/k8s/[ClusterId]/user_config\");\r\n    setMethod(MethodType.GET);\r\n}", "public PrecisionRecord(RecordInputStream in) {\r\n    field_1_precision = in.readShort();\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(getLeftRowGutter());\r\n    out.writeShort(getTopColGutter());\r\n    out.writeShort(getRowLevelMax());\r\n    out.writeShort(getColLevelMax());\r\n}", "public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVirtualInterface(request);\r\n}", "public Entry getEntry(String name) throws FileNotFoundException {if(excludes.contains(name)) {\r\n        throw new FileNotFoundException(name);\r\n    } Entry entry = directory.getEntry(name); return wrapEntry(entry);}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[BACKUP]\\n\");\r\n    buffer.append(\"    .backup          = \").append(Integer.toHexString(getBackup())).append(\"\\n\");\r\n    buffer.append(\"[/BACKUP]\\n\");\r\n    return buffer.toString();\r\n}", "public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVoiceConnectorOrigination(request);\r\n}", "public Appendable append(char c) {\r\n    write(c);\r\n    return this;\r\n}", "public static long generationFromSegmentsFileName(String fileName) {\r\n    if(fileName.equals(OLD_SEGMENTS_GEN)) {\r\n        throw new IllegalArgumentException(\"\\\"\" + OLD_SEGMENTS_GEN + \"\\\" is not a valid segment file name since 4.0\");\r\n    } else if(fileName.equals(IndexFileNames.SEGMENTS)) {\r\n        return 0;\r\n    } else if(fileName.startsWith(IndexFileNames.SEGMENTS)) {\r\n        return Long.parseLong(fileName.substring(1+IndexFileNames.SEGMENTS.length()),Character.MAX_RADIX);\r\n    } else {\r\n        throw new IllegalArgumentException(\"fileName \\\"\" + fileName + \"\\\" is not a segments file\");\r\n    }\r\n}", "public static TagOpt fromOption(String o) {\r\n    if(o == null || o.length() == 0)return AUTO_FOLLOW;\r\n    for(TagOpt tagopt : values()) {\r\n        if(tagopt.option().equals(o))return tagopt;\r\n    }\r\n    throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o));\r\n}", "public StartContentModerationResult startContentModeration(StartContentModerationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartContentModeration(request);\r\n}", "public static String quoteReplacement(String s) {\r\n    StringBuilder result = new StringBuilder(s.length());\r\n    for(int i = 0; i < s.length(); i++) {\r\n        char c = s.charAt(i);\r\n        if(c == '\\\\' || c == '$') {\r\n            result.append('\\\\');\r\n        }\r\n        result.append(c);\r\n    }\r\n    return result.toString();\r\n}", "public final void set(V newValue) {\r\n    value = newValue;\r\n}", "public QueryParserTokenManager(CharStream stream) {\r\n    input_stream = stream;\r\n}", "public long valueFor(double elapsed) {\r\n    double val;\r\n    if(modBy == 0)val = elapsed / factor;\r\n    elseval = elapsed / factor % modBy;\r\n    if(type == '0')return Math.round(val);\r\n    elsereturn(long) val;\r\n}", "public LongBuffer get(long[] dst, int dstOffset, int longCount) {\r\n    byteBuffer.limit(limit * SizeOf.LONG);\r\n    byteBuffer.position(position * SizeOf.LONG);\r\n    if(byteBuffer instanceof DirectByteBuffer) {\r\n        ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);\r\n    } else {\r\n        ((HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);\r\n    }\r\n    this.position += longCount;\r\n    return this;\r\n}", "public void removeErrorListeners() {\r\n    _listeners.clear();\r\n}", "public CommonTokenStream(TokenSource tokenSource, int channel) {\r\n    this(tokenSource);\r\n    this.channel = channel;\r\n}", "public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListObjectPolicies(request);\r\n}", "public ObjectToPack(AnyObjectId src, int type) {\r\n    super(src);\r\n    flags = type << TYPE_SHIFT;\r\n}", "public int stem(char s[], int len) {\r\n    int numVowels = numVowels(s, len);\r\n    for(int i = 0; i < affixes.length; i++) {\r\n        Affix affix = affixes[i];\r\n        if(numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s, len, affix.affix)) {\r\n            len -= affix.affix.length;\r\n            return affix.palatalizes ? unpalatalize(s, len) : len;\r\n        }\r\n    }\r\n    return len;\r\n}", "public void recover(Parser recognizer, RecognitionException e) {\r\n    if(lastErrorIndex==recognizer.getInputStream().index() &&lastErrorStates != null &&lastErrorStates.contains(recognizer.getState())) {\r\n        recognizer.consume();\r\n    }\r\n    lastErrorIndex = recognizer.getInputStream().index();\r\n    if(lastErrorStates==null) lastErrorStates = new IntervalSet();\r\n    lastErrorStates.add(recognizer.getState());\r\n    IntervalSet followSet = getErrorRecoverySet(recognizer);\r\n    consumeUntil(recognizer, followSet);\r\n}", "public String toFormulaString() {\r\n    String value = field_3_string;\r\n    int len = value.length();\r\n    StringBuilder sb = new StringBuilder(len + 4);\r\n    sb.append(FORMULA_DELIMITER);\r\n    for(int i = 0; i < len; i++) {\r\n        char c = value.charAt(i);\r\n        if(c == FORMULA_DELIMITER) {\r\n            sb.append(FORMULA_DELIMITER);\r\n        }\r\n        sb.append(c);\r\n    }\r\n    sb.append(FORMULA_DELIMITER);\r\n    return sb.toString();\r\n}", "public UnlinkFaceRequest() {\r\n    super(\"LinkFace\", \"2018-07-20\", \"UnlinkFace\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n    setMethod(MethodType.POST);\r\n}", "public ConfigurationOptionSetting(String namespace, String optionName, String value) {\r\n    setNamespace(namespace);\r\n    setOptionName(optionName);\r\n    setValue(value);\r\n}", "public CharSequence getFully(CharSequence key) {\r\n    StringBuilder result = new StringBuilder(tries.size() * 2);\r\n    for(int i = 0; i < tries.size(); i++) {\r\n        CharSequence r = tries.get(i).getFully(key);\r\n        if(r == null || (r.length() == 1 && r.charAt(0) == EOM)) {\r\n            return result;\r\n        }\r\n        result.append(r);\r\n    }\r\n    return result;\r\n}", "public DescribeMountTargetSecurityGroupsResult describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeMountTargetSecurityGroups(request);\r\n}", "public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetApiMapping(request);\r\n}", "public HttpRequest(String strUrl) {\r\n    super(strUrl);\r\n}", "public MemFuncPtg(int subExprLen) {\r\n    field_1_len_ref_subexpression = subExprLen;\r\n}", "public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {TermStatsQueue tiq = null; if(field != null) {\r\n        Terms terms = MultiTerms.getTerms(reader, field);\r\n        if(terms == null) {\r\n            throw new RuntimeException(\"field \" + field + \" not found\");\r\n        }\r\n        TermsEnum termsEnum = terms.iterator();\r\n        tiq = new TermStatsQueue(numTerms, comparator);\r\n        tiq.fill(field, termsEnum);\r\n    } else {\r\n        Collection<String> fields = FieldInfos.getIndexedFields(reader);\r\n        if(fields.size() == 0) {\r\n            throw new RuntimeException(\"no fields found for this index\");\r\n        }\r\n        tiq = new TermStatsQueue(numTerms, comparator);\r\n        for(String fieldName : fields) {\r\n            Terms terms = MultiTerms.getTerms(reader, fieldName);\r\n            if(terms != null) {\r\n                tiq.fill(fieldName, terms.iterator());\r\n            }\r\n        }\r\n    } TermStats[] result = new TermStats[tiq.size()]; int count = tiq.size() - 1; while(tiq.size() != 0) {\r\n        result[count] = tiq.pop();\r\n        count--;\r\n    } return result;}", "public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApnsVoipChannel(request);\r\n}", "public ListFacesResult listFaces(ListFacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListFaces(request);\r\n}", "public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {\r\n    this.ctx = ctx;\r\n    this.from = from;\r\n    this.provider = provider;\r\n    this.multiplier = multiplier;\r\n}", "public char get(int index) {\r\n    checkIndex(index);\r\n    return sequence.charAt(index);\r\n}", "public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateConfigurationProfile(request);\r\n}", "public DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLifecycleHooks(request);\r\n}", "public DescribeHostReservationsResult describeHostReservations(DescribeHostReservationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeHostReservations(request);\r\n}", "public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {\r\n    if(outerContext==null) outerContext = RuleContext.EMPTY;\r\n    if(outerContext.parent==null || outerContext==RuleContext.EMPTY) {\r\n        return PredictionContext.EMPTY;\r\n    }\r\n    PredictionContext parent = EMPTY;\r\n    parent = PredictionContext.fromRuleContext(atn, outerContext.parent);\r\n    ATNState state = atn.states.get(outerContext.invokingState);\r\n    RuleTransition transition = (RuleTransition)state.transition(0);\r\n    return SingletonPredictionContext.create(parent, transition.followState.stateNumber);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[SXVDEX]\\n\");\r\n    buffer.append(\"    .grbit1 =\").append(HexDump.intToHex(_grbit1)).append(\"\\n\");\r\n    buffer.append(\"    .grbit2 =\").append(HexDump.byteToHex(_grbit2)).append(\"\\n\");\r\n    buffer.append(\"    .citmShow =\").append(HexDump.byteToHex(_citmShow)).append(\"\\n\");\r\n    buffer.append(\"    .isxdiSort =\").append(HexDump.shortToHex(_isxdiSort)).append(\"\\n\");\r\n    buffer.append(\"    .isxdiShow =\").append(HexDump.shortToHex(_isxdiShow)).append(\"\\n\");\r\n    buffer.append(\"    .subtotalName =\").append(_subtotalName).append(\"\\n\");\r\n    buffer.append(\"[/SXVDEX]\\n\");\r\n    return buffer.toString();\r\n}", "public String toString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.append(\"BlameResult: \");\r\n    r.append(getResultPath());\r\n    return r.toString();\r\n}", "public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListChangeSets(request);\r\n}", "public boolean isAllowNonFastForwards() {\r\n    return allowNonFastForwards;\r\n}", "public FeatRecord() {\r\n    futureHeader = new FtrHeader();\r\n    futureHeader.setRecordType(sid);\r\n}", "public ShortBuffer put(short c) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public void setQuery(CharSequence query) {\r\n    this.query = query;\r\n    this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, \"\");\r\n}", "public StashApplyCommand stashApply() {\r\n    return new StashApplyCommand(repo);\r\n}", "public Set<String> nameSet() {\r\n    return Collections.unmodifiableSet(dictionary.values());\r\n}", "public static int getEffectivePort(String scheme, int specifiedPort) {\r\n    if(specifiedPort != -1) {\r\n        return specifiedPort;\r\n    }\r\n    if(\"http\".equalsIgnoreCase(scheme)) {\r\n        return 80;\r\n    } else if(\"https\".equalsIgnoreCase(scheme)) {\r\n        return 443;\r\n    } else {\r\n        return -1;\r\n    }\r\n}", "public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListAssessmentTemplates(request);\r\n}", "public Cluster restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRestoreFromClusterSnapshot(request);\r\n}", "public void addShape(HSSFShape shape) {\r\n    shape.setPatriarch(this.getPatriarch());\r\n    shape.setParent(this);\r\n    shapes.add(shape);\r\n}", "public boolean equals(Object o) {\r\n    if(this == o) return true;\r\n    if(o == null || getClass() != o.getClass()) return false;\r\n    FacetEntry that = (FacetEntry) o;\r\n    if(count != that.count) return false;\r\n    if(!value.equals(that.value)) return false;\r\n    return true;\r\n}", "public static final int prev(byte[] b, int ptr, char chrA) {\r\n    if(ptr == b.length)--ptr;\r\n    while(ptr >= 0) {\r\n        if(b[ptr--] == chrA)return ptr;\r\n    }\r\n    return ptr;\r\n}", "public final boolean isDeltaRepresentation() {\r\n    return deltaBase != null;\r\n}", "public Token emitEOF() {\r\n    int cpos = getCharPositionInLine();\r\n    int line = getLine();\r\n    Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1,line, cpos);\r\n    emit(eof);\r\n    return eof;\r\n}", "public UpdateUserRequest(String userName) {\r\n    setUserName(userName);\r\n}", "public RevFilter negate() {\r\n    return NotRevFilter.create(this);\r\n}", "public void setTagger(PersonIdent taggerIdent) {\r\n    tagger = taggerIdent;\r\n}", "public static BufferSize automatic() {\r\n    Runtime rt = Runtime.getRuntime();\r\n    final long max = rt.maxMemory();\r\n    final long total = rt.totalMemory();\r\n    final long free = rt.freeMemory();\r\n    final long totalAvailableBytes = max - total + free;\r\n    long sortBufferByteSize = free/2;\r\n    final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;\r\n    if(sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) {\r\n        if(totalAvailableBytes/2 > minBufferSizeBytes) {\r\n            sortBufferByteSize = totalAvailableBytes/2;\r\n        } else {\r\n            sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\r\n        }\r\n    }\r\n    return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));\r\n}", "public static int trimTrailingWhitespace(byte[] raw, int start, int end) {\r\n    int ptr = end - 1;\r\n    while(start <= ptr && isWhitespace(raw[ptr]))ptr--;\r\n    return ptr + 1;\r\n}", "public TopMarginRecord(RecordInputStream in) {\r\n    field_1_margin = in.readDouble();\r\n}", "public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {\r\n    setInfoType(infoType.toString());\r\n}", "public CreatePlayerSessionsResult createPlayerSessions(CreatePlayerSessionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreatePlayerSessions(request);\r\n}", "public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateProxySession(request);\r\n}", "public int getObjectType() {\r\n    return type;\r\n}", "public String getScheme() {\r\n    return scheme;\r\n}", "public void characters(char[] ch, int start, int length) {\r\n    contents.append(ch, start, length);\r\n}", "public FetchAlbumTagPhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"FetchAlbumTagPhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteMembers(request);\r\n}", "public GetContactReachabilityStatusResult getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetContactReachabilityStatus(request);\r\n}", "@Override public boolean remove(Object o) {\r\n    return Impl.this.remove(o) != null;\r\n}", "public E last() {\r\n    return backingMap.lastKey();\r\n}", "public CreateStreamingDistributionResult createStreamingDistribution(CreateStreamingDistributionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateStreamingDistribution(request);\r\n}", "public boolean isAbsolute() {\r\n    return absolute;\r\n}", "public DisableAddOnResult disableAddOn(DisableAddOnRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisableAddOn(request);\r\n}", "public DescribeAliasResult describeAlias(DescribeAliasRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAlias(request);\r\n}", "public void next(int delta) {\r\n    while(--delta >= 0) {\r\n        if(currentSubtree != null)ptr += currentSubtree.getEntrySpan();\r\n        elseptr++;\r\n        if(eof())break;\r\n        parseEntry();\r\n    }\r\n}", "public RevFilter clone() {\r\n    return new Binary(a.clone(), b.clone());\r\n}", "public Reader create(Reader input) {\r\n    return new PersianCharFilter(input);\r\n}", "public String option() {\r\n    return option;\r\n}", "public String toString() {\r\n    final StringBuilder sb = new StringBuilder(\"[\");\r\n    for(Object item : this) {\r\n        if(sb.length()>1) sb.append(\", \");\r\n        if(item instanceof char[]) {\r\n            sb.append((char[]) item);\r\n        } else {\r\n            sb.append(item);\r\n        }\r\n    }\r\n    return sb.append(']').toString();\r\n}", "public DescribeSignalingChannelResult describeSignalingChannel(DescribeSignalingChannelRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSignalingChannel(request);\r\n}", "public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAttachStaticIp(request);\r\n}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);\r\n    CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);\r\n    sb.append(getClass().getName());\r\n    sb.append(\" [\").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append(\"]\");\r\n    return sb.toString();\r\n}", "public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {\r\n    super(BLOOM_CODEC_NAME);\r\n    this.delegatePostingsFormat = delegatePostingsFormat;\r\n    this.bloomFilterFactory = bloomFilterFactory;\r\n}", "public ListTemplatesResult listTemplates(ListTemplatesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListTemplates(request);\r\n}", "public TimerThread(long resolution, Counter counter) {\r\n    super(THREAD_NAME);\r\n    this.resolution = resolution;\r\n    this.counter = counter;\r\n    this.setDaemon(true);\r\n}", "public DrawingRecord() {\r\n    recordData = EMPTY_BYTE_ARRAY;\r\n}", "public ListDirectoriesResult listDirectories(ListDirectoriesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListDirectories(request);\r\n}", "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        final byte block = blocks[blocksOffset++];\r\n        values[valuesOffset++] = (block >>> 7) & 1;\r\n        values[valuesOffset++] = (block >>> 6) & 1;\r\n        values[valuesOffset++] = (block >>> 5) & 1;\r\n        values[valuesOffset++] = (block >>> 4) & 1;\r\n        values[valuesOffset++] = (block >>> 3) & 1;\r\n        values[valuesOffset++] = (block >>> 2) & 1;\r\n        values[valuesOffset++] = (block >>> 1) & 1;\r\n        values[valuesOffset++] = block & 1;\r\n    }\r\n}", "public GroupingSearch disableCaching() {\r\n    this.maxCacheRAMMB = null;\r\n    this.maxDocsToCache = null;\r\n    return this;\r\n}", "public static int idealByteArraySize(int need) {\r\n    for(int i = 4; i < 32; i++)if(need <= (1 << i) - 12)return (1 << i) - 12;\r\n    return need;\r\n}", "public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateAssessmentTarget(request);\r\n}", "public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyVolume(request);\r\n}", "public Cell merge(Cell m, Cell e) {\r\n    if(m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {\r\n        Cell c = new Cell(m);\r\n        c.cnt += e.cnt;\r\n        return c;\r\n    } else {\r\n        return null;\r\n    }\r\n}", "public ByteBuffer read(int length, long position) throws IOException {if(position >= size()) {\r\n        throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");\r\n    } ByteBuffer dst; if(writable) {\r\n        dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);\r\n        buffersToClean.add(dst);\r\n    } else {\r\n        channel.position(position);\r\n        dst = ByteBuffer.allocate(length);\r\n        int worked = IOUtils.readFully(channel, dst);\r\n        if(worked == -1) {\r\n            throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");\r\n        }\r\n    } dst.position(0); return dst;}", "public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {\r\n    request = beforeClientExecution(request);\r\n    executeRespondActivityTaskCompleted(request);\r\n}", "public synchronized final void incrementProgressBy(int diff) {\r\n    setProgress(mProgress + diff);\r\n}", "public MetadataDiff compareMetadata(DirCacheEntry entry) {\r\n    if(entry.isAssumeValid())return MetadataDiff.EQUAL;\r\n    if(entry.isUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;\r\n    if(isModeDifferent(entry.getRawMode()))return MetadataDiff.DIFFER_BY_METADATA;\r\n    int type = mode & FileMode.TYPE_MASK;\r\n    if(type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;\r\n    if(!entry.isSmudged() && entry.getLength() != (int) getEntryLength())return MetadataDiff.DIFFER_BY_METADATA;\r\n    Instant cacheLastModified = entry.getLastModifiedInstant();\r\n    Instant fileLastModified = getEntryLastModifiedInstant();\r\n    if(timestampComparator.compare(cacheLastModified, fileLastModified,getOptions().getCheckStat() == CheckStat.MINIMAL) != 0) {\r\n        return MetadataDiff.DIFFER_BY_TIMESTAMP;\r\n    }\r\n    if(entry.isSmudged()) {\r\n        return MetadataDiff.SMUDGED;\r\n    }\r\n    return MetadataDiff.EQUAL;\r\n}", "public static NumberRecord convertToNumberRecord(RKRecord rk) {\r\n    NumberRecord num = new NumberRecord();\r\n    num.setColumn(rk.getColumn());\r\n    num.setRow(rk.getRow());\r\n    num.setXFIndex(rk.getXFIndex());\r\n    num.setValue(rk.getRKNumber());\r\n    return num;\r\n}", "public CharBuffer put(char[] src, int srcOffset, int charCount) {\r\n    byteBuffer.limit(limit * SizeOf.CHAR);\r\n    byteBuffer.position(position * SizeOf.CHAR);\r\n    if(byteBuffer instanceof ReadWriteDirectByteBuffer) {\r\n        ((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);\r\n    } else {\r\n        ((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);\r\n    }\r\n    this.position += charCount;\r\n    return this;\r\n}", "public int getCells() {\r\n    Iterator<Character> i = cells.keySet().iterator();\r\n    int size = 0;\r\n    for(; i.hasNext();) {\r\n        Character c = i.next();\r\n        Cell e = at(c);\r\n        if(e.cmd >= 0 || e.ref >= 0) {\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}", "public BeiderMorseFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    NameType nameType = NameType.valueOf(get(args, \"nameType\", NameType.GENERIC.toString()));\r\n    RuleType ruleType = RuleType.valueOf(get(args, \"ruleType\", RuleType.APPROX.toString()));\r\n    boolean concat = getBoolean(args, \"concat\", true);\r\n    engine = new PhoneticEngine(nameType, ruleType, concat);\r\n    Set<String> langs = getSet(args, \"languageSet\");\r\n    languageSet = (null == langs || (1 == langs.size() && langs.contains(\"auto\"))) ? null : LanguageSet.from(langs);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public static double varp(double[] v) {\r\n    double r = Double.NaN;\r\n    if(v!=null && v.length > 1) {\r\n        r = devsq(v) /v.length;\r\n    }\r\n    return r;\r\n}", "public PersianNormalizationFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) {\r\n    HashSet<WeightedTerm> terms = new HashSet<>();\r\n    Predicate<String> fieldSelector = fieldName == null ? f -> true : fieldName::equals;\r\n    query.visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));\r\n    return terms.toArray(new WeightedTerm[0]);\r\n}", "public DeleteDocumentationPartResult deleteDocumentationPart(DeleteDocumentationPartRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDocumentationPart(request);\r\n}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"[CHART]\\n\");\r\n    sb.append(\"    .x     = \").append(getX()).append('\\n');\r\n    sb.append(\"    .y     = \").append(getY()).append('\\n');\r\n    sb.append(\"    .width = \").append(getWidth()).append('\\n');\r\n    sb.append(\"    .height= \").append(getHeight()).append('\\n');\r\n    sb.append(\"[/CHART]\\n\");\r\n    return sb.toString();\r\n}", "public final short get(int index) {\r\n    checkIndex(index);\r\n    return backingArray[offset + index];\r\n}", "public String toString() {\r\n    return image;\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {\r\n    try {\r\n        AreaEval reA = evaluateRef(arg0);\r\n        AreaEval reB = evaluateRef(arg1);\r\n        AreaEval result = resolveRange(reA, reB);\r\n        if(result == null) {\r\n            return ErrorEval.NULL_INTERSECTION;\r\n        }\r\n        return result;\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n}", "public void clear() {\r\n    weightBySpanQuery.clear();\r\n}", "public int findEndOffset(StringBuilder buffer, int start) {\r\n    if(start > buffer.length() || start < 0) return start;\r\n    bi.setText(buffer.substring(start));\r\n    return bi.next() + start;\r\n}", "final public SrndQuery PrimaryQuery() throws ParseException {SrndQuery q; switch((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n    case LPAREN:\r\n        jj_consume_token(LPAREN);\r\n        q = FieldsQuery();\r\n        jj_consume_token(RPAREN);\r\n        break;\r\n    case OR:\r\n    case AND:\r\n    case W:\r\n    case N:\r\n        q = PrefixOperatorQuery();\r\n        break;\r\n    case TRUNCQUOTED:\r\n    case QUOTED:\r\n    case SUFFIXTERM:\r\n    case TRUNCTERM:\r\n    case TERM:\r\n        q = SimpleTerm();\r\n        break;\r\n    default:\r\n        jj_la1[5] = jj_gen;\r\n        jj_consume_token(-1);\r\n        throw new ParseException();\r\n    } OptionalWeights(q); {if(true) return q;} throw new Error(\"Missing return statement in function\");}", "public DeleteApiKeyResult deleteApiKey(DeleteApiKeyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApiKey(request);\r\n}", "public InsertTagsRequest() {\r\n    super(\"Ots\", \"2016-06-20\", \"InsertTags\", \"ots\");\r\n    setMethod(MethodType.POST);\r\n}", "public DeleteUserByPrincipalIdResult deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteUserByPrincipalId(request);\r\n}", "public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeNetworkInterfaces(request);\r\n}", "public int serialize(int offset, byte[] data, EscherSerializationListener listener) {\r\n    listener.beforeRecordSerialize(offset, getRecordId(), this);\r\n    LittleEndian.putShort(data, offset, getOptions());\r\n    LittleEndian.putShort(data, offset + 2, getRecordId());\r\n    LittleEndian.putInt(data, offset + 4, 8);\r\n    LittleEndian.putInt(data, offset + 8, field_1_numShapes);\r\n    LittleEndian.putInt(data, offset + 12, field_2_lastMSOSPID);\r\n    listener.afterRecordSerialize(offset + 16, getRecordId(), getRecordSize(), this);\r\n    return getRecordSize();\r\n}", "public CreateSecurityConfigurationResult createSecurityConfiguration(CreateSecurityConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSecurityConfiguration(request);\r\n}", "public DescribeClientVpnConnectionsResult describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeClientVpnConnections(request);\r\n}", "public static void fill(double[] array, double value) {\r\n    for(int i = 0; i < array.length; i++) {\r\n        array[i] = value;\r\n    }\r\n}", "public boolean hasNext() {\r\n    return nextId < cells.length;\r\n}", "public PostingsEnum reset(int[] postings) {\r\n    this.postings = postings;\r\n    upto = -2;\r\n    freq = 0;\r\n    return this;\r\n}", "public final boolean hasAll(RevFlagSet set) {\r\n    return (flags & set.mask) == set.mask;\r\n}", "public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyAccount(request);\r\n}", "public Token LT(int k) {\r\n    lazyInit();\r\n    if(k==0) return null;\r\n    if(k < 0) return LB(-k);\r\n    int i = p + k - 1;\r\n    sync(i);\r\n    if(i >= tokens.size()) {\r\n        return tokens.get(tokens.size()-1);\r\n    }\r\n    return tokens.get(i);\r\n}", "public void removeSheet(int sheetIndex) {\r\n    if(boundsheets.size() > sheetIndex) {\r\n        records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);\r\n        boundsheets.remove(sheetIndex);\r\n        fixTabIdRecord();\r\n    }\r\n    int sheetNum1Based = sheetIndex + 1;\r\n    for(int i=0; i<getNumNames(); i++) {\r\n        NameRecord nr = getNameRecord(i);\r\n        if(nr.getSheetNumber() == sheetNum1Based) {\r\n            nr.setSheetNumber(0);\r\n        } else if(nr.getSheetNumber() > sheetNum1Based) {\r\n            nr.setSheetNumber(nr.getSheetNumber()-1);\r\n        }\r\n    }\r\n    if(linkTable != null) {\r\n        linkTable.removeSheet(sheetIndex);\r\n    }\r\n}", "public void removeName(String name) {\r\n    int index = getNameIndex(name);\r\n    removeName(index);\r\n}", "public boolean equals(final Object o) {\r\n    if(!(o instanceof Property)) {\r\n        return false;\r\n    }\r\n    final Property p = (Property) o;\r\n    final Object pValue = p.getValue();\r\n    final long pId = p.getID();\r\n    if(id != pId || (id != 0 && !typesAreEqual(type, p.getType()))) {\r\n        return false;\r\n    }\r\n    if(value == null && pValue == null) {\r\n        return true;\r\n    }\r\n    if(value == null || pValue == null) {\r\n        return false;\r\n    }\r\n    final Class<?> valueClass = value.getClass();\r\n    final Class<?> pValueClass = pValue.getClass();\r\n    if(!(valueClass.isAssignableFrom(pValueClass)) &&!(pValueClass.isAssignableFrom(valueClass))) {\r\n        return false;\r\n    }\r\n    if(value instanceof byte[]) {\r\n        byte[] thisVal = (byte[]) value, otherVal = (byte[]) pValue;\r\n        int len = unpaddedLength(thisVal);\r\n        if(len != unpaddedLength(otherVal)) {\r\n            return false;\r\n        }\r\n        for(int i=0; i<len; i++) {\r\n            if(thisVal[i] != otherVal[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return value.equals(pValue);\r\n}", "public GetRepoBuildListRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetRepoBuildList\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/build\");\r\n    setMethod(MethodType.GET);\r\n}", "public MessageWriter() {\r\n    buf = new ByteArrayOutputStream();\r\n    enc = new OutputStreamWriter(getRawStream(), UTF_8);\r\n}", "public void append(RecordBase r) {\r\n    _recs.add(r);\r\n}", "public void close() throws IOException {if(read(skipBuffer) != -1 || actualSize != expectedSize) {\r\n        throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength));\r\n    } int used = bAvail - inf.getRemaining(); if(0 < used) {\r\n        onObjectData(src, buf, p, used);\r\n        use(used);\r\n    } inf.reset();}", "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeModelPackage(request);\r\n}", "public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {\r\n    if(rec instanceof FormulaRecord) {\r\n        FormulaRecord formulaRec = (FormulaRecord)rec;\r\n        StringRecord cachedText;\r\n        Class<? extends Record> nextClass = rs.peekNextClass();\r\n        if(nextClass == StringRecord.class) {\r\n            cachedText = (StringRecord) rs.getNext();\r\n        } else {\r\n            cachedText = null;\r\n        }\r\n        insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));\r\n    } else {\r\n        insertCell(rec);\r\n    }\r\n}", "public Decompressor clone() {\r\n    return new DeflateDecompressor();\r\n}", "public UpdateS3ResourcesResult updateS3Resources(UpdateS3ResourcesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateS3Resources(request);\r\n}", "public GroupQueryNode(QueryNode query) {\r\n    if(query == null) {\r\n        throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"query\", \"null\"));\r\n    }\r\n    allocate();\r\n    setLeaf(false);\r\n    add(query);\r\n}", "public CharSequence toQueryString(EscapeQuerySyntax escaper) {\r\n    StringBuilder path = new StringBuilder();\r\n    path.append(\"/\").append(getFirstPathElement());\r\n    for(QueryText pathelement : getPathElements(1)) {\r\n        CharSequence value = escaper.escape(pathelement.value, Locale.getDefault(), Type.STRING);\r\n        path.append(\"/\\\"\").append(value).append(\"\\\"\");\r\n    }\r\n    return path.toString();\r\n}", "public void removeCellComment() {\r\n    HSSFComment comment = _sheet.findCellComment(_record.getRow(), _record.getColumn());\r\n    _comment = null;\r\n    if(null == comment) {\r\n        return;\r\n    }\r\n    _sheet.getDrawingPatriarch().removeShape(comment);\r\n}", "public void reset() {\r\n    arriving = -1;\r\n    leaving = -1;\r\n}", "public ActivateUserResult activateUser(ActivateUserRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeActivateUser(request);\r\n}", "public boolean isCharsetDetected() {\r\n    throw new UnsupportedOperationException();\r\n}", "public Cluster modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifySnapshotCopyRetentionPeriod(request);\r\n}", "public DeleteClusterSubnetGroupResult deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteClusterSubnetGroup(request);\r\n}", "public static String decode(byte[] buffer) {\r\n    return decode(buffer, 0, buffer.length);\r\n}", "public int getDefaultPort() {\r\n    return -1;\r\n}", "public StopTaskResult stopTask(StopTaskRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopTask(request);\r\n}", "public void seekExact(BytesRef target, TermState otherState) {\r\n    assert otherState != null && otherState instanceof BlockTermState;\r\n    assert !doOrd || ((BlockTermState) otherState).ord < numTerms;\r\n    state.copyFrom(otherState);\r\n    seekPending = true;\r\n    indexIsCurrent = false;\r\n    term.copyBytes(target);\r\n}", "public SeriesToChartGroupRecord(RecordInputStream in) {\r\n    field_1_chartGroupIndex = in.readShort();\r\n}", "public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, String value) {\r\n    boolean is16Bit = hasMultibyte(value);\r\n    out.writeByte(is16Bit ? 0x01 : 0x00);\r\n    if(is16Bit) {\r\n        putUnicodeLE(value, out);\r\n    } else {\r\n        putCompressedUnicode(value, out);\r\n    }\r\n}", "public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAuthorizeSecurityGroupIngress(request);\r\n}", "public void addFile(String file) {\r\n    checkFileNames(Collections.singleton(file));\r\n    setFiles.add(namedForThisSegment(file));\r\n}", "public void setSize(int width, int height) {\r\n    mWidth = width;\r\n    mHeight = height;\r\n}", "public final void setPrecedenceFilterSuppressed(boolean value) {\r\n    if(value) {\r\n        this.reachesIntoOuterContext |= 0x40000000;\r\n    } else {\r\n        this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;\r\n    }\r\n}", "public IntervalSet LOOK(ATNState s, RuleContext ctx) {\r\n    return LOOK(s, null, ctx);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(getOptionFlags());\r\n    out.writeShort(getRowHeight());\r\n}", "public Builder(boolean dedup) {\r\n    this.dedup = dedup;\r\n}", "public Hashtable(int capacity, float loadFactor) {\r\n    this(capacity);\r\n    if(loadFactor <= 0 || Float.isNaN(loadFactor)) {\r\n        throw new IllegalArgumentException(\"Load factor: \" + loadFactor);\r\n    }\r\n}", "public Object get(CharSequence key) {\r\n    final int bucket = normalCompletion.getBucket(key);\r\n    return bucket == -1 ? null : Long.valueOf(bucket);\r\n}", "public ListHyperParameterTuningJobsResult listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListHyperParameterTuningJobs(request);\r\n}", "public DeleteTableResult deleteTable(String tableName) {\r\n    return deleteTable(new DeleteTableRequest().withTableName(tableName));\r\n}", "public final boolean lessThan(TextFragment fragA, TextFragment fragB) {\r\n    if(fragA.getScore() == fragB.getScore())return fragA.fragNum > fragB.fragNum;\r\n    elsereturn fragA.getScore() < fragB.getScore();\r\n}", "public void freeBefore(int pos) {\r\n    assert pos >= 0;\r\n    assert pos <= nextPos;\r\n    final int newCount = nextPos - pos;\r\nassert newCount <= count: \"newCount=\"\r\n    + newCount + \" count=\" + count;\r\nassert newCount <= buffer.length: \"newCount=\"\r\n    + newCount + \" buf.length=\" + buffer.length;\r\n    count = newCount;\r\n}", "public UpdateHITTypeOfHITResult updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateHITTypeOfHIT(request);\r\n}", "public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateRecommenderConfiguration(request);\r\n}", "public int compareTo(BytesRef other) {\r\n    return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,other.bytes, other.offset, other.offset + other.length);\r\n}", "public int stem(char s[], int len) {\r\n    if(len > 4 && s[len-1] == 's')len--;\r\n    if(len > 5 &&(endsWith(s, len, \"ene\") || (endsWith(s, len, \"ane\") &&useNynorsk)))return len - 3;\r\n    if(len > 4 &&(endsWith(s, len, \"er\") ||   endsWith(s, len, \"en\") ||   endsWith(s, len, \"et\") || (endsWith(s, len, \"ar\") &&useNynorsk)))return len - 2;\r\n    if(len > 3)switch(s[len-1]) {\r\n        case 'a':\r\n        case 'e':\r\n            return len - 1;\r\n        }\r\n    return len;\r\n}", "public DescribeDBSnapshotsResult describeDBSnapshots(DescribeDBSnapshotsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDBSnapshots(request);\r\n}", "public SortedSetDocValuesFacetField(String dim, String label) {\r\n    super(\"dummy\", TYPE);\r\n    FacetField.verifyLabel(label);\r\n    FacetField.verifyLabel(dim);\r\n    this.dim = dim;\r\n    this.label = label;\r\n}", "public CreateDocumentationPartResult createDocumentationPart(CreateDocumentationPartRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDocumentationPart(request);\r\n}", "public String getValue() {\r\n    return value;\r\n}", "public ShortBuffer asReadOnlyBuffer() {\r\n    return duplicate();\r\n}", "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDataSourcePermissions(request);\r\n}", "public static org.apache.poi.hssf.record.Record createSingleRecord(RecordInputStream in) {\r\n    I_RecordCreator constructor = _recordCreatorsById.get(Integer.valueOf(in.getSid()));\r\n    if(constructor == null) {\r\n        return new UnknownRecord(in);\r\n    }\r\n    return constructor.create(in);\r\n}", "public int getCount() {\r\n    return mTabs.size();\r\n}", "public DeleteApplicationReferenceDataSourceResult deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApplicationReferenceDataSource(request);\r\n}", "public CreateProjectVersionResult createProjectVersion(CreateProjectVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateProjectVersion(request);\r\n}", "public IntBuffer slice() {\r\n    return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);\r\n}", "public final byte get() {\r\n    if(position == limit) {\r\n        throw new BufferUnderflowException();\r\n    }\r\n    return this.block.peekByte(offset + position++);\r\n}", "public LongBuffer put(int index, long c) {\r\n    checkIndex(index);\r\n    backingArray[offset + index] = c;\r\n    return this;\r\n}", "public StoredField(String name, float value) {\r\n    super(name, TYPE);\r\n    fieldsData = value;\r\n}", "public IntervalSet getExpectedTokensWithinCurrentRule() {\r\n    ATN atn = getInterpreter().atn;\r\n    ATNState s = atn.states.get(getState());\r\n    return atn.nextTokens(s);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[FILESHARING]\\n\");\r\n    buffer.append(\"    .readonly       = \").append(getReadOnly() == 1 ? \"true\" : \"false\").append(\"\\n\");\r\n    buffer.append(\"    .password       = \").append(Integer.toHexString(getPassword())).append(\"\\n\");\r\n    buffer.append(\"    .username       = \").append(getUsername()).append(\"\\n\");\r\n    buffer.append(\"[/FILESHARING]\\n\");\r\n    return buffer.toString();\r\n}", "public SubmoduleInitCommand(Repository repo) {\r\n    super(repo);\r\n    paths = new ArrayList<>();\r\n}", "public void include(String name, AnyObjectId id) {\r\n    boolean validRefName = Repository.isValidRefName(name) || Constants.HEAD.equals(name);\r\n    if(!validRefName)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name));\r\n    if(include.containsKey(name))throw new IllegalStateException(JGitText.get().duplicateRef + name);\r\n    include.put(name, id.toObjectId());\r\n}", "public Cluster enableSnapshotCopy(EnableSnapshotCopyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeEnableSnapshotCopy(request);\r\n}", "public ValueFiller getValueFiller() {\r\n    return new ValueFiller() {\r\n        private final MutableValueFloat mval = new MutableValueFloat();\r\n        @Override", "public void serialize(LittleEndianOutput out) {\r\n    out.writeByte(getPane());\r\n    out.writeShort(getActiveCellRow());\r\n    out.writeShort(getActiveCellCol());\r\n    out.writeShort(getActiveCellRef());\r\n    int nRefs = field_6_refs.length;\r\n    out.writeShort(nRefs);\r\n    for(CellRangeAddress8Bit field_6_ref : field_6_refs) {\r\n        field_6_ref.serialize(out);\r\n    }\r\n}", "public static Counter newCounter() {\r\n    return newCounter(false);\r\n}", "public boolean get(String name, boolean dflt) {\r\n    boolean vals[] = (boolean[]) valByRound.get(name);\r\n    if(vals != null) {\r\n        return vals[roundNumber % vals.length];\r\n    }\r\n    String sval = props.getProperty(name, \"\" + dflt);\r\n    if(sval.indexOf(\":\") < 0) {\r\n        return Boolean.valueOf(sval).booleanValue();\r\n    }\r\n    int k = sval.indexOf(\":\");\r\n    String colName = sval.substring(0, k);\r\n    sval = sval.substring(k + 1);\r\n    colForValByRound.put(name, colName);\r\n    vals = propToBooleanArray(sval);\r\n    valByRound.put(name, vals);\r\n    return vals[roundNumber % vals.length];\r\n}", "public void preSerialize() {\r\n    if(records.getTabpos() > 0) {\r\n        TabIdRecord tir = (TabIdRecord) records.get(records.getTabpos());\r\n        if(tir._tabids.length < boundsheets.size()) {\r\n            fixTabIdRecord();\r\n        }\r\n    }\r\n}", "public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {\r\n    super(delegate.getReuseStrategy());\r\n    this.delegate = delegate;\r\n    this.maxTokenCount = maxTokenCount;\r\n    this.consumeAllTokens = consumeAllTokens;\r\n}", "public ExternalBookBlock(int numberOfSheets) {\r\n    _externalBookRecord = SupBookRecord.createInternalReferences((short) numberOfSheets);\r\n    _externalNameRecords = new ExternalNameRecord[0];\r\n    _crnBlocks = new CRNBlock[0];\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[SCENARIOPROTECT]\\n\");\r\n    buffer.append(\"    .protect         = \").append(getProtect()).append(\"\\n\");\r\n    buffer.append(\"[/SCENARIOPROTECT]\\n\");\r\n    return buffer.toString();\r\n}", "public PushCommand setThin(boolean thin) {\r\n    checkCallable();\r\n    this.thin = thin;\r\n    return this;\r\n}", "public int compareTo(SearcherTracker other) {\r\n    return Double.compare(other.recordTimeSec, recordTimeSec);\r\n}", "public ReverseStringFilter create(TokenStream in) {\r\n    return new ReverseStringFilter(in);\r\n}", "public BlockList() {\r\n    directory = BlockList.<T> newDirectory(256);\r\n    directory[0] = BlockList.<T> newBlock();\r\n    tailBlock = directory[0];\r\n}", "public QueryScorer(WeightedSpanTerm[] weightedTerms) {\r\n    this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);\r\n    for(int i = 0; i < weightedTerms.length; i++) {\r\n        WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);\r\n        if((existingTerm == null) ||(existingTerm.weight < weightedTerms[i].weight)) {\r\n            fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\r\n            maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\r\n        }\r\n    }\r\n    skipInitExtractor = true;\r\n}", "public boolean equals(Object _other) {\r\n    assert neverEquals(_other);\r\n    if(_other instanceof MergedGroup) {\r\n        MergedGroup<?> other = (MergedGroup<?>) _other;\r\n        if(groupValue == null) {\r\n            return other == null;\r\n        } else {\r\n            return groupValue.equals(other);\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}", "public final Charset charset() {\r\n    return cs;\r\n}", "public DescribeExperimentResult describeExperiment(DescribeExperimentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeExperiment(request);\r\n}", "public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel) {\r\n    this.escherGroup = escherGroup;\r\n    this.workbook = workbook;\r\n    this.verticalPointsPerPixel = verticalPointsPerPixel;\r\n    this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;\r\n    this.font = new Font(\"Arial\", 0, 10);\r\n    this.foreground = forecolor;\r\n}", "public String pattern() {\r\n    return patternText;\r\n}", "public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteRouteTable(request);\r\n}", "public AssociateVPCWithHostedZoneResult associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateVPCWithHostedZone(request);\r\n}", "public PutIntegrationResult putIntegration(PutIntegrationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePutIntegration(request);\r\n}", "public SimpleEntry(K theKey, V theValue) {\r\n    key = theKey;\r\n    value = theValue;\r\n}", "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\r\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);\r\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\r\n    }\r\n}", "public DisassociateConnectionFromLagResult disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateConnectionFromLag(request);\r\n}", "public FileMode getOldMode() {\r\n    return oldMode;\r\n}", "@Override public String toString() {\r\n    return m.toString();\r\n}", "public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopKeyPhrasesDetectionJob(request);\r\n}", "public String toString() {\r\n    return \"[Array Formula or Shared Formula]\\n\" + \"row = \" + getRow() + \"\\n\" + \"col = \" + getColumn() + \"\\n\";\r\n}", "public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListDominantLanguageDetectionJobs(request);\r\n}", "public String toString() {\r\n    return \"slice start=\" + start + \" length=\" + length + \" readerIndex=\" + readerIndex;\r\n}", "public static final int parseHexInt4(final byte digit) {\r\n    final byte r = digits16[digit];\r\n    if(r < 0)throw new ArrayIndexOutOfBoundsException();\r\n    return r;\r\n}", "public Attribute(String name, String value) {\r\n    setName(name);\r\n    setValue(value);\r\n}", "public DescribeStackSetOperationResult describeStackSetOperation(DescribeStackSetOperationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStackSetOperation(request);\r\n}", "public HSSFCell getCell(int cellnum) {\r\n    return getCell(cellnum, book.getMissingCellPolicy());\r\n}", "public void write(byte[] b) {\r\n    writeContinueIfRequired(b.length);\r\n    _ulrOutput.write(b);\r\n}", "public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {\r\n    setImageId(imageId);\r\n    setAttribute(attribute.toString());\r\n}", "public void discardResultContents() {\r\n    resultContents = null;\r\n}", "public ObjectId getPeeledObjectId() {\r\n    return getLeaf().getPeeledObjectId();\r\n}", "public void undeprecateDomain(UndeprecateDomainRequest request) {\r\n    request = beforeClientExecution(request);\r\n    executeUndeprecateDomain(request);\r\n}", "public void write(LittleEndianOutput out) {\r\n    out.writeByte(sid + getPtgClass());\r\n    out.writeByte(field_3_string.length());\r\n    out.writeByte(_is16bitUnicode ? 0x01 : 0x00);\r\n    if(_is16bitUnicode) {\r\n        StringUtil.putUnicodeLE(field_3_string, out);\r\n    } else {\r\n        StringUtil.putCompressedUnicode(field_3_string, out);\r\n    }\r\n}", "public DeleteQueueResult deleteQueue(String queueUrl) {\r\n    return deleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl));\r\n}", "public void setCheckEofAfterPackFooter(boolean b) {\r\n    checkEofAfterPackFooter = b;\r\n}", "public void swap() {\r\n    final int sBegin = beginA;\r\n    final int sEnd = endA;\r\n    beginA = beginB;\r\n    endA = endB;\r\n    beginB = sBegin;\r\n    endB = sEnd;\r\n}", "public int getPackedGitWindowSize() {\r\n    return packedGitWindowSize;\r\n}", "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePutMetricData(request);\r\n}", "public GetCelebrityRecognitionResult getCelebrityRecognition(GetCelebrityRecognitionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetCelebrityRecognition(request);\r\n}", "public CreateQueueRequest(String queueName) {\r\n    setQueueName(queueName);\r\n}", "public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {\r\n    super(arearef);\r\n    this.externalWorkbookNumber = externalWorkbookNumber;\r\n    this.firstSheetName = sheetName.getSheetIdentifier().getName();\r\n    if(sheetName instanceof SheetRangeIdentifier) {\r\n        this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();\r\n    } else {\r\n        this.lastSheetName = null;\r\n    }\r\n}", "public void setBaseline(long clockTime) {\r\n    t0 = clockTime;\r\n    timeout = t0 + ticksAllowed;\r\n}", "public MoveAddressToVpcResult moveAddressToVpc(MoveAddressToVpcRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeMoveAddressToVpc(request);\r\n}", "public String toString() {\r\n    String coll = collectionModel.getName();\r\n    if(coll != null) {\r\n        return String.format(Locale.ROOT, \"LM %s - %s\", getName(), coll);\r\n    } else {\r\n        return String.format(Locale.ROOT, \"LM %s\", getName());\r\n    }\r\n}", "public DescribeLagsResult describeLags(DescribeLagsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLags(request);\r\n}", "public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {\r\n    if(_refEval == null) {\r\n        return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);\r\n    }\r\n    return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);\r\n}", "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {\r\n    byteBuffer.limit(limit * SizeOf.SHORT);\r\n    byteBuffer.position(position * SizeOf.SHORT);\r\n    if(byteBuffer instanceof ReadWriteDirectByteBuffer) {\r\n        ((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);\r\n    } else {\r\n        ((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);\r\n    }\r\n    this.position += shortCount;\r\n    return this;\r\n}", "public void initialize(final String cat) {\r\n    this._cat=cat;\r\n}", "public void write(int oneByte) throws IOException {out.write(oneByte); written++;}", "public DescribeImportImageTasksResult describeImportImageTasks(DescribeImportImageTasksRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeImportImageTasks(request);\r\n}", "public ColumnInfoRecord(RecordInputStream in) {\r\n    _firstCol = in.readUShort();\r\n    _lastCol  = in.readUShort();\r\n    _colWidth = in.readUShort();\r\n    _xfIndex  = in.readUShort();\r\n    _options   = in.readUShort();\r\n    switch(in.remaining()) {\r\n    case 2:\r\n        field_6_reserved  = in.readUShort();\r\n        break;\r\n    case 1:\r\n        field_6_reserved  = in.readByte();\r\n        break;\r\n    case 0:\r\n        field_6_reserved  = 0;\r\n        break;\r\n    default:\r\n        throw new RuntimeException(\"Unusual record size remaining=(\" + in.remaining() + \")\");\r\n    }\r\n}", "public Status(IndexDiff diff) {\r\n    super();\r\n    this.diff = diff;\r\n    hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff.getChanged().isEmpty() || !diff.getRemoved().isEmpty() || !diff.getMissing().isEmpty() || !diff.getModified().isEmpty() || !diff.getConflicting().isEmpty();\r\n    clean = !hasUncommittedChanges && diff.getUntracked().isEmpty();\r\n}", "public CreateExperimentResult createExperiment(CreateExperimentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateExperiment(request);\r\n}", "public UnknownRecord clone() {\r\n    return copy();\r\n}", "public FloatBuffer slice() {\r\n    byteBuffer.limit(limit * SizeOf.FLOAT);\r\n    byteBuffer.position(position * SizeOf.FLOAT);\r\n    ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());\r\n    FloatBuffer result = new FloatToByteBufferAdapter(bb);\r\n    byteBuffer.clear();\r\n    return result;\r\n}", "public DescribeSnapshotSchedulesResult describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeSnapshotSchedules(request);\r\n}", "public ListImagesResult listImages(ListImagesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListImages(request);\r\n}", "public Diff(int ins, int del, int rep, int noop) {\r\n    INSERT = ins;\r\n    DELETE = del;\r\n    REPLACE = rep;\r\n    NOOP = noop;\r\n}", "public String toFormulaString(String[] operands) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(operands[ 0 ]);\r\n    buffer.append(\",\");\r\n    buffer.append(operands[ 1 ]);\r\n    return buffer.toString();\r\n}", "public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {\r\n    WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];\r\n    for(int i = 0; i < wbEvals.length; i++) {\r\n        wbEvals[i] = evaluators[i]._evaluator;\r\n    }\r\n    CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);\r\n}", "public ListPhotoTagsRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"ListPhotoTags\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public RandomSamplingFacetsCollector(int sampleSize, long seed) {\r\n    super(false);\r\n    this.sampleSize = sampleSize;\r\n    this.random = new XORShift64Random(seed);\r\n    this.sampledDocs = null;\r\n}", "public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAllocateStaticIp(request);\r\n}", "public FeatRecord(RecordInputStream in) {\r\n    futureHeader = new FtrHeader(in);\r\n    isf_sharedFeatureType = in.readShort();\r\n    reserved1 = in.readByte();\r\n    reserved2 = in.readInt();\r\n    int cref = in.readUShort();\r\n    cbFeatData = in.readInt();\r\n    reserved3 = in.readShort();\r\n    cellRefs = new CellRangeAddress[cref];\r\n    for(int i=0; i<cellRefs.length; i++) {\r\n        cellRefs[i] = new CellRangeAddress(in);\r\n    }\r\n    switch(isf_sharedFeatureType) {\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:\r\n        sharedFeature = new FeatProtection(in);\r\n        break;\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:\r\n        sharedFeature = new FeatFormulaErr2(in);\r\n        break;\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:\r\n        sharedFeature = new FeatSmartTag(in);\r\n        break;\r\n    default:\r\n        logger.log(POILogger.ERROR, \"Unknown Shared Feature \" + isf_sharedFeatureType + \" found!\");\r\n    }\r\n}", "public RevCommit tryFastForward(RevCommit newCommit) throws IOException,GitAPIException {Ref head = getHead(); ObjectId headId = head.getObjectId(); if(headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD)); RevCommit headCommit = walk.lookupCommit(headId); if(walk.isMergedInto(newCommit, headCommit))return newCommit; String headName = getHeadName(head); return tryFastForward(headName, headCommit, newCommit);}", "public CreateSnapshotScheduleResult createSnapshotSchedule(CreateSnapshotScheduleRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSnapshotSchedule(request);\r\n}", "public Record getNext() {\r\n    if(!hasNext()) {\r\n        throw new RuntimeException(\"Attempt to read past end of record stream\");\r\n    }\r\n    _countRead ++;\r\n    return _list.get(_nextIndex++);\r\n}", "public String toString() {\r\n    return RawParseUtils.decode(buf.toByteArray());\r\n}", "public ListTablesRequest(String exclusiveStartTableName) {\r\n    setExclusiveStartTableName(exclusiveStartTableName);\r\n}", "public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeEnableAlarmActions(request);\r\n}", "public Builder() {\r\n    this(true);\r\n}", "public boolean equals(Object obj) {\r\n    final State other = (State) obj;\r\n    return is_final == other.is_final&& Arrays.equals(this.labels, other.labels)&& referenceEquals(this.states, other.states);\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new EnglishPossessiveFilter(input);\r\n}", "public void clearFormatting() {\r\n    _string = cloneStringIfRequired();\r\n    _string.clearFormatting();\r\n    addToSSTIfRequired();\r\n}", "public int get(int index, long[] arr, int off, int len) {\r\nassert len > 0 : \"len must be > 0 (got \"\r\n    + len + \")\";\r\n    assert index >= 0 && index < valueCount;\r\n    len = Math.min(len, valueCount - index);\r\n    Arrays.fill(arr, off, off + len, 0);\r\n    return len;\r\n}", "public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteRouteResponse(request);\r\n}", "public String toPrivateString() {\r\n    return format(true, false);\r\n}", "public CreatePresignedDomainUrlResult createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreatePresignedDomainUrl(request);\r\n}", "public void write(int oneChar) {\r\n    doWrite(new char[] { (char) oneChar }, 0, 1);\r\n}", "public SSTRecord getSSTRecord() {\r\n    return sstRecord;\r\n}", "public String toString() {\r\n    return \"term=\" + term + \",field=\" + field + \",value=\" + valueToString() + \",docIDUpto=\" + docIDUpto;\r\n}", "public boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {\r\n    return bloomFilter.getSaturation() > 0.9f;\r\n}", "public Builder(boolean ignoreCase) {\r\n    this.ignoreCase = ignoreCase;\r\n}", "public String toString() {\r\n    return getClass().getName()+ \"(maxBasicQueries: \" + maxBasicQueries+ \", queriesMade: \" + queriesMade+ \")\";\r\n}", "public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDataSource(request);\r\n}", "public RebootNodeResult rebootNode(RebootNodeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRebootNode(request);\r\n}", "public void processChildRecords() {\r\n    convertRawBytesToEscherRecords();\r\n}", "public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateOrUpdateTags(request);\r\n}", "public FileSnapshot getSnapShot() {\r\n    return snapShot;\r\n}", "public InputStream openResource(String resource) throws IOException {final InputStream stream = (clazz != null) ?clazz.getResourceAsStream(resource) :loader.getResourceAsStream(resource); if(stream == null)throw new IOException(\"Resource not found: \" + resource); return stream;}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    sb.append(getClass().getName()).append(\" [\");\r\n    sb.append(\"sid=\").append(HexDump.shortToHex(_sid));\r\n    sb.append(\" size=\").append(_data.length);\r\n    sb.append(\" : \").append(HexDump.toHex(_data));\r\n    sb.append(\"]\\n\");\r\n    return sb.toString();\r\n}", "public int nextIndex() {\r\n    return index;\r\n}", "public CharSequence toQueryString(EscapeQuerySyntax escaper) {\r\n    if(isDefaultField(this.field)) {\r\n        return \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";\r\n    } else {\r\n        return this.field + \":\" + \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";\r\n    }\r\n}", "public CalcModeRecord clone() {\r\n    return copy();\r\n}", "public boolean isOutput() {\r\n    return output;\r\n}", "public CreateNetworkInterfaceResult createNetworkInterface(CreateNetworkInterfaceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateNetworkInterface(request);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_password);\r\n}", "public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopDominantLanguageDetectionJob(request);\r\n}", "public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) {\r\n    this.connectionTimeoutInMilliseconds = milliseconds;\r\n    return this;\r\n}", "public GetGatewayGroupResult getGatewayGroup(GetGatewayGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetGatewayGroup(request);\r\n}", "public FloatBuffer slice() {\r\n    return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);\r\n}", "public static String join(Collection<String> parts, String separator,String lastSeparator) {\r\n    StringBuilder sb = new StringBuilder();\r\n    int i = 0;\r\n    int lastIndex = parts.size() - 1;\r\n    for(String part : parts) {\r\n        sb.append(part);\r\n        if(i == lastIndex - 1) {\r\n            sb.append(lastSeparator);\r\n        } else if(i != lastIndex) {\r\n            sb.append(separator);\r\n        }\r\n        i++;\r\n    }\r\n    return sb.toString();\r\n}", "public String toString() {\r\n    return \"(\" + a.toString() + \" AND \" + b.toString() + \")\";\r\n}", "public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {\r\n    setTopicArn(topicArn);\r\n    setNextToken(nextToken);\r\n}", "public byte readByte() {\r\n    return bytes[pos--];\r\n}", "public TerminateClientVpnConnectionsResult terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTerminateClientVpnConnections(request);\r\n}", "public ReceiveMessageRequest(String queueUrl) {\r\n    setQueueUrl(queueUrl);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_barSpace);\r\n    out.writeShort(field_2_categorySpace);\r\n    out.writeShort(field_3_formatFlags);\r\n}", "public Object common(Object output1, Object output2) {\r\n    return outputs.common((T) output1, (T) output2);\r\n}", "public CreateVariableResult createVariable(CreateVariableRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateVariable(request);\r\n}", "public static final int match(byte[] b, int ptr, byte[] src) {\r\n    if(ptr + src.length > b.length)return -1;\r\n    for(int i = 0; i < src.length; i++, ptr++)if(b[ptr] != src[i])return -1;\r\n    return ptr;\r\n}", "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\r\n    int bytesRemaining = readHeader(data, offset);\r\n    int pos            = offset + 8;\r\n    int size           = 0;\r\n    field_1_rectX1 =  LittleEndian.getInt(data, pos + size);\r\n    size+=4;\r\n    field_2_rectY1 =  LittleEndian.getInt(data, pos + size);\r\n    size+=4;\r\n    field_3_rectX2 =  LittleEndian.getInt(data, pos + size);\r\n    size+=4;\r\n    field_4_rectY2 =  LittleEndian.getInt(data, pos + size);\r\n    size+=4;\r\n    bytesRemaining -= size;\r\n    if(bytesRemaining != 0) {\r\n        throw new RecordFormatException(\"Expected no remaining bytes but got \" + bytesRemaining);\r\n    }\r\n    return 8 + size + bytesRemaining;\r\n}", "public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateCloudFrontOriginAccessIdentity(request);\r\n}", "public boolean isNamespaceAware() {\r\n    return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);\r\n}", "public void setOverridable(boolean on) {\r\n    overridable = on;\r\n}", "public String getClassName() {\r\n    return className;\r\n}", "public synchronized DirectoryReader getIndexReader() {\r\n    if(indexReader != null) {\r\n        indexReader.incRef();\r\n    }\r\n    return indexReader;\r\n}", "public int indexOfKey(int key) {\r\n    return binarySearch(mKeys, 0, mSize, key);\r\n}", "public BlankRecord(RecordInputStream in) {\r\n    field_1_row = in.readUShort();\r\n    field_2_col = in.readShort();\r\n    field_3_xf  = in.readShort();\r\n}", "public long length() {\r\n    return length;\r\n}", "public PasswordRecord(RecordInputStream in) {\r\n    field_1_password = in.readShort();\r\n}", "public HashMap(int capacity, float loadFactor) {\r\n    this(capacity);\r\n    if(loadFactor <= 0 || Float.isNaN(loadFactor)) {\r\n        throw new IllegalArgumentException(\"Load factor: \" + loadFactor);\r\n    }\r\n}", "public void run() {\r\n    long lastReopenStartNS = System.nanoTime();\r\n    while(!finish) {\r\n        while(!finish) {\r\n            reopenLock.lock();\r\n            try {\r\n                boolean hasWaiting = waitingGen > searchingGen;\r\n                final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\r\n                final long sleepNS = nextReopenStartNS - System.nanoTime();\r\n                if(sleepNS > 0) {\r\n                    reopenCond.awaitNanos(sleepNS);\r\n                } else {\r\n                    break;\r\n                }\r\n            } catch(InterruptedException ie) {\r\n                Thread.currentThread().interrupt();\r\n                return;\r\n            }\r\n            finally {reopenLock.unlock();}\r\n        }\r\n        if(finish) {\r\n            break;\r\n        }\r\n        lastReopenStartNS = System.nanoTime();\r\n        refreshStartGen = writer.getMaxCompletedSequenceNumber();\r\n        try {\r\n            manager.maybeRefreshBlocking();\r\n        } catch(IOException ioe) {\r\n            throw new RuntimeException(ioe);\r\n        }\r\n    }\r\n}", "public DeleteLoginProfileRequest(String userName) {\r\n    setUserName(userName);\r\n}", "public E pollFirst() {\r\n    return (size == 0) ? null : removeFirstImpl();\r\n}", "public CreatePhotoRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"CreatePhoto\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public String getName() {\r\n    return \"resolve\";\r\n}", "public int findEndOffset(StringBuilder buffer, int start) {\r\n    if(start > buffer.length() || start < 0) return start;\r\n    int offset, count = maxScan;\r\n    for(offset = start; offset < buffer.length() && count > 0; count--) {\r\n        if(boundaryChars.contains(buffer.charAt(offset))) return offset;\r\n        offset++;\r\n    }\r\n    return start;\r\n}", "public void setObjectChecker(ObjectChecker oc) {\r\n    objCheck = oc;\r\n}", "public BaseRef(AreaEval ae) {\r\n    _refEval = null;\r\n    _areaEval = ae;\r\n    _firstRowIndex = ae.getFirstRow();\r\n    _firstColumnIndex = ae.getFirstColumn();\r\n    _height = ae.getLastRow() - ae.getFirstRow() + 1;\r\n    _width = ae.getLastColumn() - ae.getFirstColumn() + 1;\r\n}", "public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateVpcEndpoint(request);\r\n}", "public DeregisterWorkspaceDirectoryResult deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeregisterWorkspaceDirectory(request);\r\n}", "public ChartFRTInfoRecord(RecordInputStream in) {\r\n    rt = in.readShort();\r\n    grbitFrt = in.readShort();\r\n    verOriginator = in.readByte();\r\n    verWriter = in.readByte();\r\n    int cCFRTID = in.readShort();\r\n    rgCFRTID = new CFRTID[cCFRTID];\r\n    for(int i = 0; i < cCFRTID; i++) {\r\n        rgCFRTID[i] = new CFRTID(in);\r\n    }\r\n}", "public Merger newMerger(Repository db) {\r\n    return new OneSide(db, treeIndex);\r\n}", "public CreateDataSourceFromRedshiftResult createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDataSourceFromRedshift(request);\r\n}", "public void clearDFA() {\r\n    for(int d = 0; d < decisionToDFA.length; d++) {\r\n        decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);\r\n    }\r\n}", "public void removeName(String name) {\r\n    int index = getNameIndex(name);\r\n    removeName(index);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[RightMargin]\\n\");\r\n    buffer.append(\"    .margin               = \").append(\" (\").append(getMargin()).append(\" )\\n\");\r\n    buffer.append(\"[/RightMargin]\\n\");\r\n    return buffer.toString();\r\n}", "public RefreshAllRecord clone() {\r\n    return copy();\r\n}", "public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {\r\n    super(queryConfig);\r\n    add(new WildcardQueryNodeProcessor());\r\n    add(new MultiFieldQueryNodeProcessor());\r\n    add(new FuzzyQueryNodeProcessor());\r\n    add(new RegexpQueryNodeProcessor());\r\n    add(new MatchAllDocsQueryNodeProcessor());\r\n    add(new OpenRangeQueryNodeProcessor());\r\n    add(new PointQueryNodeProcessor());\r\n    add(new PointRangeQueryNodeProcessor());\r\n    add(new TermRangeQueryNodeProcessor());\r\n    add(new AllowLeadingWildcardProcessor());\r\n    add(new AnalyzerQueryNodeProcessor());\r\n    add(new PhraseSlopQueryNodeProcessor());\r\n    add(new BooleanQuery2ModifierNodeProcessor());\r\n    add(new NoChildOptimizationQueryNodeProcessor());\r\n    add(new RemoveDeletedQueryNodesProcessor());\r\n    add(new RemoveEmptyNonLeafQueryNodeProcessor());\r\n    add(new BooleanSingleChildOptimizationQueryNodeProcessor());\r\n    add(new DefaultPhraseSlopQueryNodeProcessor());\r\n    add(new BoostQueryNodeProcessor());\r\n    add(new MultiTermRewriteMethodProcessor());\r\n}", "public String formatAsString(String sheetName, boolean useAbsoluteAddress) {\r\n    StringBuilder sb = new StringBuilder();\r\n    if(sheetName != null) {\r\n        sb.append(SheetNameFormatter.format(sheetName));\r\n        sb.append(\"!\");\r\n    }\r\n    CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(),useAbsoluteAddress, useAbsoluteAddress);\r\n    CellReference cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsoluteAddress, useAbsoluteAddress);\r\n    sb.append(cellRefFrom.formatAsString());\r\n    if(!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()) {\r\n        sb.append(':');\r\n        sb.append(cellRefTo.formatAsString());\r\n    }\r\n    return sb.toString();\r\n}", "public ByteBuffer put(int index, byte value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public void mode(int m) {\r\n    _mode = m;\r\n}", "public ShortBuffer slice() {\r\n    return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);\r\n}", "public void set(int index, long n) {\r\n    if(count < index)throw new ArrayIndexOutOfBoundsException(index);\r\n    else if(count == index)add(n);\r\n    elseentries[index] = n;\r\n}", "public ByteBuffer putFloat(float value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public static double max(double[] values) {\r\n    double max = Double.NEGATIVE_INFINITY;\r\n    for(double value : values) {\r\n        max = Math.max(max, value);\r\n    }\r\n    return max;\r\n}", "public UpdateRepoWebhookRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\");\r\n    setMethod(MethodType.POST);\r\n}", "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {\r\n    setDomainName(domainName);\r\n    setItemName(itemName);\r\n    setAttributes(attributes);\r\n    setExpected(expected);\r\n}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"[SXPI]\\n\");\r\n    for(int i = 0; i < _fieldInfos.length; i++) {\r\n        sb.append(\"    item[\").append(i).append(\"]=\");\r\n        _fieldInfos[i].appendDebugInfo(sb);\r\n        sb.append('\\n');\r\n    }\r\n    sb.append(\"[/SXPI]\\n\");\r\n    return sb.toString();\r\n}", "public boolean isSuccessful() {\r\n    if(mergeResult != null)return mergeResult.getMergeStatus().isSuccessful();\r\n    else if(rebaseResult != null)return rebaseResult.getStatus().isSuccessful();\r\n    return true;\r\n}", "public void setBytesValue(byte[] value) {\r\n    setBytesValue(new BytesRef(value));\r\n}", "public DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeConnections(request);\r\n}", "public DeletePhotosRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"DeletePhotos\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public void add(E object) {\r\n    iterator.add(object);\r\n    subList.sizeChanged(true);\r\n    end++;\r\n}", "public static ByteBuffer allocate(int capacity) {\r\n    if(capacity < 0) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return new ReadWriteHeapByteBuffer(capacity);\r\n}", "public SrndQuery getSubQuery(int qn) {\r\n    return queries.get(qn);\r\n}", "public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {\r\n    if(numPayloadsSeen == 0) {\r\n        return currentPayloadScore;\r\n    } else {\r\n        return Math.min(currentPayloadScore, currentScore);\r\n    }\r\n}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"[BLANK]\\n\");\r\n    sb.append(\"    row= \").append(HexDump.shortToHex(getRow())).append(\"\\n\");\r\n    sb.append(\"    col= \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");\r\n    sb.append(\"    xf = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");\r\n    sb.append(\"[/BLANK]\\n\");\r\n    return sb.toString();\r\n}", "public DescribeLogPatternResult describeLogPattern(DescribeLogPatternRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeLogPattern(request);\r\n}", "public RegisterTransitGatewayMulticastGroupMembersResult registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterTransitGatewayMulticastGroupMembers(request);\r\n}", "public GetPhoneNumberSettingsResult getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetPhoneNumberSettings(request);\r\n}", "public ObjectId getData() {\r\n    return data;\r\n}", "public boolean isDirect() {\r\n    return false;\r\n}", "public DeleteServerCertificateRequest(String serverCertificateName) {\r\n    setServerCertificateName(serverCertificateName);\r\n}", "public StringBuffer append(double d) {\r\n    RealToString.getInstance().appendDouble(this, d);\r\n    return this;\r\n}", "public GetEvaluationResult getEvaluation(GetEvaluationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetEvaluation(request);\r\n}", "public LinkedDataRecord getDataName() {\r\n    return dataName;\r\n}", "public boolean find(int start) {\r\n    findPos = start;\r\n    if(findPos < regionStart) {\r\n        findPos = regionStart;\r\n    } else if(findPos >= regionEnd) {\r\n        matchFound = false;\r\n        return false;\r\n    }\r\n    matchFound = findImpl(address, input, findPos, matchOffsets);\r\n    if(matchFound) {\r\n        findPos = matchOffsets[1];\r\n    }\r\n    return matchFound;\r\n}", "public GetLifecyclePolicyPreviewResult getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetLifecyclePolicyPreview(request);\r\n}", "public SinglePositionTokenStream(String word) {\r\n    termAtt = addAttribute(CharTermAttribute.class);\r\n    posIncrAtt = addAttribute(PositionIncrementAttribute.class);\r\n    this.word = word;\r\n    returned = true;\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_print_gridlines);\r\n}", "public String toString() {\r\n    final StringBuilder s = new StringBuilder();\r\n    s.append(Constants.typeString(getType()));\r\n    s.append(' ');\r\n    s.append(name());\r\n    s.append(' ');\r\n    s.append(commitTime);\r\n    s.append(' ');\r\n    appendCoreFlags(s);\r\n    return s.toString();\r\n}", "public LsRemoteCommand setRemote(String remote) {\r\n    checkCallable();\r\n    this.remote = remote;\r\n    return this;\r\n}", "public void collapseRow(int rowNumber) {\r\n    int startRow = findStartOfRowOutlineGroup(rowNumber);\r\n    RowRecord rowRecord = getRow(startRow);\r\n    int nextRowIx = writeHidden(rowRecord, startRow);\r\n    RowRecord row = getRow(nextRowIx);\r\n    if(row == null) {\r\n        row = createRow(nextRowIx);\r\n        insertRow(row);\r\n    }\r\n    row.setColapsed(true);\r\n}", "public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateSkillGroupWithRoom(request);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[SERIESLIST]\\n\");\r\n    buffer.append(\"    .seriesNumbers= \").append(\" (\").append(Arrays.toString(getSeriesNumbers())).append(\" )\");\r\n    buffer.append(\"\\n\");\r\n    buffer.append(\"[/SERIESLIST]\\n\");\r\n    return buffer.toString();\r\n}", "public QueryConfigHandler getQueryConfigHandler() {\r\n    return this.queryConfig;\r\n}", "public String getClassArg() {\r\n    if(null != originalArgs) {\r\n        String className = originalArgs.get(CLASS_NAME);\r\n        if(null != className) {\r\n            return className;\r\n        }\r\n    }\r\n    return getClass().getName();\r\n}"], "cs": ["public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_vcenter);\r\n}", "public virtual void AddAll(NGit.Util.BlockList<T> src) {\r\n    if(src.size == 0) {\r\n        return;\r\n    }\r\n    int srcDirIdx = 0;\r\n    for(; srcDirIdx < src.tailDirIdx; srcDirIdx++) {\r\n        AddAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);\r\n    }\r\n    if(src.tailBlkIdx != 0) {\r\n        AddAll(src.tailBlock, 0, src.tailBlkIdx);\r\n    }\r\n}", "public override void WriteByte(byte b) {\r\n    if(outerInstance.upto == outerInstance.blockSize) {\r\n        if(outerInstance.currentBlock != null) {\r\n            outerInstance.blocks.Add(outerInstance.currentBlock);\r\n            outerInstance.blockEnd.Add(outerInstance.upto);\r\n        }\r\n        outerInstance.currentBlock = new byte[outerInstance.blockSize];\r\n        outerInstance.upto = 0;\r\n    }\r\n    outerInstance.currentBlock[outerInstance.upto++] = (byte)b;\r\n}", "public virtual ObjectId GetObjectId() {\r\n    return objectId;\r\n}", "public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDomainEntryResponse>(request, options);\r\n}", "public virtual long RamBytesUsed() {\r\n    return fst == null ? 0 : fst.GetSizeInBytes();\r\n}", "public string GetFullMessage() {\r\n    byte[] raw = buffer;\r\n    int msgB = RawParseUtils.TagMessage(raw, 0);\r\n    if(msgB < 0) {\r\n        return string.Empty;\r\n    }\r\n    Encoding enc = RawParseUtils.ParseEncoding(raw);\r\n    return RawParseUtils.Decode(enc, raw, msgB, raw.Length);\r\n}", "public POIFSFileSystem() {\r\n    HeaderBlock headerBlock = new HeaderBlock(bigBlockSize);\r\n    _property_table = new PropertyTable(headerBlock);\r\n    _documents      = new ArrayList();\r\n    _root           = null;\r\n}", "public void Init(int address) {\r\n    slice = pool.Buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];\r\n    Debug.Assert(slice != null);\r\n    upto = address & ByteBlockPool.BYTE_BLOCK_MASK;\r\n    offset0 = address;\r\n    Debug.Assert(upto < slice.Length);\r\n}", "public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) {\r\n    this.path = path;\r\n    return this;\r\n}", "public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance;\r\n    return Invoke<ListIngestionsResponse>(request, options);\r\n}", "public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) {\r\n    SwitchTo(lexState);\r\n}", "public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance;\r\n    return Invoke<GetShardIteratorResponse>(request, options);\r\n}", "public ModifyStrategyRequest(): base(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public override bool ready() {\r\n    lock(@lock) {\r\n        if(@in == null) {\r\n            throw new System.IO.IOException(\"InputStreamReader is closed\");\r\n        }\r\n        try {\r\n            return bytes.hasRemaining() || @in.available() > 0;\r\n        } catch(System.IO.IOException) {\r\n            return false;\r\n        }\r\n    }\r\n}", "protected internal EscherOptRecord GetOptRecord() {\r\n    return _optRecord;\r\n}", "public override int read(byte[] buffer, int offset, int length) {\r\n    lock(this) {\r\n        if(buffer == null) {\r\n            throw new System.ArgumentNullException(\"buffer == null\");\r\n        }\r\n        java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length);\r\n        if(length == 0) {\r\n            return 0;\r\n        }\r\n        int copylen = count - pos < length ? count - pos : length;\r\n        {\r\n            for(int i = 0; i < copylen; i++) {\r\n                buffer[offset + i] = unchecked((byte)this.buffer[pos + i]);\r\n            }\r\n        }\r\n        pos += copylen;\r\n        return copylen;\r\n    }\r\n}", "public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {\r\n    this.sentenceOp = sentenceOp;\r\n}", "public virtual void print(string str) {\r\n    write(str != null ? str : Sharpen.StringHelper.GetValueOf((object)null));\r\n}", "public NotImplementedFunctionException(string functionName, NotImplementedException cause): base(functionName,cause) {\r\n    this.functionName = functionName;\r\n}", "public override V next() {\r\n    return this.nextEntry().value;\r\n}", "public override sealed void ReadBytes(byte[] b, int offset, int len, bool useBuffer) {\r\n    int available = bufferLength - bufferPosition;\r\n    if(len <= available) {\r\n        if(len > 0) {\r\n            Buffer.BlockCopy(m_buffer, bufferPosition, b, offset, len);\r\n        }\r\n        bufferPosition += len;\r\n    } else {\r\n        if(available > 0) {\r\n            Buffer.BlockCopy(m_buffer, bufferPosition, b, offset, available);\r\n            offset += available;\r\n            len -= available;\r\n            bufferPosition += available;\r\n        }\r\n        if(useBuffer && len < bufferSize) {\r\n            Refill();\r\n            if(bufferLength < len) {\r\n                Buffer.BlockCopy(m_buffer, 0, b, offset, bufferLength);\r\n                throw new EndOfStreamException(\"read past EOF: \" + this);\r\n            } else {\r\n                Buffer.BlockCopy(m_buffer, 0, b, offset, len);\r\n                bufferPosition = len;\r\n            }\r\n        } else {\r\n            long after = bufferStart + bufferPosition + len;\r\n            if(after > Length) {\r\n                throw new EndOfStreamException(\"read past EOF: \" + this);\r\n            }\r\n            ReadInternal(b, offset, len);\r\n            bufferStart = after;\r\n            bufferPosition = 0;\r\n            bufferLength = 0;\r\n        }\r\n    }\r\n}", "public virtual TagQueueResponse TagQueue(TagQueueRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TagQueueRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance;\r\n    return Invoke<TagQueueResponse>(request, options);\r\n}", "public override void Remove() {\r\n    throw new NotSupportedException();\r\n}", "public virtual ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyCacheSubnetGroupResponse>(request, options);\r\n}", "public override void SetParams(string @params) {\r\n    base.SetParams(@params);\r\n    culture = \"\";\r\n    string ignore;\r\n    StringTokenizer st = new StringTokenizer(@params, \",\");\r\n    if(st.MoveNext())culture = st.Current;\r\n    if(st.MoveNext())culture += \"-\" + st.Current;\r\n    if(st.MoveNext())ignore = st.Current;\r\n}", "public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDocumentationVersionResponse>(request, options);\r\n}", "public override bool Equals(object obj) {\r\n    if(!(obj is FacetLabel)) {\r\n        return false;\r\n    }\r\n    FacetLabel other = (FacetLabel)obj;\r\n    if(Length != other.Length) {\r\n        return false;\r\n    }\r\n    for(int i = Length - 1; i >= 0; i--) {\r\n        if(!Components[i].Equals(other.Components[i], StringComparison.Ordinal)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance;\r\n    return Invoke<GetInstanceAccessDetailsResponse>(request, options);\r\n}", "public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) {\r\n    HSSFPolygon shape = new HSSFPolygon(this, anchor);\r\n    shape.Parent = this;\r\n    shape.Anchor = anchor;\r\n    shapes.Add(shape);\r\n    OnCreate(shape);\r\n    return shape;\r\n}", "public String GetSheetName(int sheetIndex) {\r\n    return GetBoundSheetRec(sheetIndex).Sheetname;\r\n}", "public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDashboardRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance;\r\n    return Invoke<GetDashboardResponse>(request, options);\r\n}", "public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options);\r\n}", "public void AddMultipleBlanks(MulBlankRecord mbr) {\r\n    for(int j = 0; j < mbr.NumColumns; j++) {\r\n        BlankRecord br = new BlankRecord();\r\n        br.Column = j + mbr.FirstColumn;\r\n        br.Row = mbr.Row;\r\n        br.XFIndex = (mbr.GetXFAt(j));\r\n        InsertCell(br);\r\n    }\r\n}", "public static string quote(string @string) {\r\n    java.lang.StringBuilder sb = new java.lang.StringBuilder();\r\n    sb.append(\"\\\\Q\");\r\n    int apos = 0;\r\n    int k;\r\n    while((k = @string.IndexOf(\"\\\\E\", apos)) >= 0) {\r\n        sb.append(Sharpen.StringHelper.Substring(@string, apos, k + 2)).append(\"\\\\\\\\E\\\\Q\");\r\n        apos = k + 2;\r\n    }\r\n    return sb.append(Sharpen.StringHelper.Substring(@string, apos)).append(\"\\\\E\").ToString();\r\n}", "public override java.nio.ByteBuffer putInt(int value) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public ArrayPtg(Object[][] values2d) {\r\n    int nColumns = values2d[0].Length;\r\n    int nRows = values2d.Length;\r\n    _nColumns = (short)nColumns;\r\n    _nRows = (short)nRows;\r\n    Object[] vv = new Object[_nColumns * _nRows];\r\n    for(int r = 0; r < nRows; r++) {\r\n        Object[] rowData = values2d[r];\r\n        for(int c = 0; c < nColumns; c++) {\r\n            vv[GetValueIndex(c, r)] = rowData[c];\r\n        }\r\n    }\r\n    _arrayValues = vv;\r\n    _reserved0Int = 0;\r\n    _reserved1Short = 0;\r\n    _reserved2Byte = 0;\r\n}", "public virtual GetIceServerConfigResponse GetIceServerConfig(GetIceServerConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetIceServerConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetIceServerConfigResponseUnmarshaller.Instance;\r\n    return Invoke<GetIceServerConfigResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    sb.Append(GetType().Name).Append(\" [\");\r\n    sb.Append(GetValueAsString());\r\n    sb.Append(\"]\");\r\n    return sb.ToString();\r\n}", "public override string ToString(string field) {\r\n    return \"ToChildBlockJoinQuery (\" + _parentQuery + \")\";\r\n}", "public void IncRef() {\r\n    refCount.IncrementAndGet();\r\n}", "public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options);\r\n}", "public int GetNextXBATChainOffset() {\r\n    return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;\r\n}", "public void multiplyByPowerOfTen(int pow10) {\r\n    TenPower tp = TenPower.GetInstance(Math.Abs(pow10));\r\n    if(pow10 < 0) {\r\n        mulShift(tp._divisor, tp._divisorShift);\r\n    } else {\r\n        mulShift(tp._multiplicand, tp._multiplierShift);\r\n    }\r\n}", "public override string ToString() {\r\n    StringBuilder builder = new StringBuilder();\r\n    int length = this.Length;\r\n    builder.Append(Path.DirectorySeparatorChar);\r\n    for(int i = 0; i < length; i++) {\r\n        builder.Append(this.GetComponent(i));\r\n        if(i < (length - 1)) {\r\n            builder.Append(Path.DirectorySeparatorChar);\r\n        }\r\n    }\r\n    return builder.ToString();\r\n}", "public void withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {\r\n    this.fetcher = fetcher;\r\n    this.fetcher.SetRoleName(roleName);\r\n}", "public virtual void SetProgressMonitor(ProgressMonitor pm) {\r\n    progressMonitor = pm;\r\n}", "public override void Reset() {\r\n    if(!First) {\r\n        ptr = 0;\r\n        if(!Eof) {\r\n            ParseEntry();\r\n        }\r\n    }\r\n}", "public E previous() {\r\n    if(iterator.previousIndex() >= start) {\r\n        return iterator.previous();\r\n    }\r\n    throw new java.util.NoSuchElementException();\r\n}", "public virtual string GetNewPrefix() {\r\n    return this.newPrefix;\r\n}", "public virtual int indexOfValue(int value) {\r\n    {\r\n        for(int i = 0; i < mSize; i++) {\r\n            if(mValues[i] == value) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}", "public IList<CharsRef> UniqueStems(char[] word, int length) {\r\n    IList<CharsRef> stems = Stem(word, length);\r\n    if(stems.Count < 2) {\r\n        return stems;\r\n    }\r\n    CharArraySet terms = new CharArraySet(#pragma warning disable 612, 618LuceneVersion.LUCENE_CURRENT, 8, dictionary.ignoreCase);\r\n#pragma warning restore 612, 618IList<CharsRef> deduped = new List<CharsRef>(); \r\n    foreach(CharsRef s in stems) {\r\n        if(!terms.Contains(s)) {\r\n            deduped.Add(s);\r\n            terms.Add(s);\r\n        }\r\n    }\r\n    return deduped;\r\n}", "public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance;\r\n    return Invoke<GetGatewayResponsesResponse>(request, options);\r\n}", "public void SetPosition(long position) {\r\n    currentBlockIndex = (int)(position >> outerInstance.blockBits);\r\n    currentBlock = outerInstance.blocks[currentBlockIndex];\r\n    currentBlockUpto = (int)(position & outerInstance.blockMask);\r\n}", "public override long Skip(long n) {\r\n    int s = (int)Math.Min(Available(), Math.Max(0, n));\r\n    ptr += s;\r\n    return s;\r\n}", "public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {\r\n    _bootstrapActionConfig = bootstrapActionConfig;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_row);\r\n    out1.WriteShort(field_2_col);\r\n    out1.WriteShort(field_3_flags);\r\n    out1.WriteShort(field_4_shapeid);\r\n    out1.WriteShort(field_6_author.Length);\r\n    out1.WriteByte(field_5_hasMultibyte ? 0x01 : 0x00);\r\n    if(field_5_hasMultibyte) {\r\n        StringUtil.PutUnicodeLE(field_6_author, out1);\r\n    } else {\r\n        StringUtil.PutCompressedUnicode(field_6_author, out1);\r\n    }\r\n    if(field_7_padding != null) {\r\n        out1.WriteByte(Convert.ToInt32(field_7_padding, CultureInfo.InvariantCulture));\r\n    }\r\n}", "public virtual int lastIndexOf(string @string) {\r\n    return lastIndexOf(@string, count);\r\n}", "public override bool add(E @object) {\r\n    return addLastImpl(@object);\r\n}", "public virtual void UnsetSection(string section, string subsection) {\r\n    ConfigSnapshot src;\r\n    ConfigSnapshot res;\r\n    do {\r\n        src = state.Get();\r\n        res = UnsetSection(src, section, subsection);\r\n    } while(!state.CompareAndSet(src, res));\r\n}", "public string GetTagName() {\r\n    return tagName;\r\n}", "public void AddSubRecord(int index, SubRecord element) {\r\n    subrecords.Insert(index, element);\r\n}", "public virtual bool remove(object @object) {\r\n    lock(mutex) {\r\n        return c.remove(@object);\r\n    }\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new DoubleMetaphoneFilter(input, maxCodeLength, inject);\r\n}", "public virtual long Length() {\r\n    return InCoreLength();\r\n}", "public virtual void SetValue(bool newValue) {\r\n    value = newValue;\r\n}", "public Pair(ContentSource oldSource, ContentSource newSource) {\r\n    this.oldSource = oldSource;\r\n    this.newSource = newSource;\r\n}", "public virtual int Get(int i) {\r\n    if(count <= i) {\r\n        throw Sharpen.Extensions.CreateIndexOutOfRangeException(i);\r\n    }\r\n    return entries[i];\r\n}", "public CreateRepoRequest(): base(\"cr\", \"2016-06-07\", \"CreateRepo\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos\";\r\n    Method = MethodType.PUT;\r\n}", "public virtual bool IsDeltaBaseAsOffset() {\r\n    return deltaBaseAsOffset;\r\n}", "public void remove() {\r\n    if(expectedModCount == list.modCount) {\r\n        if(lastLink != null) {\r\n            java.util.LinkedList.Link<ET> next_1 = lastLink.next;\r\n            java.util.LinkedList.Link<ET> previous_1 = lastLink.previous;\r\n            next_1.previous = previous_1;\r\n            previous_1.next = next_1;\r\n            if(lastLink == link) {\r\n                pos--;\r\n            }\r\n            link = previous_1;\r\n            lastLink = null;\r\n            expectedModCount++;\r\n            list._size--;\r\n            list.modCount++;\r\n        } else {\r\n            throw new System.InvalidOperationException();\r\n        }\r\n    } else {\r\n        throw new java.util.ConcurrentModificationException();\r\n    }\r\n}", "public virtual MergeShardsResponse MergeShards(MergeShardsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = MergeShardsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance;\r\n    return Invoke<MergeShardsResponse>(request, options);\r\n}", "public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance;\r\n    return Invoke<AllocateHostedConnectionResponse>(request, options);\r\n}", "public int getBeginIndex() {\r\n    return start;\r\n}", "public static WeightedTerm[] GetTerms(Query query) {\r\n    return GetTerms(query, false);\r\n}", "public override java.nio.ByteBuffer compact() {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        int byte0 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (int)((uint)byte0 >> 2);\r\n        int byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)((uint)byte1 >> 4));\r\n        int byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 15) << 2) | ((int)((uint)byte2 >> 6));\r\n        values[valuesOffset++] = byte2 & 63;\r\n    }\r\n}", "public virtual string GetHumanishName() {\r\n    if(string.Empty.Equals(GetPath()) || GetPath() == null) {\r\n        throw new ArgumentException();\r\n    }\r\n    string s = GetPath();\r\n    string[] elements;\r\n    if(\"file\".Equals(scheme) || LOCAL_FILE.Matcher(s).Matches()) {\r\n        elements = s.Split(\"[\\\\\" + FilePath.separatorChar + \"/]\");\r\n    } else {\r\n        elements = s.Split(\"/\");\r\n    }\r\n    if(elements.Length == 0) {\r\n        throw new ArgumentException();\r\n    }\r\n    string result = elements[elements.Length - 1];\r\n    if(Constants.DOT_GIT.Equals(result)) {\r\n        result = elements[elements.Length - 2];\r\n    } else {\r\n        if(result.EndsWith(Constants.DOT_GIT_EXT)) {\r\n            result = Sharpen.Runtime.Substring(result, 0, result.Length - Constants.DOT_GIT_EXT.Length);\r\n        }\r\n    }\r\n    return result;\r\n}", "public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options);\r\n}", "public string GetAccessKeySecret() {\r\n    return AccessSecret;\r\n}", "public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateVpnConnectionResponse>(request, options);\r\n}", "public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeVoicesResponse>(request, options);\r\n}", "public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance;\r\n    return Invoke<ListMonitoringExecutionsResponse>(request, options);\r\n}", "public DescribeJobRequest(string vaultName, string jobId) {\r\n    _vaultName = vaultName;\r\n    _jobId = jobId;\r\n}", "public EscherRecord GetEscherRecord(int index) {\r\n    return escherRecords[index];\r\n}", "public virtual GetApisResponse GetApis(GetApisRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetApisRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance;\r\n    return Invoke<GetApisResponse>(request, options);\r\n}", "public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteSmsChannelResponse>(request, options);\r\n}", "public virtual TrackingRefUpdate GetTrackingRefUpdate() {\r\n    return trackingRefUpdate;\r\n}", "public virtual void print(bool b) {\r\n    print(b.ToString());\r\n}", "public virtual IQueryNode GetChild() {\r\n    return GetChildren()[0];\r\n}", "public NotIgnoredFilter(int workdirTreeIndex) {\r\n    this.index = workdirTreeIndex;\r\n}", "public AreaRecord(RecordInputStream in1) {\r\n    field_1_formatFlags = in1.ReadShort();\r\n}", "public GetThumbnailRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetThumbnail\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options);\r\n}", "public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options);\r\n}", "public override OrdRange GetOrdRange(string dim) {\r\n    OrdRange result;\r\n    prefixToOrdRange.TryGetValue(dim, out result);\r\n    return result;\r\n}", "public override string ToString() {\r\n    string symbol = string.Empty;\r\n    if(startIndex >= 0 && startIndex < ((ICharStream)InputStream).Size) {\r\n        symbol = ((ICharStream)InputStream).GetText(Interval.Of(startIndex, startIndex));\r\n        symbol = Utils.EscapeWhitespace(symbol, false);\r\n    }\r\n    return string.Format(CultureInfo.CurrentCulture, \"{0}('{1}')\", typeof(Antlr4.Runtime.LexerNoViableAltException).Name, symbol);\r\n}", "public virtual E peek() {\r\n    return peekFirstImpl();\r\n}", "public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance;\r\n    return Invoke<CreateWorkspacesResponse>(request, options);\r\n}", "public override Object Clone() {\r\n    NumberFormatIndexRecord rec = new NumberFormatIndexRecord();\r\n    rec.field_1_formatIndex = field_1_formatIndex;\r\n    return rec;\r\n}", "public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeRepositoriesResponse>(request, options);\r\n}", "public SparseIntArray(int initialCapacity) {\r\n    initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);\r\n    mKeys = new int[initialCapacity];\r\n    mValues = new int[initialCapacity];\r\n    mSize = 0;\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new HyphenatedWordsFilter(input);\r\n}", "public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDistributionWithTagsResponse>(request, options);\r\n}", "public RandomAccessFile(string fileName, string mode) : this(new java.io.File(fileName), mode) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteWorkspaceImageResponse>(request, options);\r\n}", "public static string ToHex(int value) {\r\n    return ToHex((long)value, 8);\r\n}", "public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateDistributionResponse>(request, options);\r\n}", "public HSSFColor GetColor(short index) {\r\n    if(index == HSSFColor.Automatic.Index)return HSSFColor.Automatic.GetInstance();\r\n    else {\r\n        byte[] b = palette.GetColor(index);\r\n        if(b != null) {\r\n            return new CustomColor(index, b);\r\n        }\r\n    }\r\n    return null;\r\n}", "public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) {\r\n    throw new NotImplementedFunctionException(_functionName);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort((short)field_1_number_crn_records);\r\n    out1.WriteShort((short)field_2_sheet_table_index);\r\n}", "public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() {\r\n    return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest());\r\n}", "public FormatRun(short character, short fontIndex) {\r\n    this._character = character;\r\n    this._fontIndex = fontIndex;\r\n}", "public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {\r\n    byte[] result = new byte[length * 2];\r\n    int end = offset + length;\r\n    int resultIndex = 0;\r\n    {\r\n        for(int i = offset; i < end; ++i) {\r\n            char ch = chars[i];\r\n            result[resultIndex++] = unchecked((byte)(ch >> 8));\r\n            result[resultIndex++] = unchecked((byte)ch);\r\n        }\r\n    }\r\n    return result;\r\n}", "public virtual UploadArchiveResponse UploadArchive(UploadArchiveRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance;\r\n    return Invoke<UploadArchiveResponse>(request, options);\r\n}", "public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex) {\r\n    return GetHiddenTokensToLeft(tokenIndex, -1);\r\n}", "public override bool Equals(object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(!base.Equals(obj)) {\r\n        return false;\r\n    }\r\n    if(this.GetType() != obj.GetType()) {\r\n        return false;\r\n    }\r\n    AutomatonQuery other = (AutomatonQuery)obj;\r\n    if(!m_compiled.Equals(other.m_compiled)) {\r\n        return false;\r\n    }\r\n    if(m_term == null) {\r\n        if(other.m_term != null) {\r\n            return false;\r\n        }\r\n    } else if(!m_term.Equals(other.m_term)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public virtual SpanQuery MakeSpanClause() {\r\n    List<SpanQuery> spanQueries = new List<SpanQuery>();\r\n    foreach(var wsq in weightBySpanQuery) {\r\n        wsq.Key.Boost = wsq.Value;\r\n        spanQueries.Add(wsq.Key);\r\n    }\r\n    if(spanQueries.Count == 1)return spanQueries[0];\r\n    elsereturn new SpanOrQuery(spanQueries.ToArray());\r\n}", "public virtual StashCreateCommand StashCreate() {\r\n    return new StashCreateCommand(repo);\r\n}", "public FieldInfo FieldInfo(string fieldName) {\r\n    FieldInfo ret;\r\n    byName.TryGetValue(fieldName, out ret);\r\n    return ret;\r\n}", "public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeEventSourceResponse>(request, options);\r\n}", "public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance;\r\n    return Invoke<GetDocumentAnalysisResponse>(request, options);\r\n}", "public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance;\r\n    return Invoke<CancelUpdateStackResponse>(request, options);\r\n}", "public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyLoadBalancerAttributesResponse>(request, options);\r\n}", "public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance;\r\n    return Invoke<SetInstanceProtectionResponse>(request, options);\r\n}", "public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyDBProxyResponse>(request, options);\r\n}", "public virtual void Add(char[] output, int offset, int len, int endOffset, int posLength) {\r\n    if(count == outputs.Length) {\r\n        CharsRef[] next = new CharsRef[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\r\n        Array.Copy(outputs, 0, next, 0, count);\r\n        outputs = next;\r\n    }\r\n    if(count == endOffsets.Length) {\r\n        int[] next = new int[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];\r\n        Array.Copy(endOffsets, 0, next, 0, count);\r\n        endOffsets = next;\r\n    }\r\n    if(count == posLengths.Length) {\r\n        int[] next = new int[ArrayUtil.Oversize(1 + count, RamUsageEstimator.NUM_BYTES_INT32)];\r\n        Array.Copy(posLengths, 0, next, 0, count);\r\n        posLengths = next;\r\n    }\r\n    if(outputs[count] == null) {\r\n        outputs[count] = new CharsRef();\r\n    }\r\n    outputs[count].CopyChars(output, offset, len);\r\n    endOffsets[count] = endOffset;\r\n    posLengths[count] = posLength;\r\n    count++;\r\n}", "public FetchLibrariesRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"FetchLibraries\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public override bool Exists() {\r\n    return objects.Exists();\r\n}", "public FilterOutputStream(java.io.OutputStream @out) {\r\n    this.@out = @out;\r\n}", "public ScaleClusterRequest(): base(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"cs\", \"openAPI\") {\r\n    UriPattern = \"/clusters/[ClusterId]\";\r\n    Method = MethodType.PUT;\r\n}", "public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) {\r\n    return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2);\r\n}", "public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance;\r\n    return Invoke<ListObjectParentPathsResponse>(request, options);\r\n}", "public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCacheSubnetGroupsResponse>(request, options);\r\n}", "public void SetSharedFormula(bool flag) {\r\n    field_5_options =sharedFormula.SetShortBoolean(field_5_options, flag);\r\n}", "public virtual bool IsReuseObjects() {\r\n    return reuseObjects;\r\n}", "public virtual IErrorNode AddErrorNode(IToken badToken) {\r\n    ErrorNodeImpl t = new ErrorNodeImpl(badToken);\r\n    AddChild(t);\r\n    t.Parent = this;\r\n    return t;\r\n}", "public LatvianStemFilterFactory(IDictionary<string, string> args): base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance;\r\n    return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options);\r\n}", "public static TokenFilterFactory ForName(string name, IDictionary<string, string> args) {\r\n    return loader.NewInstance(name, args);\r\n}", "public AddAlbumPhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"AddAlbumPhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance;\r\n    return Invoke<GetThreatIntelSetResponse>(request, options);\r\n}", "public override TreeFilter Clone() {\r\n    return new AndTreeFilter.Binary(a.Clone(), b.Clone());\r\n}", "public override bool Equals(object o) {\r\n    return o is ArmenianStemmer;\r\n}", "public sealed override bool hasArray() {\r\n    return protectedHasArray();\r\n}", "public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateContributorInsightsResponse>(request, options);\r\n}", "public void UnwriteProtectWorkbook() {\r\n    records.Remove(fileShare);\r\n    records.Remove(WriteProtect);\r\n    fileShare = null;\r\n    writeProtect = null;\r\n}", "public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer): base(dedup, analyzer) {\r\n    this.expand = expand;\r\n}", "public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance;\r\n    return Invoke<RequestSpotInstancesResponse>(request, options);\r\n}", "public byte[] GetObjectData() {\r\n    return FindObjectRecord().ObjectData;\r\n}", "public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance;\r\n    return Invoke<GetContactAttributesResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return GetKey() + \": \" + GetValue();\r\n}", "public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance;\r\n    return Invoke<ListTextTranslationJobsResponse>(request, options);\r\n}", "public virtual GetContactMethodsResponse GetContactMethods(GetContactMethodsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetContactMethodsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetContactMethodsResponseUnmarshaller.Instance;\r\n    return Invoke<GetContactMethodsResponse>(request, options);\r\n}", "public static short LookupIndexByName(String name) {\r\n    FunctionMetadata fd = GetInstance().GetFunctionByNameInternal(name);\r\n    if(fd == null) {\r\n        return -1;\r\n    }\r\n    return (short)fd.Index;\r\n}", "public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeAnomalyDetectorsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeAnomalyDetectorsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeAnomalyDetectorsResponse>(request, options);\r\n}", "public static string InsertId(string message, ObjectId changeId) {\r\n    return InsertId(message, changeId, false);\r\n}", "public override long GetObjectSize(AnyObjectId objectId, int typeHint) {\r\n    long sz = db.GetObjectSize(this, objectId);\r\n    if(sz < 0) {\r\n        if(typeHint == OBJ_ANY) {\r\n            throw new MissingObjectException(objectId.Copy(), \"unknown\");\r\n        }\r\n        throw new MissingObjectException(objectId.Copy(), typeHint);\r\n    }\r\n    return sz;\r\n}", "public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance;\r\n    return Invoke<ImportInstallationMediaResponse>(request, options);\r\n}", "public virtual PutLifecycleEventHookExecutionStatusResponse PutLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PutLifecycleEventHookExecutionStatusRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatusResponseUnmarshaller.Instance;\r\n    return Invoke<PutLifecycleEventHookExecutionStatusResponse>(request, options);\r\n}", "public NumberPtg(ILittleEndianInput in1) {\r\n    field_1_value = in1.ReadDouble();\r\n}", "public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance;\r\n    return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options);\r\n}", "public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDetectorResponse>(request, options);\r\n}", "public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance;\r\n    return Invoke<ReportInstanceStatusResponse>(request, options);\r\n}", "public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteAlarmResponse>(request, options);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new PortugueseStemFilter(input);\r\n}", "public FtCblsSubRecord() {\r\n    reserved = new byte[ENCODED_SIZE];\r\n}", "public virtual bool remove(object @object) {\r\n    lock(mutex) {\r\n        return c.remove(@object);\r\n    }\r\n}", "public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance;\r\n    return Invoke<GetDedicatedIpResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return precedence + \" >= _p\";\r\n}", "public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance;\r\n    return Invoke<ListStreamProcessorsResponse>(request, options);\r\n}", "public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) {\r\n    _loadBalancerName = loadBalancerName;\r\n    _policyName = policyName;\r\n}", "public WindowProtectRecord(int options) {\r\n    _options = options;\r\n}", "public UnbufferedCharStream(int bufferSize) {\r\n    n = 0;\r\n    data = new int[bufferSize];\r\n}", "public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetOperationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance;\r\n    return Invoke<GetOperationsResponse>(request, options);\r\n}", "public virtual void CopyRawTo(byte[] b, int o) {\r\n    NB.EncodeInt32(b, o, w1);\r\n    NB.EncodeInt32(b, o + 4, w2);\r\n    NB.EncodeInt32(b, o + 8, w3);\r\n    NB.EncodeInt32(b, o + 12, w4);\r\n    NB.EncodeInt32(b, o + 16, w5);\r\n}", "public WindowOneRecord(RecordInputStream in1) {\r\n    field_1_h_hold = in1.ReadShort();\r\n    field_2_v_hold = in1.ReadShort();\r\n    field_3_width = in1.ReadShort();\r\n    field_4_height = in1.ReadShort();\r\n    field_5_options = in1.ReadShort();\r\n    field_6_active_sheet = in1.ReadShort();\r\n    field_7_first_visible_tab = in1.ReadShort();\r\n    field_8_num_selected_tabs = in1.ReadShort();\r\n    field_9_tab_width_ratio = in1.ReadShort();\r\n}", "public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance;\r\n    return Invoke<StopWorkspacesResponse>(request, options);\r\n}", "public void close() throws IOException{if(isOpen) {\r\n        isOpen = false;\r\n        try {\r\n            dump();\r\n        }\r\n        finally{try {\r\n            channel.truncate(fileLength);\r\n        } finally{try {\r\n            channel.close();\r\n        } finally{fos.close();}}}\r\n    }}", "public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options);\r\n}", "public string GetPronunciation(int wordId, char[] surface, int off, int len) {\r\n    return null;\r\n}", "public virtual string GetPath() {\r\n    return pathStr;\r\n}", "public static double devsq(double[] v) {\r\n    double r = double.NaN;\r\n    if(v != null && v.Length >= 1) {\r\n        double m = 0;\r\n        double s = 0;\r\n        int n = v.Length;\r\n        for(int i = 0; i < n; i++) {\r\n            s += v[i];\r\n        }\r\n        m = s / n;\r\n        s = 0;\r\n        for(int i = 0; i < n; i++) {\r\n            s += (v[i] - m) * (v[i] - m);\r\n        }\r\n        r = (n == 1)? 0: s;\r\n    }\r\n    return r;\r\n}", "public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeResizeResponse>(request, options);\r\n}", "public bool hasPassedThroughNonGreedyDecision() {\r\n    return passedThroughNonGreedyDecision;\r\n}", "public int end() {\r\n    return end(0);\r\n}", "public void Traverse(ICellHandler handler) {\r\n    int firstRow = range.FirstRow;\r\n    int lastRow = range.LastRow;\r\n    int firstColumn = range.FirstColumn;\r\n    int lastColumn = range.LastColumn;\r\n    int width = lastColumn - firstColumn + 1;\r\n    SimpleCellWalkContext ctx = new SimpleCellWalkContext();\r\n    IRow currentRow = null;\r\n    ICell currentCell = null;\r\n    for(ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {\r\n        currentRow = sheet.GetRow(ctx.rowNumber);\r\n        if(currentRow == null) {\r\n            continue;\r\n        }\r\n        for(ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {\r\n            currentCell = currentRow.GetCell(ctx.colNumber);\r\n            if(currentCell == null) {\r\n                continue;\r\n            }\r\n            if(IsEmpty(currentCell) && !traverseEmptyCells) {\r\n                continue;\r\n            }\r\n            ctx.ordinalNumber =(ctx.rowNumber - firstRow) * width +(ctx.colNumber - firstColumn + 1);\r\n            handler.OnCell(currentCell, ctx);\r\n        }\r\n    }\r\n}", "public int GetReadIndex() {\r\n    return _ReadIndex;\r\n}", "public virtual int CompareTo(ScoreTerm other) {\r\n    if(Term.BytesEquals(other.Term)) {\r\n        return 0;\r\n    }\r\n    if(this.Boost == other.Boost) {\r\n        return other.Term.CompareTo(this.Term);\r\n    } else {\r\n        return this.Boost.CompareTo(other.Boost);\r\n    }\r\n}", "public virtual int Normalize(char[] s, int len) {\r\n    for(int i = 0; i < len; i++) {\r\n        switch(s[i]) {\r\n        case FARSI_YEH:\r\n        case YEH_BARREE:\r\n            s[i] = YEH;\r\n            break;\r\n        case KEHEH:\r\n            s[i] = KAF;\r\n            break;\r\n        case HEH_YEH:\r\n        case HEH_GOAL:\r\n            s[i] = HEH;\r\n            break;\r\n        case HAMZA_ABOVE:\r\n            len = StemmerUtil.Delete(s, i, len);\r\n            i--;\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    return len;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(_options);\r\n}", "public DiagnosticErrorListener(bool exactOnly) {\r\n    this.exactOnly = exactOnly;\r\n}", "public KeySchemaElement(string attributeName, KeyType keyType) {\r\n    _attributeName = attributeName;\r\n    _keyType = keyType;\r\n}", "public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance;\r\n    return Invoke<GetAssignmentResponse>(request, options);\r\n}", "public virtual bool HasObject(AnyObjectId id) {\r\n    return FindOffset(id) != -1;\r\n}", "public virtual GroupingSearch SetAllGroups(bool allGroups) {\r\n    this.allGroups = allGroups;\r\n    return this;\r\n}", "public virtual void SetMultiValued(string dimName, bool v) {\r\n    lock(this) {\r\n        if(!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)) {\r\n            fieldTypes[dimName] = new DimConfig { IsMultiValued = v };\r\n        } else {\r\n            fieldType.IsMultiValued = v;\r\n        }\r\n    }\r\n}", "public int GetCellsVal() {\r\n    int size = 0;\r\n    foreach(char c in cells.Keys) {\r\n        Cell e = At(c);\r\n        if(e.cmd >= 0) {\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}", "public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteVoiceConnectorResponse>(request, options);\r\n}", "public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteLifecyclePolicyResponse>(request, options);\r\n}", "public void Write(byte[] b) {\r\n    int len = b.Length;\r\n    CheckPosition(len);\r\n    System.Array.Copy(b, 0, _buf, _writeIndex, len);\r\n    _writeIndex += len;\r\n}", "public virtual RebaseResult GetRebaseResult() {\r\n    return this.rebaseResult;\r\n}", "public static int GetNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) {\r\n    foreach(var t in from t in _usableBitSetSizeslet numSetBitsAtDesiredSaturation = (int)(t*desiredSaturation)let estimatedNumUniqueValues = GetEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation) where estimatedNumUniqueValues > maxNumberOfValuesExpected select t) {\r\n        return t;\r\n    }\r\n    return -1;\r\n}", "public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDashboardResponse>(request, options);\r\n}", "public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance;\r\n    return Invoke<CreateSegmentResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[DBCELL]\\n\");\r\n    buffer.Append(\"    .rowoffset       = \").Append(StringUtil.ToHexString(RowOffset)).Append(\"\\n\");\r\n    for(int k = 0; k < field_2_cell_offsets.Length; k++) {\r\n        buffer.Append(\"    .cell_\").Append(k).Append(\" = \").Append(HexDump.ShortToHex(field_2_cell_offsets[k])).Append(\"\\n\");\r\n    }\r\n    buffer.Append(\"[/DBCELL]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual IList<string> GetUndeletedList() {\r\n    return undeletedList;\r\n}", "public override String ToString() {\r\n    return \"[INTERFACEEND/]\\n\";\r\n}", "public override object Clone() {\r\n    return this;\r\n}", "public PlainTextDictionary(TextReader reader) {\r\n    @in = reader;\r\n}", "public java.lang.StringBuilder append(java.lang.CharSequence csq) {\r\n    if(csq == null) {\r\n        appendNull();\r\n    } else {\r\n        append0(csq, 0, csq.Length);\r\n    }\r\n    return this;\r\n}", "public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance;\r\n    return Invoke<ListAssociatedStacksResponse>(request, options);\r\n}", "public static double avedev(double[] v) {\r\n    double r = 0;\r\n    double m = 0;\r\n    double s = 0;\r\n    for(int i = 0, iSize = v.Length; i < iSize; i++) {\r\n        s += v[i];\r\n    }\r\n    m = s / v.Length;\r\n    s = 0;\r\n    for(int i = 0, iSize = v.Length; i < iSize; i++) {\r\n        s += Math.Abs(v[i] - m);\r\n    }\r\n    r = s / v.Length;\r\n    return r;\r\n}", "public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeByoipCidrsResponse>(request, options);\r\n}", "public virtual GetDiskResponse GetDisk(GetDiskRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDiskRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance;\r\n    return Invoke<GetDiskResponse>(request, options);\r\n}", "public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDBClusterParameterGroupResponse>(request, options);\r\n}", "public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) {\r\n    java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount);\r\n    java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1);\r\n    buf._position = start;\r\n    buf._limit = start + charCount;\r\n    return buf;\r\n}", "public virtual SubmoduleStatusType GetType() {\r\n    return type;\r\n}", "public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeGameServerGroupResponse>(request, options);\r\n}", "public java.util.regex.Pattern pattern() {\r\n    return _pattern;\r\n}", "public virtual V setValue(V @object) {\r\n    throw new System.NotSupportedException();\r\n}", "public StringBuilder Stem(string word) {\r\n    string cmd = stemmer.GetLastOnPath(word);\r\n    if(cmd == null)return null;\r\n    buffer.Length = 0;\r\n    buffer.Append(word);\r\n    Diff.Apply(buffer, cmd);\r\n    if(buffer.Length > 0)return buffer;\r\n    elsereturn null;\r\n}", "public RenameFaceRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual char RequireChar(IDictionary<string, string> args, string name) {\r\n    return Require(args, name)[0];\r\n}", "public static string ToStringTree(ITree t) {\r\n    return ToStringTree(t, (IList<string>)null);\r\n}", "public override string ToString() {\r\n    return \"<deleted/>\";\r\n}", "public GetRepoWebhookLogListRequest(): base(\"cr\", \"2016-06-07\", \"GetRepoWebhookLogList\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs\";\r\n    Method = MethodType.GET;\r\n}", "public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetJobUnlockCodeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetJobUnlockCodeResponseUnmarshaller.Instance;\r\n    return Invoke<GetJobUnlockCodeResponse>(request, options);\r\n}", "public RemoveTagsRequest(string resourceId) {\r\n    _resourceId = resourceId;\r\n}", "public virtual short GetGB2312Id(char ch) {\r\n    try {\r\n        byte[] buffer = Encoding.GetEncoding(\"GB2312\").GetBytes(ch.ToString());\r\n        if(buffer.Length != 2) {\r\n            return -1;\r\n        }\r\n        int b0 = (buffer[0] & 0x0FF) - 161;\r\n        int b1 = (buffer[1] & 0x0FF) - 161;\r\n        return (short)(b0 * 94 + b1);\r\n    } catch(ArgumentException e) {\r\n        throw new Exception(e.ToString(), e);\r\n    }\r\n}", "public virtual NGit.BatchRefUpdate AddCommand(ICollection<ReceiveCommand> cmd) {\r\n    Sharpen.Collections.AddAll(commands, cmd);\r\n    return this;\r\n}", "public int CheckExternSheet(int sheetNumber) {\r\n    return OrCreateLinkTable.CheckExternSheet(sheetNumber);\r\n}", "public override bool Equals(object @object) {\r\n    return c.Equals(@object);\r\n}", "public virtual Query Build(IQueryNode queryNode) {\r\n    AnyQueryNode andNode = (AnyQueryNode)queryNode;\r\n    BooleanQuery bQuery = new BooleanQuery();\r\n    IList<IQueryNode> children = andNode.GetChildren();\r\n    if(children != null) {\r\n        foreach(IQueryNode child in children) {\r\n            object obj = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);\r\n            if(obj != null) {\r\n                Query query = (Query)obj;\r\n                try {\r\n                    bQuery.Add(query, Occur.SHOULD);\r\n                } catch(BooleanQuery.TooManyClausesException ex) {\r\n                    throw new QueryNodeException(new Message(QueryParserMessages.EMPTY_MESSAGE), ex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    bQuery.MinimumNumberShouldMatch = andNode.MinimumMatchingElements;\r\n    return bQuery;\r\n}", "public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeStreamProcessorResponse>(request, options);\r\n}", "public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDashboardPermissionsResponse>(request, options);\r\n}", "public virtual Ref Peel(Ref @ref) {\r\n    try {\r\n        return RefDatabase.Peel(@ref);\r\n    } catch(IOException) {\r\n        return @ref;\r\n    }\r\n}", "public override long RamBytesUsed() {\r\n    return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * RamUsageEstimator.NUM_BYTES_INT32 + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks);\r\n}", "public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance;\r\n    return Invoke<GetDomainSuggestionsResponse>(request, options);\r\n}", "public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeStackEventsResponse>(request, options);\r\n}", "public void SetRule(int idx, IConditionalFormattingRule cfRule) {\r\n    SetRule(idx, (HSSFConditionalFormattingRule)cfRule);\r\n}", "public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance;\r\n    return Invoke<CreateResolverRuleResponse>(request, options);\r\n}", "public SeriesIndexRecord(RecordInputStream in1) {\r\n    field_1_index = in1.ReadShort();\r\n}", "public GetStylesRequest(): base(\"lubancloud\", \"2018-05-09\", \"GetStyles\", \"luban\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_gridset_flag);\r\n}", "public override bool Equals(object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(GetType() != obj.GetType()) {\r\n        return false;\r\n    }\r\n    Toffs other = (Toffs)obj;\r\n    if(StartOffset != other.StartOffset) {\r\n        return false;\r\n    }\r\n    if(EndOffset != other.EndOffset) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateGatewayGroupResponse>(request, options);\r\n}", "public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateParticipantConnectionResponse>(request, options);\r\n}", "public static double irr(double[] income) {\r\n    return irr(income, 0.1d);\r\n}", "public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance;\r\n    return Invoke<RegisterWorkspaceDirectoryResponse>(request, options);\r\n}", "public virtual NGit.Api.RevertCommand Include(Ref commit) {\r\n    CheckCallable();\r\n    commits.AddItem(commit);\r\n    return this;\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {\r\n    ValueEval veText1;\r\n    try {\r\n        veText1 = OperandResolver.GetSingleValue(inumberVE, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    String iNumber = OperandResolver.CoerceValueToString(veText1);\r\n    System.Text.RegularExpressions.Match m = COMPLEX_NUMBER_PATTERN.Match(iNumber);\r\n    bool result = m.Success && m.Groups[0].Length>0;\r\n    String imaginary = \"\";\r\n    if(result == true) {\r\n        String imaginaryGroup = m.Groups[5].Value;\r\n        bool hasImaginaryPart = imaginaryGroup.Equals(\"i\") || imaginaryGroup.Equals(\"j\");\r\n        if(imaginaryGroup.Length == 0) {\r\n            return new StringEval(Convert.ToString(0));\r\n        }\r\n        if(hasImaginaryPart) {\r\n            String sign = \"\";\r\n            String imaginarySign = m.Groups[(GROUP3_IMAGINARY_SIGN)].Value;\r\n            if(imaginarySign.Length != 0 && !(imaginarySign.Equals(\"+\"))) {\r\n                sign = imaginarySign;\r\n            }\r\n            String groupImaginaryNumber = m.Groups[(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE)].Value;\r\n            if(groupImaginaryNumber.Length != 0) {\r\n                imaginary = sign + groupImaginaryNumber;\r\n            } else {\r\n                imaginary = sign + \"1\";\r\n            }\r\n        }\r\n    } else {\r\n        return ErrorEval.NUM_ERROR;\r\n    }\r\n    return new StringEval(imaginary);\r\n}", "public virtual E pollLast() {\r\n    java.util.MapClass.Entry<E, object> entry = backingMap.pollLastEntry();\r\n    return (entry == null) ? default(E) : entry.getKey();\r\n}", "public int ReadUShort() {\r\n    int ch1 = ReadUByte();\r\n    int ch2 = ReadUByte();\r\n    return (ch2 << 8) + (ch1 << 0);\r\n}", "public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType) {\r\n    _snapshotId = snapshotId;\r\n    _attribute = attribute;\r\n    _operationType = operationType;\r\n}", "public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance;\r\n    return Invoke<ListBonusPaymentsResponse>(request, options);\r\n}", "public override V Get(char[] text) {\r\n    if(text == null) {\r\n        throw new ArgumentNullException(\"text\");\r\n    }\r\n    return default(V);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    var commonGrams = (CommonGramsFilter)base.Create(input);\r\n    return new CommonGramsQueryFilter(commonGrams);\r\n}", "public virtual string GetPath() {\r\n    return path;\r\n}", "public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance;\r\n    return Invoke<InitiateMultipartUploadResponse>(request, options);\r\n}", "public java.lang.StringBuilder insert(int offset, int i) {\r\n    insert0(offset, System.Convert.ToString(i));\r\n    return this;\r\n}", "public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        long block = blocks[blocksOffset++];\r\n        for(int shift = 62; shift >= 0; shift -= 2) {\r\n            values[valuesOffset++] = (int)(((long)((ulong)block >> shift)) & 3);\r\n        }\r\n    }\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new ElisionFilter(input, articles);\r\n}", "public bool Eat(Row @in, int[] remap) {\r\n    int sum = 0;\r\n    foreach(Cell c in @in.cells.Values) {\r\n        sum += c.cnt;\r\n        if(c.@ref >= 0) {\r\n            if(remap[c.@ref] == 0) {\r\n                c.@ref = -1;\r\n            }\r\n        }\r\n    }\r\n    int frame = sum / 10;\r\n    bool live = false;\r\n    foreach(Cell c in @in.cells.Values) {\r\n        if(c.cnt < frame && c.cmd >= 0) {\r\n            c.cnt = 0;\r\n            c.cmd = -1;\r\n        }\r\n        if(c.cmd >= 0 || c.@ref >= 0) {\r\n            live |= true;\r\n        }\r\n    }\r\n    return !live;\r\n}", "public Token GetToken(int index) {\r\n    Token t = Token;\r\n    for(int i = 0; i < index; i++) {\r\n        if(t.Next != null) t = t.Next;\r\n        else t = t.Next = TokenSource.GetNextToken();\r\n    }\r\n    return t;\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(GetType().Name).Append(\" [ARRAY]\\n\");\r\n    sb.Append(\" range=\").Append(Range.ToString()).Append(\"\\n\");\r\n    sb.Append(\" options=\").Append(HexDump.ShortToHex(_options)).Append(\"\\n\");\r\n    sb.Append(\" notUsed=\").Append(HexDump.IntToHex(_field3notUsed)).Append(\"\\n\");\r\n    sb.Append(\" formula:\").Append(\"\\n\");\r\n    Ptg[] ptgs = _formula.Tokens;\r\n    for(int i = 0; i < ptgs.Length; i++) {\r\n        Ptg ptg = ptgs[i];\r\n        sb.Append(ptg.ToString()).Append(ptg.RVAType).Append(\"\\n\");\r\n    }\r\n    sb.Append(\"]\");\r\n    return sb.ToString();\r\n}", "public virtual GetFolderResponse GetFolder(GetFolderRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetFolderRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance;\r\n    return Invoke<GetFolderResponse>(request, options);\r\n}", "public virtual void add(int location, E @object) {\r\n    throw new System.NotSupportedException();\r\n}", "public PositiveScoresOnlyCollector(ICollector c) {\r\n    this.c = c;\r\n}", "public CreateRepoBuildRuleRequest(): base(\"cr\", \"2016-06-07\", \"CreateRepoBuildRule\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/rules\";\r\n    Method = MethodType.PUT;\r\n}", "public BaseRef(RefEval re) {\r\n    _refEval = re;\r\n    _areaEval = null;\r\n    _firstRowIndex = re.Row;\r\n    _firstColumnIndex = re.Column;\r\n    _height = 1;\r\n    _width = 1;\r\n}", "public DrawingManager2(EscherDggRecord dgg) {\r\n    this.dgg = dgg;\r\n}", "public override void Reset() {\r\n    if(!First) {\r\n        Reset(raw);\r\n    }\r\n}", "public java.nio.charset.CharsetDecoder reset() {\r\n    status = INIT;\r\n    implReset();\r\n    return this;\r\n}", "public BufferedReader(java.io.Reader @in, int size) : base(@in) {\r\n    if(size <= 0) {\r\n        throw new System.ArgumentException(\"size <= 0\");\r\n    }\r\n    this.@in = @in;\r\n    buf = new char[size];\r\n}", "public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCodeRepositoryResponse>(request, options);\r\n}", "public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDBSubnetGroupResponse>(request, options);\r\n}", "public virtual NGit.Api.RenameBranchCommand SetOldName(string oldName) {\r\n    CheckCallable();\r\n    this.oldName = oldName;\r\n    return this;\r\n}", "public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) {\r\n    CheckCallable();\r\n    this.force = force;\r\n    return this;\r\n}", "public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance;\r\n    return Invoke<StopCompilationJobResponse>(request, options);\r\n}", "public void incrementSecondaryProgressBy(int diff) {\r\n    lock(this) {\r\n        setSecondaryProgress(mSecondaryProgress + diff);\r\n    }\r\n}", "public override int[] Clear() {\r\n    return bytesStart = null;\r\n}", "public string getRawPath() {\r\n    return path;\r\n}", "public GetUserSourceAccountRequest(): base(\"cr\", \"2016-06-07\", \"GetUserSourceAccount\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/users/sourceAccount\";\r\n    Method = MethodType.GET;\r\n}", "public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance;\r\n    return Invoke<CreateExportJobResponse>(request, options);\r\n}", "public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDedicatedIpPoolResponse>(request, options);\r\n}", "public override bool Equals(Object obj) {\r\n    if(this == obj) return true;\r\n    if(obj == null) return false;\r\n    if(obj is HSSFCellStyle) {\r\n        HSSFCellStyle other = (HSSFCellStyle)obj;\r\n        if(_format == null) {\r\n            if(other._format != null)return false;\r\n        } else if(!_format.Equals(other._format))return false;\r\n        if(index != other.index)return false;\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance;\r\n    return Invoke<ReleaseHostsResponse>(request, options);\r\n}", "public override bool Equals(object @object) {\r\n    if(this == @object) {\r\n        return true;\r\n    }\r\n    if(@object is java.util.Set<E>) {\r\n        java.util.Set<E> s = (java.util.Set<E>)@object;\r\n        try {\r\n            return size() == s.size() && containsAll(s);\r\n        } catch(System.ArgumentNullException) {\r\n            return false;\r\n        } catch(System.InvalidCastException) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}", "public virtual void SetRefLogMessage(string msg, bool appendStatus) {\r\n    if(msg == null && !appendStatus) {\r\n        DisableRefLog();\r\n    } else {\r\n        if(msg == null && appendStatus) {\r\n            refLogMessage = string.Empty;\r\n            refLogIncludeResult = true;\r\n        } else {\r\n            refLogMessage = msg;\r\n            refLogIncludeResult = appendStatus;\r\n        }\r\n    }\r\n}", "public StreamIDRecord(RecordInputStream in1) {\r\n    idstm = in1.ReadShort();\r\n}", "public RecognizeCarRequest(): base(\"visionai-poc\", \"2020-04-08\", \"RecognizeCar\") {\r\n    Method = MethodType.POST;\r\n}", "public sealed override java.nio.ByteOrder order() {\r\n    return java.nio.ByteOrder.nativeOrder();\r\n}", "public virtual int GetAheadCount() {\r\n    return aheadCount;\r\n}", "public virtual bool IsNewFragment() {\r\n    return false;\r\n}", "public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance;\r\n    return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options);\r\n}", "public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {\r\n    return token == symbol;\r\n}", "public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteTransitGatewayResponse>(request, options);\r\n}", "public static double[] Grow(double[] array, int minSize) {\r\n    Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");\r\n    if(array.Length < minSize) {\r\n        double[] newArray = new double[Oversize(minSize, RamUsageEstimator.NUM_BYTES_DOUBLE)];\r\n        Array.Copy(array, 0, newArray, 0, array.Length);\r\n        return newArray;\r\n    } else {\r\n        return array;\r\n    }\r\n}", "public CreateTransactionRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"CreateTransaction\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) {\r\n    refLogIdent = pi;\r\n    return this;\r\n}", "public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance;\r\n    return Invoke<GetLaunchTemplateDataResponse>(request, options);\r\n}", "public ParseInfo(ProfilingATNSimulator atnSimulator) {\r\n    this.atnSimulator = atnSimulator;\r\n}", "public SimpleQQParser(string[] qqNames, string indexField) {\r\n    this.qqNames = qqNames;\r\n    this.indexField = indexField;\r\n}", "public virtual PromoteReadReplicaDBClusterResponse PromoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PromoteReadReplicaDBClusterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PromoteReadReplicaDBClusterResponseUnmarshaller.Instance;\r\n    return Invoke<PromoteReadReplicaDBClusterResponse>(request, options);\r\n}", "public virtual DescribeCapacityReservationsResponse DescribeCapacityReservations(DescribeCapacityReservationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCapacityReservationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCapacityReservationsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCapacityReservationsResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return \"IndexSearcher(\" + reader + \"; executor=\" + executor + \")\";\r\n}", "public override bool IncrementToken() {\r\n    return false;\r\n}", "public void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(main + 1);\r\n    out1.WriteShort(subFrom);\r\n    out1.WriteShort(subTo);\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    if(bitsPerValue > 32) {\r\n        throw new System.NotSupportedException(\"Cannot decode \" + bitsPerValue + \"-bits values into an int[]\");\r\n    }\r\n    for(int i = 0; i < iterations; ++i) {\r\n        long block = ReadInt64(blocks, blocksOffset);\r\n        blocksOffset += 8;\r\n        valuesOffset = Decode(block, values, valuesOffset);\r\n    }\r\n}", "public virtual bool IsExpectedToken(int symbol) {\r\n    ATN atn = Interpreter.atn;\r\n    ParserRuleContext ctx = _ctx;\r\n    ATNState s = atn.states[State];\r\n    IntervalSet following = atn.NextTokens(s);\r\n    if(following.Contains(symbol)) {\r\n        return true;\r\n    }\r\n    if(!following.Contains(TokenConstants.EPSILON)) {\r\n        return false;\r\n    }\r\n    while(ctx != null && ctx.invokingState >= 0 && following.Contains(TokenConstants.EPSILON)) {\r\n        ATNState invokingState = atn.states[ctx.invokingState];\r\n        RuleTransition rt = (RuleTransition)invokingState.Transition(0);\r\n        following = atn.NextTokens(rt.followState);\r\n        if(following.Contains(symbol)) {\r\n            return true;\r\n        }\r\n        ctx = (ParserRuleContext)ctx.Parent;\r\n    }\r\n    if(following.Contains(TokenConstants.EPSILON) && symbol == TokenConstants.EOF) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateStreamResponse>(request, options);\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    try {\r\n        OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);\r\n        return ErrorEval.NA;\r\n    } catch(EvaluationException e) {\r\n        int result = TranslateErrorCodeToErrorTypeValue(e.GetErrorEval().ErrorCode);\r\n        return new NumberEval(result);\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    sb.Append(GetType().Name).Append(\" [\");\r\n    sb.Append(_index).Append(\" \").Append(_name);\r\n    sb.Append(\"]\");\r\n    return sb.ToString();\r\n}", "public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance;\r\n    return Invoke<ListAssignmentsForHITResponse>(request, options);\r\n}", "public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteAccessControlRuleResponse>(request, options);\r\n}", "public FST.Arc<long?> GetFirstArc(FST.Arc<long?> arc) {\r\n    return fst.GetFirstArc(arc);\r\n}", "public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        long block = blocks[blocksOffset++];\r\n        for(int shift = 48; shift >= 0; shift -= 16) {\r\n            values[valuesOffset++] = (int)(((long)((ulong)block >> shift)) & 65535);\r\n        }\r\n    }\r\n}", "public override long skip(long charCount) {\r\n    if(charCount < 0) {\r\n        throw new System.ArgumentException(\"charCount < 0: \" + charCount);\r\n    }\r\n    lock(@lock) {\r\n        checkNotClosed();\r\n        if(charCount == 0) {\r\n            return 0;\r\n        }\r\n        long inSkipped;\r\n        int availableFromBuffer = buf.Length - pos;\r\n        if(availableFromBuffer > 0) {\r\n            long requiredFromIn = charCount - availableFromBuffer;\r\n            if(requiredFromIn <= 0) {\r\n                pos += (int)(charCount);\r\n                return charCount;\r\n            }\r\n            pos += availableFromBuffer;\r\n            inSkipped = @in.skip(requiredFromIn);\r\n        } else {\r\n            inSkipped = @in.skip(charCount);\r\n        }\r\n        return inSkipped + availableFromBuffer;\r\n    }\r\n}", "public virtual IDictionary<string, Ref> GetRefsMap() {\r\n    return advertisedRefs;\r\n}", "public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateApiKeyResponse>(request, options);\r\n}", "public override ObjectStream OpenStream() {\r\n    WindowCursor wc = new WindowCursor(db);\r\n    InputStream @in;\r\n    try {\r\n        @in = new PackInputStream(pack, objectOffset + headerLength, wc);\r\n    } catch(IOException) {\r\n        return wc.Open(GetObjectId(), type).OpenStream();\r\n    }@in = new BufferedInputStream(new InflaterInputStream(@in, wc.Inflater(), 8192),8192);\r\n    return new ObjectStream.Filter(type, size, @in);\r\n}", "public ArrayList() {\r\n    array = libcore.util.EmptyArray.OBJECT;\r\n}", "public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateDetectorVersionResponse>(request, options);\r\n}", "public void Resize() {\r\n    Resize(Double.MaxValue);\r\n}", "public RevFlagSet(ICollection<RevFlag> s) : this() {\r\n    Sharpen.Collections.AddAll(this, s);\r\n}", "public override int size() {\r\n    return this._enclosing.size();\r\n}", "public sealed override long getLong() {\r\n    int newPosition = _position + libcore.io.SizeOf.LONG;\r\n    if(newPosition > _limit) {\r\n        throw new java.nio.BufferUnderflowException();\r\n    }\r\n    long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _order);\r\n    _position = newPosition;\r\n    return result;\r\n}", "public java.lang.StringBuilder insert(int offset, long l) {\r\n    insert0(offset, System.Convert.ToString(l));\r\n    return this;\r\n}", "public TurkishLowerCaseFilter(TokenStream @in): base(@in) {\r\n    termAtt = AddAttribute<ICharTermAttribute>();\r\n}", "public virtual ParseTreeMatch Match(IParseTree tree, ParseTreePattern pattern) {\r\n    MultiMap<string, IParseTree> labels = new MultiMap<string, IParseTree>();\r\n    IParseTree mismatchedNode = MatchImpl(tree, pattern.PatternTree, labels);\r\n    return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);\r\n}", "public virtual void AddIfNoOverlap(WeightedPhraseInfo wpi) {\r\n    foreach(WeightedPhraseInfo existWpi in PhraseList) {\r\n        if(existWpi.IsOffsetOverlap(wpi)) {\r\n            existWpi.TermsInfos.AddRange(wpi.TermsInfos);\r\n            return;\r\n        }\r\n    }\r\n    PhraseList.Add(wpi);\r\n}", "public override Merger NewMerger(Repository db) {\r\n    return new StrategySimpleTwoWayInCore.InCoreMerger(db);\r\n}", "public override float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) {\r\n    return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;\r\n}", "public override ICollection<IParseTree> Evaluate(IParseTree t) {\r\n    return Trees.FindAllRuleNodes(t, ruleIndex);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[CFRULE]\\n\");\r\n    buffer.Append(\"    .condition_type   =\").Append(field_1_condition_type).Append(\"\\n\");\r\n    buffer.Append(\"    OPTION FLAGS=0x\").Append(string.Format(\"{0:X}\",Options)).Append(\"\\n\");\r\n    if(ContainsFontFormattingBlock) {\r\n        buffer.Append(_fontFormatting.ToString()).Append(\"\\n\");\r\n    }\r\n    if(ContainsBorderFormattingBlock) {\r\n        buffer.Append(_borderFormatting.ToString()).Append(\"\\n\");\r\n    }\r\n    if(ContainsPatternFormattingBlock) {\r\n        buffer.Append(_patternFormatting.ToString()).Append(\"\\n\");\r\n    }\r\n    buffer.Append(\"    Formula 1 =\").Append(Arrays.ToString(field_17_formula1.Tokens)).Append(\"\\n\");\r\n    buffer.Append(\"    Formula 2 =\").Append(Arrays.ToString(field_18_formula2.Tokens)).Append(\"\\n\");\r\n    buffer.Append(\"[/CFRULE]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeServiceUpdatesResponse>(request, options);\r\n}", "public String GetNameName(int index) {\r\n    String result = GetNameAt(index).NameName;\r\n    return result;\r\n}", "public virtual DescribeLocationsResponse DescribeLocations() {\r\n    return DescribeLocations(new DescribeLocationsRequest());\r\n}", "public override string ToString() {\r\n    return \"<phraseslop value='\" + GetValueString() + \"'>\" + \"\\n\"+ GetChild().ToString() + \"\\n</phraseslop>\";\r\n}", "public virtual DirCacheEntry GetDirCacheEntry() {\r\n    return currentSubtree == null ? currentEntry : null;\r\n}", "public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) {\r\n    java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount);\r\n    if(intCount > remaining()) {\r\n        throw new java.nio.BufferOverflowException();\r\n    }{\r\n        for(int i = srcOffset; i < srcOffset + intCount; ++i) {\r\n            put(src[i]);\r\n        }\r\n    }\r\n    return this;\r\n}", "public virtual void trimToSize() {\r\n    int s = _size;\r\n    if(s == array.Length) {\r\n        return;\r\n    }\r\n    if(s == 0) {\r\n        array = libcore.util.EmptyArray.OBJECT;\r\n    } else {\r\n        object[] newArray = new object[s];\r\n        System.Array.Copy(array, 0, newArray, 0, s);\r\n        array = newArray;\r\n    }\r\n    modCount++;\r\n}", "public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new RussianLightStemFilter(input);\r\n}", "public int[] ToArray(int[] a) {\r\n    int[] rval;\r\n    if(a.Length == _limit) {\r\n        Array.Copy(_array, 0, a, 0, _limit);\r\n        rval = a;\r\n    } else {\r\n        rval = ToArray();\r\n    }\r\n    return rval;\r\n}", "public BasicSessionCredentials(string accessKeyId, string accessKeySecret,string sessionToken, long roleSessionDurationSeconds = 0) {\r\n    if(accessKeyId == null) {\r\n        throw new ArgumentOutOfRangeException(\"Access key ID cannot be null.\");\r\n    }\r\n    if(accessKeySecret == null) {\r\n        throw new ArgumentOutOfRangeException(\"Access key secret cannot be null.\");\r\n    }\r\n    this.accessKeyId = accessKeyId;\r\n    this.accessKeySecret = accessKeySecret;\r\n    this.sessionToken = sessionToken;\r\n    this.roleSessionDurationSeconds = roleSessionDurationSeconds;\r\n    sessionStartedTimeInMilliSeconds = DateTime.UtcNow.currentTimeMillis();\r\n}", "public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) {\r\n    if(shortCount > remaining()) {\r\n        throw new java.nio.BufferUnderflowException();\r\n    }\r\n    System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount);\r\n    _position += shortCount;\r\n    return this;\r\n}", "public virtual ActivateEventSourceResponse ActivateEventSource(ActivateEventSourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ActivateEventSourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ActivateEventSourceResponseUnmarshaller.Instance;\r\n    return Invoke<ActivateEventSourceResponse>(request, options);\r\n}", "public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeReceiptRuleSetResponse>(request, options);\r\n}", "public Filter(string name) {\r\n    _name = name;\r\n}", "public override java.nio.DoubleBuffer put(double c) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance;\r\n    return Invoke<CreateTrafficPolicyInstanceResponse>(request, options);\r\n}", "public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeKanji, bool normalizeKana): base(input) {\r\n    this.normalizeKanji = normalizeKanji;\r\n    this.normalizeKana = normalizeKana;\r\n    buffer.Reset(input);\r\n}", "public void WriteLong(long v) {\r\n    WriteInt((int)(v >> 0));\r\n    WriteInt((int)(v >> 32));\r\n}", "public FileResolver() {\r\n    exports = new ConcurrentHashMap<string, Repository>();\r\n    exportBase = new CopyOnWriteArrayList<FilePath>();\r\n}", "public ValueEval GetRef3DEval(Ref3DPtg rptg) {\r\n    SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.ExternSheetIndex);\r\n    return new LazyRefEval(rptg.Row, rptg.Column, sre);\r\n}", "public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDatasetResponse>(request, options);\r\n}", "public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance;\r\n    return Invoke<StartRelationalDatabaseResponse>(request, options);\r\n}", "public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() {\r\n    return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());\r\n}", "static public double PMT(double r, int nper, double pv, double fv, int type) {\r\n    double pmt = -r * (pv * Math.Pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.Pow(1 + r, nper) - 1));\r\n    return pmt;\r\n}", "public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDocumentVersionsResponse>(request, options);\r\n}", "public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance;\r\n    return Invoke<ListPublishingDestinationsResponse>(request, options);\r\n}", "public DeleteAccountAliasRequest(string accountAlias) {\r\n    _accountAlias = accountAlias;\r\n}", "public static float[] Grow(float[] array) {\r\n    return Grow(array, 1 + array.Length);\r\n}", "public override string OutputToString(object output) {\r\n    if(!(output is IList)) {\r\n        return outputs.OutputToString((T)output);\r\n    } else {\r\n        IList outputList = (IList)output;\r\n        StringBuilder b = new StringBuilder();\r\n        b.Append('[');\r\n        for(int i = 0; i < outputList.Count; i++) {\r\n            if(i > 0) {\r\n                b.Append(\", \");\r\n            }\r\n            b.Append(outputs.OutputToString((T)outputList[i]));\r\n        }\r\n        b.Append(']');\r\n        return b.ToString();\r\n    }\r\n}", "public void NotifyDeleteCell(ICell cell) {\r\n    _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell));\r\n}", "public java.lang.StringBuilder replace(int start, int end, string str) {\r\n    replace0(start, end, str);\r\n    return this;\r\n}", "public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<SetIdentityPoolConfigurationResponse>(request, options);\r\n}", "public static double kthSmallest(double[] v, int k) {\r\n    double r = double.NaN;\r\n    k--;\r\n    if(v != null && v.Length > k && k >= 0) {\r\n        Array.Sort(v);\r\n        r = v[k];\r\n    }\r\n    return r;\r\n}", "public override void Set(int index, long value) {\r\n    int o = (int)((uint)index >> 5);\r\n    int b = index & 31;\r\n    int shift = b << 1;\r\n    blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);\r\n}", "public override string ToString() {\r\n    var children = GetChildren();\r\n    if(children == null || children.Count == 0)return \"<boolean operation='and'/>\";\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(\"<boolean operation='and'>\");\r\n    foreach(IQueryNode child in children) {\r\n        sb.Append(\"\\n\");\r\n        sb.Append(child.ToString());\r\n    }\r\n    sb.Append(\"\\n</boolean>\");\r\n    return sb.ToString();\r\n}", "public int SumTokenSizes(int fromIx, int toIx) {\r\n    int result = 0;\r\n    for(int i = fromIx; i < toIx; i++) {\r\n        result += _ptgs[i].Size;\r\n    }\r\n    return result;\r\n}", "public virtual void SetReadonly(bool @readonly) {\r\n    if(this.@readonly && !@readonly) {\r\n        throw new InvalidOperationException(\"can't alter readonly IntervalSet\");\r\n    }\r\n    this.@readonly = @readonly;\r\n}", "public void ClearConsumingCell(FormulaCellCacheEntry cce) {\r\n    if(!_consumingCells.Remove(cce)) {\r\n        throw new InvalidOperationException(\"Specified formula cell is not consumed by this cell\");\r\n    }\r\n}", "public override java.util.List<E> subList(int start, int end) {\r\n    lock(mutex) {\r\n        return new java.util.Collections.SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);\r\n    }\r\n}", "public virtual FileHeader GetFileHeader() {\r\n    return file;\r\n}", "public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance;\r\n    return Invoke<AttachLoadBalancersResponse>(request, options);\r\n}", "public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) {\r\n    _accountId = accountId;\r\n    _vaultName = vaultName;\r\n    _jobParameters = jobParameters;\r\n}", "public override string ToString() {\r\n    return \"SPL\";\r\n}", "public ReplaceableAttribute(string name, string value, bool replace) {\r\n    _name = name;\r\n    _value = value;\r\n    _replace = replace;\r\n}", "public void Add(IIndexableField field) {\r\n    fields.Add(field);\r\n}", "public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteStackSetResponse>(request, options);\r\n}", "public GetRepoBuildRuleListRequest(): base(\"cr\", \"2016-06-07\", \"GetRepoBuildRuleList\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/rules\";\r\n    Method = MethodType.GET;\r\n}", "public SparseArray(int initialCapacity) {\r\n    initialCapacity = android.util.@internal.ArrayUtils.idealIntArraySize(initialCapacity);\r\n    mKeys = new int[initialCapacity];\r\n    mValues = new object[initialCapacity];\r\n    mSize = 0;\r\n}", "public InvokeServiceRequest(): base(\"industry-brain\", \"2018-07-12\", \"InvokeService\") {\r\n    Method = MethodType.POST;\r\n}", "public ListAlbumPhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListAlbumPhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public bool hasPrevious() {\r\n    return link != list.voidLink;\r\n}", "public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteHsmConfigurationResponse>(request, options);\r\n}", "public CreateLoadBalancerRequest(string loadBalancerName) {\r\n    _loadBalancerName = loadBalancerName;\r\n}", "public string getUserInfo() {\r\n    return decode(userInfo);\r\n}", "public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance;\r\n    return Invoke<TagAttendeeResponse>(request, options);\r\n}", "public virtual string GetRefName() {\r\n    return name;\r\n}", "public override WAH8DocIdSet Build() {\r\n    if(this.wordNum != -1) {\r\n        AddWord(wordNum, (byte)word);\r\n    }\r\n    return base.Build();\r\n}", "public virtual bool IsSubTotal(int rowIndex, int columnIndex) {\r\n    return false;\r\n}", "public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDBProxiesResponse>(request, options);\r\n}", "public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance;\r\n    return Invoke<GetVoiceConnectorProxyResponse>(request, options);\r\n}", "public virtual void FromConfig(Config rc) {\r\n    SetPackedGitOpenFiles(rc.GetInt(\"core\", null, \"packedgitopenfiles\", GetPackedGitOpenFiles()));\r\n    SetPackedGitLimit(rc.GetLong(\"core\", null, \"packedgitlimit\", GetPackedGitLimit()));\r\n    SetPackedGitWindowSize(rc.GetInt(\"core\", null, \"packedgitwindowsize\", GetPackedGitWindowSize()));\r\n    SetPackedGitMMAP(rc.GetBoolean(\"core\", null, \"packedgitmmap\", IsPackedGitMMAP()));\r\n    SetDeltaBaseCacheLimit(rc.GetInt(\"core\", null, \"deltabasecachelimit\", GetDeltaBaseCacheLimit()));\r\n    long maxMem = Runtime.GetRuntime().MaxMemory();\r\n    long sft = rc.GetLong(\"core\", null, \"streamfilethreshold\", GetStreamFileThreshold());\r\n    sft = Math.Min(sft, maxMem / 4);\r\n    sft = Math.Min(sft, int.MaxValue);\r\n    SetStreamFileThreshold((int)sft);\r\n}", "public static DateTime GetJavaDate(double date) {\r\n    return GetJavaDate(date, false);\r\n}", "public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance;\r\n    return Invoke<StartPersonTrackingResponse>(request, options);\r\n}", "public override int size() {\r\n    return this._enclosing.size();\r\n}", "public virtual GetRouteResponse GetRoute(GetRouteRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetRouteRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance;\r\n    return Invoke<GetRouteResponse>(request, options);\r\n}", "public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteClusterResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[MMS]\\n\");\r\n    buffer.Append(\"    .addMenu        = \").Append(StringUtil.ToHexString(AddMenuCount)).Append(\"\\n\");\r\n    buffer.Append(\"    .delMenu        = \").Append(StringUtil.ToHexString(DelMenuCount)).Append(\"\\n\");\r\n    buffer.Append(\"[/MMS]\\n\");\r\n    return buffer.ToString();\r\n}", "public FileBasedConfig(Config @base, FilePath cfgLocation, FS fs) : base(@base) {\r\n    configFile = cfgLocation;\r\n    this.fs = fs;\r\n    this.snapshot = FileSnapshot.DIRTY;\r\n    this.hash = ObjectId.ZeroId;\r\n}", "public override int Following(int pos) {\r\n    if(pos < text.BeginIndex || pos > text.EndIndex) {\r\n        throw new ArgumentException(\"offset out of bounds\");\r\n    } else if(0 == sentenceStarts.Length) {\r\n        text.SetIndex(text.BeginIndex);\r\n        return Done;\r\n    } else if(pos >= sentenceStarts[sentenceStarts.Length - 1]) {\r\n        text.SetIndex(text.EndIndex);\r\n        currentSentence = sentenceStarts.Length - 1;\r\n        return Done;\r\n    } else {\r\n        currentSentence = (sentenceStarts.Length - 1) / 2;\r\n        MoveToSentenceAt(pos, 0, sentenceStarts.Length - 2);\r\n        text.SetIndex(sentenceStarts[++currentSentence]);\r\n        return Current;\r\n    }\r\n}", "public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateParameterGroupResponse>(request, options);\r\n}", "public override Object Clone() {\r\n    SeriesChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord();\r\n    rec.field_1_chartGroupIndex = field_1_chartGroupIndex;\r\n    return rec;\r\n}", "public static double CalcDistanceFromErrPct(IShape shape, double distErrPct, SpatialContext ctx) {\r\n    if(distErrPct < 0 || distErrPct > 0.5) {\r\n        throw new ArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\", \"distErrPct\");\r\n    }\r\n    if(distErrPct == 0 || shape is IPoint) {\r\n        return 0;\r\n    }\r\n    IRectangle bbox = shape.BoundingBox;\r\n    IPoint ctr = bbox.Center;\r\n    double y = (ctr.Y >= 0 ? bbox.MaxY : bbox.MinY);\r\n    double diagonalDist = ctx.DistCalc.Distance(ctr, bbox.MaxX, y);\r\n    return diagonalDist * distErrPct;\r\n}", "public virtual int codePointAt(int index) {\r\n    if(index < 0 || index >= count) {\r\n        throw indexAndLength(index);\r\n    }\r\n    return Sharpen.CharHelper.CodePointAt(value, index, count);\r\n}", "public void SetPasswordVerifier(int passwordVerifier) {\r\n    this.passwordVerifier = passwordVerifier;\r\n}", "public ListVaultsRequest(string accountId) {\r\n    _accountId = accountId;\r\n}", "public SquashMessageFormatter() {\r\n    dateFormatter = new GitDateFormatter(GitDateFormatter.Format.DEFAULT);\r\n}", "public GetVideoCoverRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public override int lastIndexOf(object @object) {\r\n    int pos = _size;\r\n    java.util.LinkedList.Link<E> link = voidLink.previous;\r\n    if(@object != null) {\r\n        while(link != voidLink) {\r\n            pos--;\r\n            if(@object.Equals(link.data)) {\r\n                return pos;\r\n            }\r\n            link = link.previous;\r\n        }\r\n    } else {\r\n        while(link != voidLink) {\r\n            pos--;\r\n            if((object)link.data == null) {\r\n                return pos;\r\n            }\r\n            link = link.previous;\r\n        }\r\n    }\r\n    return -1;\r\n}", "public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeSpotFleetRequestsResponse>(request, options);\r\n}", "public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = IndexFacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance;\r\n    return Invoke<IndexFacesResponse>(request, options);\r\n}", "public override BreakIterator GetBreakIterator(int script) {\r\n    switch(script) {\r\n    case UScript.Japanese:\r\n        return (BreakIterator)cjkBreakIterator.Clone();\r\n    case UScript.Myanmar:\r\n        if(myanmarAsWords) {\r\n            return (BreakIterator)defaultBreakIterator.Clone();\r\n        } else {\r\n            return (BreakIterator)myanmarSyllableIterator.Clone();\r\n        }\r\n    default:\r\n        return (BreakIterator)defaultBreakIterator.Clone();\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder b = new StringBuilder();\r\n    b.Append(\"[DCONREF]\\n\");\r\n    b.Append(\"    .ref\\n\");\r\n    b.Append(\"        .firstrow   = \").Append(firstRow).Append(\"\\n\");\r\n    b.Append(\"        .lastrow    = \").Append(lastRow).Append(\"\\n\");\r\n    b.Append(\"        .firstcol   = \").Append(firstCol).Append(\"\\n\");\r\n    b.Append(\"        .lastcol    = \").Append(lastCol).Append(\"\\n\");\r\n    b.Append(\"    .cch            = \").Append(charCount).Append(\"\\n\");\r\n    b.Append(\"    .stFile\\n\");\r\n    b.Append(\"        .h          = \").Append(charType).Append(\"\\n\");\r\n    b.Append(\"        .rgb        = \").Append(ReadablePath).Append(\"\\n\");\r\n    b.Append(\"[/DCONREF]\\n\");\r\n    return b.ToString();\r\n}", "public virtual int GetPackedGitOpenFiles() {\r\n    return packedGitOpenFiles;\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[FEATURE HEADER]\\n\");\r\n    buffer.Append(\"[/FEATURE HEADER]\\n\");\r\n    return buffer.ToString();\r\n}", "public static byte[] GetToUnicodeLE(String string1) {\r\n    return UTF16LE.GetBytes(string1);\r\n}", "public IList<string> GetFooterLines(string keyName) {\r\n    return GetFooterLines(new FooterKey(keyName));\r\n}", "public override void Refresh() {\r\n    base.Refresh();\r\n    Rescan();\r\n}", "public override float get(int index) {\r\n    checkIndex(index);\r\n    return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT);\r\n}", "public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDetectorResponse>(request, options);\r\n}", "public override int[] Grow() {\r\n    Debug.Assert(bytesStart != null);\r\n    return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart.Length + 1);\r\n}", "public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance;\r\n    return Invoke<ListExclusionsResponse>(request, options);\r\n}", "public static SpatialStrategy GetSpatialStrategy(int roundNumber) {\r\n    SpatialStrategy result;\r\n    if(!spatialStrategyCache.TryGetValue(roundNumber, out result) || result == null) {\r\n        throw new InvalidOperationException(\"Strategy should have been init'ed by SpatialDocMaker by now\");\r\n    }\r\n    return result;\r\n}", "public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance;\r\n    return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_categoryDataType);\r\n    out1.WriteShort(field_2_valuesDataType);\r\n    out1.WriteShort(field_3_numCategories);\r\n    out1.WriteShort(field_4_numValues);\r\n    out1.WriteShort(field_5_bubbleSeriesType);\r\n    out1.WriteShort(field_6_numBubbleValues);\r\n}", "public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance;\r\n    return Invoke<PostAgentProfileResponse>(request, options);\r\n}", "public virtual ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex) {\r\n    if(((ITokenStream)InputStream) != null) {\r\n        ITokenSource tokenSource = ((ITokenStream)InputStream).TokenSource;\r\n        if(tokenSource is Lexer) {\r\n            Lexer lexer = (Lexer)tokenSource;\r\n            return CompileParseTreePattern(pattern, patternRuleIndex, lexer);\r\n        }\r\n    }\r\n    throw new NotSupportedException(\"Parser can't discover a lexer to use\");\r\n}", "public virtual BacktrackDBClusterResponse BacktrackDBCluster(BacktrackDBClusterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = BacktrackDBClusterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = BacktrackDBClusterResponseUnmarshaller.Instance;\r\n    return Invoke<BacktrackDBClusterResponse>(request, options);\r\n}", "public override string GetName() {\r\n    return strategyName;\r\n}", "public virtual void CopyTo(byte[] b, int o) {\r\n    FormatHexByte(b, o + 0, w1);\r\n    FormatHexByte(b, o + 8, w2);\r\n    FormatHexByte(b, o + 16, w3);\r\n    FormatHexByte(b, o + 24, w4);\r\n    FormatHexByte(b, o + 32, w5);\r\n}", "public static IntList LineMap(byte[] buf, int ptr, int end) {\r\n    IntList map = new IntList((end - ptr) / 36);\r\n    map.FillTo(1, int.MinValue);\r\n    for(; ptr < end; ptr = NextLF(buf, ptr)) {\r\n        map.Add(ptr);\r\n    }\r\n    map.Add(end);\r\n    return map;\r\n}", "public virtual ICollection<ObjectId> GetAdditionalHaves() {\r\n    return Sharpen.Collections.EmptySet<ObjectId>();\r\n}", "public override long RamBytesUsed() {\r\n    return _termsCache.Values.Sum(simpleTextTerms => (simpleTextTerms != null) ? simpleTextTerms.RamBytesUsed() : 0);\r\n}", "public String ToXml(String tab) {\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.Append(tab).Append(\"<\").Append(RecordName).Append(\">\\n\");\r\n    for(IEnumerator iterator = EscherRecords.GetEnumerator(); iterator.MoveNext();) {\r\n        EscherRecord escherRecord = (EscherRecord)iterator.Current;\r\n        builder.Append(escherRecord.ToXml(tab + \"\\t\"));\r\n    }\r\n    builder.Append(tab).Append(\"</\").Append(RecordName).Append(\">\\n\");\r\n    return builder.ToString();\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new GalicianMinimalStemFilter(input);\r\n}", "public override string ToString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.Append(\"Commit\");\r\n    r.Append(\"={\\n\");\r\n    r.Append(\"tree \");\r\n    r.Append(treeId != null ? treeId.Name : \"NOT_SET\");\r\n    r.Append(\"\\n\");\r\n    foreach(ObjectId p in parentIds) {\r\n        r.Append(\"parent \");\r\n        r.Append(p.Name);\r\n        r.Append(\"\\n\");\r\n    }\r\n    r.Append(\"author \");\r\n    r.Append(author != null ? author.ToString() : \"NOT_SET\");\r\n    r.Append(\"\\n\");\r\n    r.Append(\"committer \");\r\n    r.Append(committer != null ? committer.ToString() : \"NOT_SET\");\r\n    r.Append(\"\\n\");\r\n    if(encoding != null && encoding != Constants.CHARSET) {\r\n        r.Append(\"encoding \");\r\n        r.Append(encoding.Name());\r\n        r.Append(\"\\n\");\r\n    }\r\n    r.Append(\"\\n\");\r\n    r.Append(message != null ? message : string.Empty);\r\n    r.Append(\"}\");\r\n    return r.ToString();\r\n}", "public IndicNormalizationFilterFactory(IDictionary<string, string> args) : base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateOptionGroupResponse>(request, options);\r\n}", "public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberAccountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateMemberAccountResponse>(request, options);\r\n}", "public virtual void run() {\r\n    this._enclosing.doRefreshProgress(this.mId, this.mProgress, this.mFromUser, true);\r\n    this._enclosing.mRefreshProgressRunnable = this;\r\n}", "public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance;\r\n    return Invoke<SetTerminationProtectionResponse>(request, options);\r\n}", "public virtual string GetErrorHeader(RecognitionException e) {\r\n    int line = e.OffendingToken.Line;\r\n    int charPositionInLine = e.OffendingToken.Column;\r\n    return \"line \" + line + \":\" + charPositionInLine;\r\n}", "public override java.nio.CharBuffer asReadOnlyBuffer() {\r\n    java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\r\n    buf._limit = _limit;\r\n    buf._position = _position;\r\n    buf._mark = _mark;\r\n    buf.byteBuffer._order = byteBuffer._order;\r\n    return buf;\r\n}", "public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance;\r\n    return Invoke<StopSentimentDetectionJobResponse>(request, options);\r\n}", "public virtual ObjectIdSubclassMap<ObjectId> GetNewObjectIds() {\r\n    if(newObjectIds != null) {\r\n        return newObjectIds;\r\n    }\r\n    return new ObjectIdSubclassMap<ObjectId>();\r\n}", "protected internal override void Clear() {\r\n    hash = Hash(new byte[0]);\r\n    base.Clear();\r\n}", "public override void reset() {\r\n    lock(@lock) {\r\n        checkNotClosed();\r\n        if(_mark == -1) {\r\n            throw new System.IO.IOException(\"Invalid mark\");\r\n        }\r\n        pos = _mark;\r\n    }\r\n}", "public RefErrorPtg(ILittleEndianInput in1) {\r\n    field_1_reserved = in1.ReadInt();\r\n}", "public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendGameServerGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance;\r\n    return Invoke<SuspendGameServerGroupResponse>(request, options);\r\n}", "public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {\r\n    if(args.Length != 3) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);\r\n}", "public GetRepoRequest(): base(\"cr\", \"2016-06-07\", \"GetRepo\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]\";\r\n    Method = MethodType.GET;\r\n}", "public virtual void SetDate(DateTime? date) {\r\n    if(date.HasValue) {\r\n        SetDate(DateTools.DateToString(date.Value, DateTools.Resolution.SECOND));\r\n    } else {\r\n        this.date = null;\r\n    }\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new GermanMinimalStemFilter(input);\r\n}", "public override object[] toArray() {\r\n    return (object[])a.Clone();\r\n}", "public override void write(char[] buffer, int offset, int len) {\r\n    java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len);\r\n    lock(@lock) {\r\n        expand(len);\r\n        System.Array.Copy(buffer, offset, this.buf, this.count, len);\r\n        this.count += len;\r\n    }\r\n}", "public static RevFilter After(long ts) {\r\n    return new CommitTimeRevFilterAfter(ts);\r\n}", "public DeleteGroupPolicyRequest(string groupName, string policyName) {\r\n    _groupName = groupName;\r\n    _policyName = policyName;\r\n}", "public virtual DeregisterTransitGatewayMulticastGroupMembersResponse DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance;\r\n    return Invoke<DeregisterTransitGatewayMulticastGroupMembersResponse>(request, options);\r\n}", "public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance;\r\n    return Invoke<BatchDeleteScheduledActionResponse>(request, options);\r\n}", "public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance;\r\n    return Invoke<CreateAlgorithmResponse>(request, options);\r\n}", "public int ReadUByte() {\r\n    CheckPosition(1);\r\n    return _buf[_ReadIndex++] & 0xFF;\r\n}", "public virtual void SetLength(int sz) {\r\n    NB.EncodeInt32(info, infoOffset + P_SIZE, sz);\r\n}", "public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() {\r\n    return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest());\r\n}", "public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance;\r\n    return Invoke<ListResourceRecordSetsResponse>(request, options);\r\n}", "public override IToken RecoverInline(Parser recognizer) {\r\n    InputMismatchException e = new InputMismatchException(recognizer);\r\n    for(ParserRuleContext context = recognizer.Context; context != null; context = ((ParserRuleContext)context.Parent)) {\r\n        context.exception = e;\r\n    }\r\n    throw new ParseCanceledException(e);\r\n}", "public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance;\r\n    return Invoke<SetTagsForResourceResponse>(request, options);\r\n}", "public ModifyStrategyRequest(): base(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeVpcEndpointServicesResponse>(request, options);\r\n}", "public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance;\r\n    return Invoke<EnableLoggingResponse>(request, options);\r\n}", "public override bool contains(object o) {\r\n    return this._enclosing.containsValue(o);\r\n}", "public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier): base(bookName, firstSheetIdentifier) {\r\n    _lastSheetIdentifier = lastSheetIdentifier;\r\n}", "public DomainMetadataRequest(string domainName) {\r\n    _domainName = domainName;\r\n}", "public ParseException(Token currentToken,int[][] expectedTokenSequences,string[] tokenImage): base(Initialize(currentToken, expectedTokenSequences, tokenImage)) {\r\n    this.CurrentToken = currentToken;\r\n    this.ExpectedTokenSequences = expectedTokenSequences;\r\n    this.TokenImage = tokenImage;\r\n}", "public FetchPhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"FetchPhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public java.io.PrintWriter writer() {\r\n    return _writer;\r\n}", "public NGramTokenizerFactory(IDictionary<string, string> args): base(args) {\r\n    minGramSize = GetInt32(args, \"minGramSize\", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);\r\n    maxGramSize = GetInt32(args, \"maxGramSize\", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual bool IsDirectoryFileConflict() {\r\n    return dfConflict != null;\r\n}", "public IndonesianStemFilter(TokenStream input, bool stemDerivational): base(input) {\r\n    this.stemDerivational = stemDerivational;\r\n    termAtt = AddAttribute<ICharTermAttribute>();\r\n    keywordAtt = AddAttribute<IKeywordAttribute>();\r\n}", "public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance;\r\n    return Invoke<CreateTrafficPolicyResponse>(request, options);\r\n}", "public void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteInt(fSD);\r\n    out1.WriteInt(passwordVerifier);\r\n    StringUtil.WriteUnicodeString(out1, title);\r\n    out1.Write(securityDescriptor);\r\n}", "public static double Floor(double n, double s) {\r\n    double f;\r\n    if((n < 0 && s > 0) || (n > 0 && s < 0) || (s == 0 && n != 0)) {\r\n        f = double.NaN;\r\n    } else {\r\n        f = (n == 0 || s == 0) ? 0 : Math.Floor(n / s) * s;\r\n    }\r\n    return f;\r\n}", "public ByteArrayDataOutput(byte[] bytes, int offset, int len) {\r\n    Reset(bytes, offset, len);\r\n}", "public static IList<ITree> GetChildren(ITree t) {\r\n    IList<ITree> kids = new List<ITree>();\r\n    for(int i = 0; i < t.ChildCount; i++) {\r\n        kids.Add(t.GetChild(i));\r\n    }\r\n    return kids;\r\n}", "public override void clear() {\r\n    this._enclosing.clear();\r\n}", "public RefreshAllRecord(bool refreshAll): this(0) {\r\n    RefreshAll = (refreshAll);\r\n}", "public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteNamedQueryResponse>(request, options);\r\n}", "public GraphvizFormatter(ConnectionCosts costs) {\r\n    this.costs = costs;\r\n    this.bestPathMap = new Dictionary<string, string>();\r\n    sb.Append(FormatHeader());\r\n    sb.Append(\"  init [style=invis]\\n\");\r\n    sb.Append(\"  init -> 0.0 [label=\\\"\" + BOS_LABEL + \"\\\"]\\n\");\r\n}", "public CheckMultiagentRequest(): base(\"visionai-poc\", \"2020-04-08\", \"CheckMultiagent\") {\r\n    Method = MethodType.POST;\r\n}", "public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance;\r\n    return Invoke<ListUserProfilesResponse>(request, options);\r\n}", "public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance;\r\n    return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options);\r\n}", "public virtual StartTaskResponse StartTask(StartTaskRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartTaskRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance;\r\n    return Invoke<StartTaskResponse>(request, options);\r\n}", "public virtual ICollection<string> GetIgnoredPaths() {\r\n    return ignoredPaths;\r\n}", "public FeatSmartTag(RecordInputStream in1) {\r\n    data = in1.ReadRemainder();\r\n}", "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {\r\n    _action = action;\r\n    _resourceRecordSet = resourceRecordSet;\r\n}", "public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteImageRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteImageResponse>(request, options);\r\n}", "public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance;\r\n    return Invoke<CreateConfigurationSetResponse>(request, options);\r\n}", "public virtual java.util.Iterator<E> iterator() {\r\n    object[] snapshot = elements;\r\n    return new java.util.concurrent.CopyOnWriteArrayList.CowIterator<E>(snapshot, 0,snapshot.Length);\r\n}", "public override void VisitContainedRecords(RecordVisitor rv) {\r\n    if(_recs.Count==0) {\r\n        return;\r\n    }\r\n    rv.VisitRecord(_bofRec);\r\n    for(int i = 0; i < _recs.Count; i++) {\r\n        RecordBase rb = _recs[i];\r\n        if(rb is RecordAggregate) {\r\n            ((RecordAggregate)rb).VisitContainedRecords(rv);\r\n        } else {\r\n            rv.VisitRecord((Record)rb);\r\n        }\r\n    }\r\n    rv.VisitRecord(EOFRecord.instance);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[FtCbls ]\").Append(\"\\n\");\r\n    buffer.Append(\"  size     = \").Append(DataSize).Append(\"\\n\");\r\n    buffer.Append(\"  reserved = \").Append(HexDump.ToHex(reserved)).Append(\"\\n\");\r\n    buffer.Append(\"[/FtCbls ]\").Append(\"\\n\");\r\n    return buffer.ToString();\r\n}", "public static BATBlock CreateEmptyBATBlock(POIFSBigBlockSize bigBlockSize, bool isXBAT) {\r\n    BATBlock block = new BATBlock(bigBlockSize);\r\n    if(isXBAT) {\r\n        block.SetXBATChain(bigBlockSize, POIFSConstants.END_OF_CHAIN);\r\n    }\r\n    return block;\r\n}", "public virtual TagResourceResponse TagResource(TagResourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TagResourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance;\r\n    return Invoke<TagResourceResponse>(request, options);\r\n}", "public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteMailboxPermissionsResponse>(request, options);\r\n}", "public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance;\r\n    return Invoke<ListDatasetGroupsResponse>(request, options);\r\n}", "public virtual ResumeProcessesResponse ResumeProcesses(ResumeProcessesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance;\r\n    return Invoke<ResumeProcessesResponse>(request, options);\r\n}", "public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance;\r\n    return Invoke<GetPersonTrackingResponse>(request, options);\r\n}", "public String ToFormulaString(String[] operands) {\r\n    if(space.IsSet(field_1_options)) {\r\n        return operands[0];\r\n    } else if(optiIf.IsSet(field_1_options)) {\r\n        return ToFormulaString() + \"(\" + operands[0] + \")\";\r\n    } else if(optiSkip.IsSet(field_1_options)) {\r\n        return ToFormulaString() + operands[0];\r\n    } else {\r\n        return ToFormulaString() + \"(\" + operands[0] + \")\";\r\n    }\r\n}", "public virtual T Merge(T first, T second) {\r\n    throw new System.NotSupportedException();\r\n}", "public override string ToString() {\r\n    return this.m_message.Key + \": \" + GetLocalizedMessage();\r\n}", "public XPath(Parser parser, string path) {\r\n    this.parser = parser;\r\n    this.path = path;\r\n    elements = Split(path);\r\n}", "public CreateAccountAliasRequest(string accountAlias) {\r\n    _accountAlias = accountAlias;\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        var block = blocks[blocksOffset++];\r\n        values[valuesOffset++] = ((int)((uint)block >> 7)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 6)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 5)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 4)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 3)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 2)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 1)) & 1;\r\n        values[valuesOffset++] = block & 1;\r\n    }\r\n}", "public override PushConnection OpenPush() {\r\n    throw new NGit.Errors.NotSupportedException(JGitText.Get().pushIsNotSupportedForBundleTransport);\r\n}", "public static void StrCpy(char[] dst, int di, char[] src, int si) {\r\n    while(src[si] != 0) {\r\n        dst[di++] = src[si++];\r\n    }\r\n    dst[di] = (char)0;\r\n}", "public virtual K getKey() {\r\n    return mapEntry.getKey();\r\n}", "public static int NumNonnull(object[] data) {\r\n    int n = 0;\r\n    if(data == null) {\r\n        return n;\r\n    }\r\n    foreach(object o in data) {\r\n        if(o != null) {\r\n            n++;\r\n        }\r\n    }\r\n    return n;\r\n}", "public override void add(int location, E @object) {\r\n    if(location >= 0 && location <= _size) {\r\n        java.util.LinkedList.Link<E> link = voidLink;\r\n        if(location < (_size / 2)) {\r\n            {\r\n                for(int i = 0; i <= location; i++) {\r\n                    link = link.next;\r\n                }\r\n            }\r\n        } else {\r\n            {\r\n                for(int i = _size; i > location; i--) {\r\n                    link = link.previous;\r\n                }\r\n            }\r\n        }\r\n        java.util.LinkedList.Link<E> previous = link.previous;\r\n        java.util.LinkedList.Link<E> newLink = new java.util.LinkedList.Link<E>(@object,previous, link);\r\n        previous.next = newLink;\r\n        link.previous = newLink;\r\n        _size++;\r\n        modCount++;\r\n    } else {\r\n        throw new System.IndexOutOfRangeException();\r\n    }\r\n}", "public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDomainResponse>(request, options);\r\n}", "public override void flush() {\r\n    throw new System.NotImplementedException();\r\n}", "public PersianCharFilterFactory(IDictionary<string, string> args): base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public override bool IncrementToken() {\r\n    if(used) {\r\n        return false;\r\n    }\r\n    ClearAttributes();\r\n    termAttribute.Append(value);\r\n    offsetAttribute.SetOffset(0, value.Length);\r\n    used = true;\r\n    return true;\r\n}", "public static java.nio.FloatBuffer allocate(int capacity_1) {\r\n    if(capacity_1 < 0) {\r\n        throw new System.ArgumentException();\r\n    }\r\n    return new java.nio.ReadWriteFloatArrayBuffer(capacity_1);\r\n}", "public NGit.Diff.Edit After(NGit.Diff.Edit cut) {\r\n    return new NGit.Diff.Edit(cut.endA, endA, cut.endB, endB);\r\n}", "public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateRuleVersionResponse>(request, options);\r\n}", "public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance;\r\n    return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options);\r\n}", "public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance;\r\n    return Invoke<GetDeploymentTargetResponse>(request, options);\r\n}", "public virtual void SetNoChildReport() {\r\n    letChildReport = false;\r\n    foreach(PerfTask task in tasks) {\r\n        if(task is TaskSequence) {\r\n            ((TaskSequence)task).SetNoChildReport();\r\n        }\r\n    }\r\n}", "public override E get(int location) {\r\n    try {\r\n        return a[location];\r\n    } catch(System.IndexOutOfRangeException) {\r\n        throw java.util.ArrayList<E>.throwIndexOutOfBoundsException(location, a.Length);\r\n    }\r\n}", "public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDataSetResponse>(request, options);\r\n}", "public SkipWorkTreeFilter(int treeIdx) {\r\n    this.treeIdx = treeIdx;\r\n}", "public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() {\r\n    return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest());\r\n}", "public bool Contains(int row, int col) {\r\n    return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;\r\n}", "public override string ToString() {\r\n    return new string(this.chars);\r\n}", "public virtual FileHeader.PatchType GetPatchType() {\r\n    return patchType;\r\n}", "public override java.util.Iterator<K> iterator() {\r\n    return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing);\r\n}", "public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateScriptRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance;\r\n    return Invoke<CreateScriptResponse>(request, options);\r\n}", "public override BytesRef Next() {\r\n    termUpto++;\r\n    if(termUpto >= info.terms.Count) {\r\n        return null;\r\n    } else {\r\n        info.terms.Get(info.sortedTerms[termUpto], br);\r\n        return br;\r\n    }\r\n}", "public override string OutputToString(CharsRef output) {\r\n    return output.ToString();\r\n}", "public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options);\r\n}", "public virtual void Unpop(RevCommit c) {\r\n    BlockRevQueue.Block b = head;\r\n    if(b == null) {\r\n        b = free.NewBlock();\r\n        b.ResetToMiddle();\r\n        b.Add(c);\r\n        head = b;\r\n        tail = b;\r\n        return;\r\n    } else {\r\n        if(b.CanUnpop()) {\r\n            b.Unpop(c);\r\n            return;\r\n        }\r\n    }\r\n    b = free.NewBlock();\r\n    b.ResetToEnd();\r\n    b.Unpop(c);\r\n    b.next = head;\r\n    head = b;\r\n}", "public EdgeNGramTokenizerFactory(IDictionary<string, string> args) : base(args) {\r\n    minGramSize = GetInt32(args, \"minGramSize\", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);\r\n    maxGramSize = GetInt32(args, \"maxGramSize\", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);\r\n    side = Get(args, \"side\", EdgeNGramTokenFilter.Side.FRONT.ToString());\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<Parameter> parameters) {\r\n    _dbParameterGroupName = dbParameterGroupName;\r\n    _parameters = parameters;\r\n}", "public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance;\r\n    return Invoke<GetHostedZoneLimitResponse>(request, options);\r\n}", "public override void Set(int index, long value) {\r\n    int o = (int)((uint)index >> 6);\r\n    int b = index & 63;\r\n    int shift = b << 0;\r\n    blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);\r\n}", "public override RevFilter Clone() {\r\n    return new CommitterRevFilter.PatternSearch(Pattern());\r\n}", "public override string ToString() {\r\n    return \"spans(\" + m_term.ToString() + \")@\" + (m_doc == -1 ? \"START\" : (m_doc == int.MaxValue) ? \"END\" : m_doc + \"-\" + m_position);\r\n}", "public virtual bool CanAppendMatch() {\r\n    for(int i = 0; i < heads.Count; i++) {\r\n        if(heads[i] != LastHead.INSTANCE) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "public override int lastIndexOf(string subString, int start) {\r\n    lock(this) {\r\n        return base.lastIndexOf(subString, start);\r\n    }\r\n}", "public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteNetworkAclEntryResponse>(request, options);\r\n}", "public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateMemberToGroupResponse>(request, options);\r\n}", "public static int Committer(byte[] b, int ptr) {\r\n    int sz = b.Length;\r\n    if(ptr == 0) {\r\n        ptr += 46;\r\n    }\r\n    while(ptr < sz && b[ptr] == 'p') {\r\n        ptr += 48;\r\n    }\r\n    if(ptr < sz && b[ptr] == 'a') {\r\n        ptr = NextLF(b, ptr);\r\n    }\r\n    return Match(b, ptr, ObjectChecker.committer);\r\n}", "public virtual int getLineNumber() {\r\n    return row;\r\n}", "public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) {\r\n    paths.AddItem(path);\r\n    return this;\r\n}", "public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance;\r\n    return Invoke<GetPushTemplateResponse>(request, options);\r\n}", "public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeVaultResponse>(request, options);\r\n}", "public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() {\r\n    return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());\r\n}", "public override java.nio.ByteBuffer putLong(int index, long value) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance;\r\n    return Invoke<RegisterDeviceResponse>(request, options);\r\n}", "public static Format ById(int id) {\r\n    foreach(Format format in Values) {\r\n        if(format.Id == id) {\r\n            return format;\r\n        }\r\n    }\r\n    throw new ArgumentException(\"Unknown format id: \" + id);\r\n}", "public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteAppRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteAppResponse>(request, options);\r\n}", "public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance;\r\n    return Invoke<GetBaiduChannelResponse>(request, options);\r\n}", "public FST.BytesReader GetBytesReader() {\r\n    return fst.GetBytesReader();\r\n}", "public static bool isValidSchemeChar(int index, char c) {\r\n    if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\r\n        return true;\r\n    }\r\n    if(index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance;\r\n    return Invoke<ListAppliedSchemaArnsResponse>(request, options);\r\n}", "public System.Uri BaseUri { get; set; }", "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    if(args.Length < 1) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    bool isA1style;\r\n    String text;\r\n    try {\r\n        ValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex);\r\n        text = OperandResolver.CoerceValueToString(ve);\r\n        switch(args.Length) {\r\n        case 1:\r\n            isA1style = true;\r\n            break;\r\n        case 2:\r\n            isA1style = EvaluateBooleanArg(args[1], ec);\r\n            break;\r\n        default:\r\n            return ErrorEval.VALUE_INVALID;\r\n        }\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    return EvaluateIndirect(ec, text, isA1style);\r\n}", "public int CompareTo(int[] bs, int p) {\r\n    int cmp;\r\n    cmp = NB.CompareUInt32(w1, bs[p]);\r\n    if(cmp != 0) {\r\n        return cmp;\r\n    }\r\n    cmp = NB.CompareUInt32(w2, bs[p + 1]);\r\n    if(cmp != 0) {\r\n        return cmp;\r\n    }\r\n    cmp = NB.CompareUInt32(w3, bs[p + 2]);\r\n    if(cmp != 0) {\r\n        return cmp;\r\n    }\r\n    cmp = NB.CompareUInt32(w4, bs[p + 3]);\r\n    if(cmp != 0) {\r\n        return cmp;\r\n    }\r\n    return NB.CompareUInt32(w5, bs[p + 4]);\r\n}", "public void RemoveName(int index) {\r\n    names.RemoveAt(index);\r\n    workbook.RemoveName(index);\r\n}", "public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) {\r\n    _queueUrl = queueUrl;\r\n    _attributeNames = attributeNames;\r\n}", "public static bool[] copyOf(bool[] original, int newLength) {\r\n    if(newLength < 0) {\r\n        throw new java.lang.NegativeArraySizeException();\r\n    }\r\n    return copyOfRange(original, 0, newLength);\r\n}", "public static void setEnabled(bool enabled) {\r\n    ENABLED = enabled;\r\n}", "public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteLogPatternResponse>(request, options);\r\n}", "public virtual bool Contains(char[] text, int offset, int length) {\r\n    return map.ContainsKey(text, offset, length);\r\n}", "public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) {\r\n    return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber);\r\n}", "public virtual bool Handles(string commandLine) {\r\n    return command.Length + 1 < commandLine.Length && commandLine[command.Length] ==' ' && commandLine.StartsWith(command);\r\n}", "public static void Register(MergeStrategy imp) {\r\n    Register(imp.GetName(), imp);\r\n}", "public long RamBytesUsed() {\r\n    return ((index != null) ? index.GetSizeInBytes() : 0);\r\n}", "public HostedZone(string id, string name, string callerReference) {\r\n    _id = id;\r\n    _name = name;\r\n    _callerReference = callerReference;\r\n}", "public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetFindingsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance;\r\n    return Invoke<GetFindingsResponse>(request, options);\r\n}", "public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeTopicsDetectionJobResponse>(request, options);\r\n}", "public bool ProcessMatch(ValueEval eval) {\r\n    if(eval is NumericValueEval) {\r\n        if(minimumValue == null) {\r\n            minimumValue = eval;\r\n        } else {\r\n            double currentValue = ((NumericValueEval)eval).NumberValue;\r\n            double oldValue = ((NumericValueEval)minimumValue).NumberValue;\r\n            if(currentValue < oldValue) {\r\n                minimumValue = eval;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}", "public override void Write(ILittleEndianOutput out1) {\r\n    out1.WriteByte(sid + PtgClass);\r\n    out1.WriteShort(field_1_len_ref_subexpression);\r\n}", "public static int Main(string[] args) {\r\n    bool printTree = false;\r\n    string path = null;\r\n    for(int i = 0; i < args.Length; i++) {\r\n        if(args[i].Equals(\"-printTree\", StringComparison.Ordinal)) {\r\n            printTree = true;\r\n        } else {\r\n            path = args[i];\r\n        }\r\n    }\r\n    if(args.Length != (printTree ? 2 : 1)) {\r\n        throw new ArgumentException();\r\n    }\r\n    using(Store.Directory dir = FSDirectory.Open(new DirectoryInfo(path))) {\r\n        using(var r = new DirectoryTaxonomyReader(dir)) {\r\n            PrintStats(r, System.Console.Out, printTree);\r\n        }\r\n    }\r\n    return 0;\r\n}", "public virtual void SetByteValue(byte value) {\r\n    if(!(FieldsData is Byte)) {\r\n        throw new System.ArgumentException(\"cannot change value type from \" + FieldsData.GetType().Name + \" to Byte\");\r\n    }\r\n    FieldsData = new Byte(value);\r\n}", "public static int Initialize() {\r\n    return Initialize(DefaultSeed);\r\n}", "public CachingDoubleValueSource(ValueSource source) {\r\n    this.m_source = source;\r\n    m_cache = new JCG.Dictionary<int, double>();\r\n}", "public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) {\r\n    _attributeName = attributeName;\r\n    _attributeType = attributeType;\r\n}", "public static string Join(ICollection<string> parts, string separator) {\r\n    return NGit.Util.StringUtils.Join(parts, separator, separator);\r\n}", "public virtual ListTaskDefinitionFamiliesResponse ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListTaskDefinitionFamiliesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListTaskDefinitionFamiliesResponseUnmarshaller.Instance;\r\n    return Invoke<ListTaskDefinitionFamiliesResponse>(request, options);\r\n}", "public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListComponentsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance;\r\n    return Invoke<ListComponentsResponse>(request, options);\r\n}", "public ActivatePhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ActivatePhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance;\r\n    return Invoke<CreateMatchmakingRuleSetResponse>(request, options);\r\n}", "public virtual ListAvailableManagementCidrRangesResponse ListAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListAvailableManagementCidrRangesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListAvailableManagementCidrRangesResponseUnmarshaller.Instance;\r\n    return Invoke<ListAvailableManagementCidrRangesResponse>(request, options);\r\n}", "public virtual ObjectIdSubclassMap<ObjectId> GetBaseObjectIds() {\r\n    if(baseObjectIds != null) {\r\n        return baseObjectIds;\r\n    }\r\n    return new ObjectIdSubclassMap<ObjectId>();\r\n}", "public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance;\r\n    return Invoke<DeletePushTemplateResponse>(request, options);\r\n}", "public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDomainEntryResponse>(request, options);\r\n}", "public static int GetEncodedSize(Array values) {\r\n    int result = values.Length * 1;\r\n    for(int i = 0; i < values.Length; i++) {\r\n        result += GetEncodedSize(values.GetValue(i));\r\n    }\r\n    return result;\r\n}", "public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) {\r\n    sentenceModelFile = Require(args, SENTENCE_MODEL);\r\n    tokenizerModelFile = Require(args, TOKENIZER_MODEL);\r\n    if(args.Any()) {\r\n        throw new ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public sealed override int getInt(int index) {\r\n    checkIndex(index, libcore.io.SizeOf.INT);\r\n    return libcore.io.Memory.peekInt(backingArray, offset + index, _order);\r\n}", "public virtual IList<Head> GetNextHeads(char c) {\r\n    if(Matches(c)) {\r\n        return newHeads;\r\n    } else {\r\n        return FileNameMatcher.EMPTY_HEAD_LIST;\r\n    }\r\n}", "public override java.nio.ByteBuffer putShort(short value) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual void writeUnshared(object @object) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual int offsetByCodePoints(int index, int codePointOffset) {\r\n    return Sharpen.CharHelper.OffsetByCodePoints(value, 0, count, index, codePointOffset);\r\n}", "public static int GetUniqueAlt(IEnumerable<BitSet> altsets) {\r\n    BitSet all = GetAlts(altsets);\r\n    if(all.Cardinality() == 1) {\r\n        return all.NextSetBit(0);\r\n    }\r\n    return ATN.INVALID_ALT_NUMBER;\r\n}", "public virtual DateTime GetWhen() {\r\n    return Sharpen.Extensions.CreateDate(when);\r\n}", "public RuleTagToken(string ruleName, int bypassTokenType, string label) {\r\n    if(string.IsNullOrEmpty(ruleName)) {\r\n        throw new ArgumentException(\"ruleName cannot be null or empty.\");\r\n    }\r\n    this.ruleName = ruleName;\r\n    this.bypassTokenType = bypassTokenType;\r\n    this.label = label;\r\n}", "public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance;\r\n    return Invoke<DisableOrganizationAdminAccountResponse>(request, options);\r\n}", "public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateRoomRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance;\r\n    return Invoke<CreateRoomResponse>(request, options);\r\n}", "public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteReplicationGroupResponse>(request, options);\r\n}", "public java.nio.CharBuffer decode(java.nio.ByteBuffer buffer) {\r\n    try {\r\n        return newDecoder().onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE).onUnmappableCharacter(java.nio.charset.CodingErrorAction.REPLACE).decode(buffer);\r\n    } catch(java.nio.charset.CharacterCodingException ex) {\r\n        throw new System.Exception(ex.Message, ex);\r\n    }\r\n}", "public Distribution(string id, string status, string domainName) {\r\n    _id = id;\r\n    _status = status;\r\n    _domainName = domainName;\r\n}", "public sealed override object array() {\r\n    return protectedArray();\r\n}", "public DateWindow1904Record(RecordInputStream in1) {\r\n    field_1_window = in1.ReadShort();\r\n}", "public DeleteDBSnapshotRequest(string dbSnapshotIdentifier) {\r\n    _dbSnapshotIdentifier = dbSnapshotIdentifier;\r\n}", "public ParserExtension GetExtension(string key) {\r\n    if(key == null || !this.extensions.TryGetValue(key, out ParserExtension value)) return null;\r\n    return value;\r\n}", "public virtual void Inform(IResourceLoader loader) {\r\n    try {\r\n        if(chunkerModelFile != null) {\r\n            OpenNLPOpsFactory.GetChunkerModel(chunkerModelFile, loader);\r\n        }\r\n    } catch(IOException e) {\r\n        throw new ArgumentException(e.ToString(), e);\r\n    }\r\n}", "public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance;\r\n    return Invoke<CompleteVaultLockResponse>(request, options);\r\n}", "public int[] GetCharIntervals() {\r\n    return (int[])(Array)_points.Clone();\r\n}", "public long RamBytesUsed() {\r\n    return RamUsageEstimator.AlignObjectSize(3 * RamUsageEstimator.NUM_BYTES_OBJECT_REF + 2 * RamUsageEstimator.NUM_BYTES_INT32)+ RamUsageEstimator.SizeOf(data)+ positions.RamBytesUsed()+ wordNums.RamBytesUsed();\r\n}", "public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance;\r\n    return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options);\r\n}", "public DescribeClusterUserKubeconfigRequest(): base(\"CS\", \"2015-12-15\", \"DescribeClusterUserKubeconfig\", \"cs\", \"openAPI\") {\r\n    UriPattern = \"/k8s/[ClusterId]/user_config\";\r\n    Method = MethodType.GET;\r\n}", "public PrecisionRecord(RecordInputStream in1) {\r\n    field_1_precision = in1.ReadShort();\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(LeftRowGutter);\r\n    out1.WriteShort(TopColGutter);\r\n    out1.WriteShort(RowLevelMax);\r\n    out1.WriteShort(ColLevelMax);\r\n}", "public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteVirtualInterfaceResponse>(request, options);\r\n}", "public Entry GetEntry(String name) {\r\n    if(excludes.Contains(name)) {\r\n        throw new FileNotFoundException(name);\r\n    }\r\n    Entry entry = directory.GetEntry(name);\r\n    return WrapEntry(entry);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[BACKUP]\\n\");\r\n    buffer.Append(\"    .backup          = \").Append(StringUtil.ToHexString(Backup)).Append(\"\\n\");\r\n    buffer.Append(\"[/BACKUP]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options);\r\n}", "public virtual OpenStringBuilder Append(char c) {\r\n    Write(c);\r\n    return this;\r\n}", "public static long GenerationFromSegmentsFileName(string fileName) {\r\n    if(fileName.Equals(IndexFileNames.SEGMENTS, StringComparison.Ordinal)) {\r\n        return 0;\r\n    } else if(fileName.StartsWith(IndexFileNames.SEGMENTS, StringComparison.Ordinal)) {\r\n        return Number.Parse(fileName.Substring(1 + IndexFileNames.SEGMENTS.Length), Character.MaxRadix);\r\n    } else {\r\n        throw new System.ArgumentException(\"fileName \\\"\" + fileName + \"\\\" is not a segments file\");\r\n    }\r\n}", "public static NGit.Transport.TagOpt FromOption(string o) {\r\n    if(o == null || o.Length == 0) {\r\n        return AUTO_FOLLOW;\r\n    }\r\n    foreach(NGit.Transport.TagOpt tagopt in Values()) {\r\n        if(tagopt.Option().Equals(o)) {\r\n            return tagopt;\r\n        }\r\n    }\r\n    throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidTagOption,o));\r\n}", "public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance;\r\n    return Invoke<StartContentModerationResponse>(request, options);\r\n}", "public static string quoteReplacement(string s) {\r\n    java.lang.StringBuilder result = new java.lang.StringBuilder(s.Length);\r\n    {\r\n        for(int i = 0; i < s.Length; i++) {\r\n            char c = s[i];\r\n            if(c == '\\\\' || c == '$') {\r\n                result.append('\\\\');\r\n            }\r\n            result.append(c);\r\n        }\r\n    }\r\n    return result.ToString();\r\n}", "public void set(V newValue) {\r\n    value = newValue;\r\n}", "public QueryParserTokenManager(ICharStream stream) {\r\n    InitBlock();\r\n    m_input_stream = stream;\r\n}", "public long ValueFor(double elapsed) {\r\n    double val;\r\n    if(modBy == 0)val = elapsed / factor;\r\n    elseval = elapsed / factor % modBy;\r\n    if(type == '0')return (long)Math.Round(val);\r\n    elsereturn(long)val;\r\n}", "public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) {\r\n    byteBuffer.limit(_limit * libcore.io.SizeOf.LONG);\r\n    byteBuffer.position(_position * libcore.io.SizeOf.LONG);\r\n    if(byteBuffer is java.nio.DirectByteBuffer) {\r\n        ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount);\r\n    } else {\r\n        ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount);\r\n    }\r\n    this._position += longCount;\r\n    return this;\r\n}", "public virtual void RemoveErrorListeners() {\r\n    _listeners = new IAntlrErrorListener<Symbol>[0];\r\n}", "public CommonTokenStream(ITokenSource tokenSource, int channel): this(tokenSource) {\r\n    this.channel = channel;\r\n}", "public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance;\r\n    return Invoke<ListObjectPoliciesResponse>(request, options);\r\n}", "public ObjectToPack(AnyObjectId src, int type) : base(src) {\r\n    flags = type << TYPE_SHIFT;\r\n}", "public virtual int Stem(char[] s, int len) {\r\n    int numVowels_Renamed = NumVowels(s, len);\r\n    for(int i = 0; i < affixes.Length; i++) {\r\n        Affix affix = affixes[i];\r\n        if(numVowels_Renamed > affix.vc && len >= affix.affix.Length + 3 && StemmerUtil.EndsWith(s, len, affix.affix)) {\r\n            len -= affix.affix.Length;\r\n            return affix.palatalizes ? Unpalatalize(s, len) : len;\r\n        }\r\n    }\r\n    return len;\r\n}", "public virtual void Recover(Parser recognizer, RecognitionException e) {\r\n    if(lastErrorIndex == ((ITokenStream)recognizer.InputStream).Index && lastErrorStates != null && lastErrorStates.Contains(recognizer.State)) {\r\n        recognizer.Consume();\r\n    }\r\n    lastErrorIndex = ((ITokenStream)recognizer.InputStream).Index;\r\n    if(lastErrorStates == null) {\r\n        lastErrorStates = new IntervalSet();\r\n    }\r\n    lastErrorStates.Add(recognizer.State);\r\n    IntervalSet followSet = GetErrorRecoverySet(recognizer);\r\n    ConsumeUntil(recognizer, followSet);\r\n}", "public override String ToFormulaString() {\r\n    String value = field_3_string;\r\n    int len = value.Length;\r\n    StringBuilder sb = new StringBuilder(len + 4);\r\n    sb.Append(FORMULA_DELIMITER);\r\n    for(int i = 0; i < len; i++) {\r\n        char c = value[i];\r\n        if(c == FORMULA_DELIMITER) {\r\n            sb.Append(FORMULA_DELIMITER);\r\n        }\r\n        sb.Append(c);\r\n    }\r\n    sb.Append(FORMULA_DELIMITER);\r\n    return sb.ToString();\r\n}", "public UnlinkFaceRequest(): base(\"LinkFace\", \"2018-07-20\", \"UnlinkFace\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n    Method = MethodType.POST;\r\n}", "public ConfigurationOptionSetting(string awsNamespace, string optionName, string value) {\r\n    _awsNamespace = awsNamespace;\r\n    _optionName = optionName;\r\n    _value = value;\r\n}", "public override string GetFully(string key) {\r\n    StringBuilder result = new StringBuilder(m_tries.Count * 2);\r\n    for(int i = 0; i < m_tries.Count; i++) {\r\n        string r = m_tries[i].GetFully(key);\r\n        if(r == null || (r.Length == 1 && r[0] == EOM)) {\r\n            return result.ToString();\r\n        }\r\n        result.Append(r);\r\n    }\r\n    return result.ToString();\r\n}", "public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options);\r\n}", "public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance;\r\n    return Invoke<GetApiMappingResponse>(request, options);\r\n}", "public HttpRequest(string strUrl) {\r\n    Url = strUrl;\r\n    Headers = new Dictionary<string, string>();\r\n}", "public MemFuncPtg(int subExprLen) {\r\n    field_1_len_ref_subexpression = subExprLen;\r\n}", "public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string field, IComparer<TermStats> comparer) {\r\n    TermStatsQueue tiq = null;\r\n    if(field != null) {\r\n        Fields fields = MultiFields.GetFields(reader);\r\n        if(fields == null) {\r\n            throw new Exception(\"field \" + field + \" not found\");\r\n        }\r\n        Terms terms = fields.GetTerms(field);\r\n        if(terms != null) {\r\n            TermsEnum termsEnum = terms.GetIterator(null);\r\n            tiq = new TermStatsQueue(numTerms, comparer);\r\n            tiq.Fill(field, termsEnum);\r\n        }\r\n    } else {\r\n        Fields fields = MultiFields.GetFields(reader);\r\n        if(fields == null) {\r\n            throw new Exception(\"no fields found for this index\");\r\n        }\r\n        tiq = new TermStatsQueue(numTerms, comparer);\r\n        foreach(string fieldName in fields) {\r\n            Terms terms = fields.GetTerms(fieldName);\r\n            if(terms != null) {\r\n                tiq.Fill(fieldName, terms.GetIterator(null));\r\n            }\r\n        }\r\n    }\r\n    TermStats[] result = new TermStats[tiq.Count];\r\n    int count = tiq.Count - 1;\r\n    while(tiq.Count != 0) {\r\n        result[count] = tiq.Pop();\r\n        count--;\r\n    }\r\n    return result;\r\n}", "public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteApnsVoipChannelResponse>(request, options);\r\n}", "public virtual ListFacesResponse ListFaces(ListFacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListFacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance;\r\n    return Invoke<ListFacesResponse>(request, options);\r\n}", "public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<IPoint> provider, IPoint from, double multiplier) {\r\n    this.ctx = ctx;\r\n    this.from = from;\r\n    this.provider = provider;\r\n    this.multiplier = multiplier;\r\n}", "public override char get(int index) {\r\n    checkIndex(index);\r\n    return sequence[index];\r\n}", "public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateConfigurationProfileResponse>(request, options);\r\n}", "public virtual DescribeLifecycleHooksResponse DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeLifecycleHooksRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeLifecycleHooksResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeLifecycleHooksResponse>(request, options);\r\n}", "public virtual DescribeHostReservationsResponse DescribeHostReservations(DescribeHostReservationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeHostReservationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeHostReservationsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeHostReservationsResponse>(request, options);\r\n}", "public static PredictionContext FromRuleContext(ATN atn, RuleContext outerContext) {\r\n    if(outerContext == null)outerContext = ParserRuleContext.EMPTY;\r\n    if(outerContext.Parent == null || outerContext == ParserRuleContext.EMPTY)return PredictionContext.EMPTY;\r\n    PredictionContext parent = PredictionContext.FromRuleContext(atn, outerContext.Parent);\r\n    ATNState state = atn.states[outerContext.invokingState];\r\n    RuleTransition transition = (RuleTransition)state.Transition(0);\r\n    return parent.GetChild(transition.followState.stateNumber);\r\n}", "public override string ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[SXVDEX]\\n\");\r\n    buffer.Append(\"    .grbit1 =\").Append(HexDump.IntToHex(grbit1)).Append(\"\\n\");\r\n    buffer.Append(\"    .grbit2 =\").Append(HexDump.ByteToHex(grbit2)).Append(\"\\n\");\r\n    buffer.Append(\"    .citmShow =\").Append(HexDump.ByteToHex(citmShow)).Append(\"\\n\");\r\n    buffer.Append(\"    .isxdiSort =\").Append(HexDump.ShortToHex(isxdiSort)).Append(\"\\n\");\r\n    buffer.Append(\"    .isxdiShow =\").Append(HexDump.ShortToHex(isxdiShow)).Append(\"\\n\");\r\n    buffer.Append(\"    .subName =\").Append(subName).Append(\"\\n\");\r\n    buffer.Append(\"[/SXVDEX]\\n\");\r\n    return buffer.ToString();\r\n}", "public override string ToString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.Append(\"BlameResult: \");\r\n    r.Append(GetResultPath());\r\n    return r.ToString();\r\n}", "public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance;\r\n    return Invoke<ListChangeSetsResponse>(request, options);\r\n}", "public virtual bool IsAllowNonFastForwards() {\r\n    return allowNonFastForwards;\r\n}", "public FeatRecord() {\r\n    futureHeader = new FtrHeader();\r\n    futureHeader.RecordType = (sid);\r\n}", "public override java.nio.ShortBuffer put(short c) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public virtual void SetQuery(string query) {\r\n    this.query = query;\r\n    this.m_message = new Message(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, \"\");\r\n}", "public virtual StashApplyCommand StashApply() {\r\n    return new StashApplyCommand(repo);\r\n}", "public ICollection NameSet() {\r\n    return dictionaryNameToID.Keys;\r\n}", "public static int getEffectivePort(string scheme, int specifiedPort) {\r\n    if(specifiedPort != -1) {\r\n        return specifiedPort;\r\n    }\r\n    if(Sharpen.StringHelper.EqualsIgnoreCase(\"http\", scheme)) {\r\n        return 80;\r\n    } else {\r\n        if(Sharpen.StringHelper.EqualsIgnoreCase(\"https\", scheme)) {\r\n            return 443;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n}", "public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance;\r\n    return Invoke<ListAssessmentTemplatesResponse>(request, options);\r\n}", "public virtual RestoreFromClusterSnapshotResponse RestoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RestoreFromClusterSnapshotRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RestoreFromClusterSnapshotResponseUnmarshaller.Instance;\r\n    return Invoke<RestoreFromClusterSnapshotResponse>(request, options);\r\n}", "public void AddShape(HSSFShape shape) {\r\n    shape.Patriarch = (this.Patriarch);\r\n    shape.Parent = (this);\r\n    shapes.Add(shape);\r\n}", "public override bool Equals(object o) {\r\n    if(this == o) return true;\r\n    if(o == null || GetType() != o.GetType()) return false;\r\n    FacetEntry that = (FacetEntry)o;\r\n    if(count != that.count) return false;\r\n    if(!value.Equals(that.value)) return false;\r\n    return true;\r\n}", "public static int Prev(byte[] b, int ptr, char chrA) {\r\n    if(ptr == b.Length) {\r\n        --ptr;\r\n    }\r\n    while(ptr >= 0) {\r\n        if(b[ptr--] == chrA) {\r\n            return ptr;\r\n        }\r\n    }\r\n    return ptr;\r\n}", "public virtual bool IsDeltaRepresentation() {\r\n    return deltaBase != null;\r\n}", "public virtual IToken EmitEOF() {\r\n    int cpos = Column;\r\n    int line = Line;\r\n    IToken eof = _factory.Create(_tokenFactorySourcePair, TokenConstants.EOF, null, TokenConstants.DefaultChannel, _input.Index, _input.Index - 1, line, cpos);\r\n    Emit(eof);\r\n    return eof;\r\n}", "public UpdateUserRequest(string userName) {\r\n    _userName = userName;\r\n}", "public virtual RevFilter Negate() {\r\n    return NotRevFilter.Create(this);\r\n}", "public virtual void SetTagger(PersonIdent taggerIdent) {\r\n    tagger = taggerIdent;\r\n}", "public static BufferSize Automatic() {\r\n    long max, total, free;\r\n    using(var proc = Process.GetCurrentProcess()) {\r\n        max = proc.PeakVirtualMemorySize64;\r\n        total = proc.VirtualMemorySize64;\r\n        free = proc.PrivateMemorySize64;\r\n    }\r\n    long totalAvailableBytes = max - total + free;\r\n    long sortBufferByteSize = free / 2;\r\n    long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;\r\n    if(sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) {\r\n        if(totalAvailableBytes / 2 > minBufferSizeBytes) {\r\n            sortBufferByteSize = totalAvailableBytes / 2;\r\n        } else {\r\n            sortBufferByteSize = Math.Max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);\r\n        }\r\n    }\r\n    return new BufferSize(Math.Min((long)int.MaxValue, sortBufferByteSize));\r\n}", "public static int TrimTrailingWhitespace(byte[] raw, int start, int end) {\r\n    int ptr = end - 1;\r\n    while(start <= ptr && IsWhitespace(raw[ptr])) {\r\n        ptr--;\r\n    }\r\n    return ptr + 1;\r\n}", "public TopMarginRecord(RecordInputStream in1) {\r\n    field_1_margin = in1.ReadDouble();\r\n}", "public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {\r\n    _infoType = infoType;\r\n}", "public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance;\r\n    return Invoke<CreatePlayerSessionsResponse>(request, options);\r\n}", "public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateProxySessionResponse>(request, options);\r\n}", "public virtual int GetObjectType() {\r\n    return type;\r\n}", "public virtual string GetScheme() {\r\n    return scheme;\r\n}", "public override void Characters(char[] ch, int start, int length) {\r\n    contents.Append(ch, start, length);\r\n}", "public FetchAlbumTagPhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"FetchAlbumTagPhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteMembersResponse>(request, options);\r\n}", "public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance;\r\n    return Invoke<GetContactReachabilityStatusResponse>(request, options);\r\n}", "public override bool remove(object o) {\r\n    lock(this._enclosing) {\r\n        int oldSize = this._enclosing._size;\r\n        this._enclosing.remove(o);\r\n        return this._enclosing._size != oldSize;\r\n    }\r\n}", "public virtual E last() {\r\n    return backingMap.lastKey();\r\n}", "public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateStreamingDistributionResponse>(request, options);\r\n}", "public bool isAbsolute() {\r\n    return absolute;\r\n}", "public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance;\r\n    return Invoke<DisableAddOnResponse>(request, options);\r\n}", "public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeAliasResponse>(request, options);\r\n}", "public override void Next(int delta) {\r\n    while(--delta >= 0) {\r\n        if(currentSubtree != null) {\r\n            ptr += currentSubtree.GetEntrySpan();\r\n        } else {\r\n            ptr++;\r\n        }\r\n        if(Eof) {\r\n            break;\r\n        }\r\n        ParseEntry();\r\n    }\r\n}", "public override RevFilter Clone() {\r\n    return new AndRevFilter.Binary(a.Clone(), b.Clone());\r\n}", "public override TextReader Create(TextReader input) {\r\n    return new PersianCharFilter(input);\r\n}", "public virtual string Option() {\r\n    return option;\r\n}", "public override string ToString() {\r\n    var sb = new StringBuilder(\"[\");\r\n    foreach(var item in this) {\r\n        if(sb.Length > 1) {\r\n            sb.Append(\", \");\r\n        }\r\n        sb.Append(item);\r\n    }\r\n    return sb.Append(']').ToString();\r\n}", "public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeSignalingChannelResponse>(request, options);\r\n}", "public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance;\r\n    return Invoke<AttachStaticIpResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);\r\n    CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);\r\n    sb.Append(GetType().Name);\r\n    sb.Append(\" [\").Append(crA.FormatAsString()).Append(':').Append(crB.FormatAsString()).Append(\"]\");\r\n    return sb.ToString();\r\n}", "public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) : base() {\r\n    _delegatePostingsFormat = delegatePostingsFormat;\r\n    _bloomFilterFactory = bloomFilterFactory;\r\n}", "public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance;\r\n    return Invoke<ListTemplatesResponse>(request, options);\r\n}", "public TimerThread(long resolution, Counter counter): base(THREAD_NAME) {\r\n    this.resolution = resolution;\r\n    this.counter = counter;\r\n    this.IsBackground = (true);\r\n}", "public DrawingRecord() {\r\n    recordData = EMPTY_BYTE_ARRAY;\r\n}", "public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance;\r\n    return Invoke<ListDirectoriesResponse>(request, options);\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        var block = blocks[blocksOffset++];\r\n        values[valuesOffset++] = ((int)((uint)block >> 7)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 6)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 5)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 4)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 3)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 2)) & 1;\r\n        values[valuesOffset++] = ((int)((uint)block >> 1)) & 1;\r\n        values[valuesOffset++] = block & 1;\r\n    }\r\n}", "public virtual GroupingSearch DisableCaching() {\r\n    this.maxCacheRAMMB = null;\r\n    this.maxDocsToCache = null;\r\n    return this;\r\n}", "public static int idealByteArraySize(int need) {\r\n    {\r\n        for(int i = 4; i < 32; i++) {\r\n            if(need <= (1 << i) - 12) {\r\n                return (1 << i) - 12;\r\n            }\r\n        }\r\n    }\r\n    return need;\r\n}", "public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateAssessmentTargetResponse>(request, options);\r\n}", "public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyVolumeResponse>(request, options);\r\n}", "public override Cell Merge(Cell m, Cell e) {\r\n    if(m.cmd == e.cmd && m.@ref == e.@ref && m.skip == e.skip) {\r\n        Cell c = new Cell(m);\r\n        c.cnt += e.cnt;\r\n        return c;\r\n    } else {\r\n        return null;\r\n    }\r\n}", "public override ByteBuffer Read(int length, long position) {\r\n    if(position >= Size)throw new ArgumentException(\"Position \" + position + \" past the end of the file\");\r\n    ByteBuffer dst;\r\n    int worked = -1;\r\n    if(writable) {\r\n        dst = ByteBuffer.CreateBuffer(length);\r\n        worked = 0;\r\n    } else {\r\n        fileStream.Position = position;\r\n        dst = ByteBuffer.CreateBuffer(length);\r\n        worked = IOUtils.ReadFully(fileStream, dst.Buffer);\r\n    }\r\n    if(worked == -1)throw new ArgumentException(\"Position \" + position + \" past the end of the file\");\r\n    dst.Position = 0;\r\n    return dst;\r\n}", "public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance;\r\n    return Invoke<RespondActivityTaskCompletedResponse>(request, options);\r\n}", "public void incrementProgressBy(int diff) {\r\n    lock(this) {\r\n        setProgress(mProgress + diff);\r\n    }\r\n}", "public virtual WorkingTreeIterator.MetadataDiff CompareMetadata(DirCacheEntry entry) {\r\n    if(entry.IsAssumeValid) {\r\n        return WorkingTreeIterator.MetadataDiff.EQUAL;\r\n    }\r\n    if(entry.IsUpdateNeeded) {\r\n        return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;\r\n    }\r\n    if(!entry.IsSmudged && entry.Length != (int)GetEntryLength()) {\r\n        return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;\r\n    }\r\n    if(IsModeDifferent(entry.RawMode)) {\r\n        return WorkingTreeIterator.MetadataDiff.DIFFER_BY_METADATA;\r\n    }\r\n    long cacheLastModified = entry.LastModified;\r\n    long fileLastModified = GetEntryLastModified();\r\n    if(cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0) {\r\n        cacheLastModified = cacheLastModified - cacheLastModified % 1000;\r\n        fileLastModified = fileLastModified - fileLastModified % 1000;\r\n    }\r\n    if(fileLastModified != cacheLastModified) {\r\n        return WorkingTreeIterator.MetadataDiff.DIFFER_BY_TIMESTAMP;\r\n    } else {\r\n        if(!entry.IsSmudged) {\r\n            return WorkingTreeIterator.MetadataDiff.EQUAL;\r\n        } else {\r\n            return WorkingTreeIterator.MetadataDiff.SMUDGED;\r\n        }\r\n    }\r\n}", "public static NumberRecord ConvertToNumberRecord(RKRecord rk) {\r\n    NumberRecord num = new NumberRecord();\r\n    num.Column = (rk.Column);\r\n    num.Row = (rk.Row);\r\n    num.XFIndex = (rk.XFIndex);\r\n    num.Value = (rk.RKNumber);\r\n    return num;\r\n}", "public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) {\r\n    byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR);\r\n    byteBuffer.position(_position * libcore.io.SizeOf.CHAR);\r\n    if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) {\r\n        ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount);\r\n    } else {\r\n        ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount);\r\n    }\r\n    this._position += charCount;\r\n    return this;\r\n}", "public int GetCells() {\r\n    int size = 0;\r\n    foreach(char c in cells.Keys) {\r\n        Cell e = At(c);\r\n        if(e.cmd >= 0 || e.@ref >= 0) {\r\n            size++;\r\n        }\r\n    }\r\n    return size;\r\n}", "public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) {\r\n    NameType nameType = (NameType)Enum.Parse(typeof(NameType), Get(args, \"nameType\", NameType.GENERIC.ToString()), true);\r\n    RuleType ruleType = (RuleType)Enum.Parse(typeof(RuleType), Get(args, \"ruleType\", RuleType.APPROX.ToString()), true);\r\n    bool concat = GetBoolean(args, \"concat\", true);\r\n    engine = new PhoneticEngine(nameType, ruleType, concat);\r\n    ISet<string> langs = GetSet(args, \"languageSet\");\r\n    languageSet = (null == langs || (1 == langs.Count && langs.Contains(\"auto\"))) ? null : LanguageSet.From(langs);\r\n    if(!(args.Count == 0)) {\r\n        throw new ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public static double varp(double[] v) {\r\n    double r = Double.NaN;\r\n    if(v != null && v.Length > 1) {\r\n        r = devsq(v) / v.Length;\r\n    }\r\n    return r;\r\n}", "public PersianNormalizationFilterFactory(IDictionary<string, string> args) : base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public static WeightedTerm[] GetTerms(Query query, bool prohibited, string fieldName) {\r\n    var terms = new JCG.HashSet<WeightedTerm>();\r\n    if(fieldName != null) {\r\n        fieldName = fieldName.Intern();\r\n    }\r\n    GetTerms(query, terms, prohibited, fieldName);\r\n    return terms.ToArray();\r\n}", "public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDocumentationPartResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[CHART]\\n\");\r\n    buffer.Append(\"    .x                    = \").Append(\"0x\").Append(HexDump.ToHex(X)).Append(\" (\").Append(X).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"    .y                    = \").Append(\"0x\").Append(HexDump.ToHex(Y)).Append(\" (\").Append(Y).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"    .width                = \").Append(\"0x\").Append(HexDump.ToHex(Width)).Append(\" (\").Append(Width).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"    .height               = \").Append(\"0x\").Append(HexDump.ToHex(Height)).Append(\" (\").Append(Height).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"[/CHART]\\n\");\r\n    return buffer.ToString();\r\n}", "public sealed override short get(int index) {\r\n    checkIndex(index);\r\n    return backingArray[offset + index];\r\n}", "public override string ToString() {\r\n    return Image;\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {\r\n    try {\r\n        AreaEval reA = EvaluateRef(arg0);\r\n        AreaEval reB = EvaluateRef(arg1);\r\n        AreaEval result = ResolveRange(reA, reB);\r\n        if(result == null) {\r\n            return ErrorEval.NULL_INTERSECTION;\r\n        }\r\n        return result;\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n}", "public virtual void Clear() {\r\n    weightBySpanQuery.Clear();\r\n}", "public virtual int FindEndOffset(StringBuilder buffer, int start) {\r\n    if(start > buffer.Length || start < 0) return start;\r\n    bi.SetText(buffer.ToString(start, buffer.Length - start));\r\n    return bi.Next() + start;\r\n}", "public SrndQuery PrimaryQuery() {\r\n    SrndQuery q;\r\n    switch((jj_ntk == -1) ? Jj_ntk() : jj_ntk) {\r\n    case RegexpToken.LPAREN:\r\n        Jj_consume_token(RegexpToken.LPAREN);\r\n        q = FieldsQuery();\r\n        Jj_consume_token(RegexpToken.RPAREN);\r\n        break;\r\n    case RegexpToken.OR:\r\n    case RegexpToken.AND:\r\n    case RegexpToken.W:\r\n    case RegexpToken.N:\r\n        q = PrefixOperatorQuery();\r\n        break;\r\n    case RegexpToken.TRUNCQUOTED:\r\n    case RegexpToken.QUOTED:\r\n    case RegexpToken.SUFFIXTERM:\r\n    case RegexpToken.TRUNCTERM:\r\n    case RegexpToken.TERM:\r\n        q = SimpleTerm();\r\n        break;\r\n    default:\r\n        jj_la1[5] = jj_gen;\r\n        Jj_consume_token(-1);\r\n        throw new ParseException();\r\n    }\r\n    OptionalWeights(q);\r\n    {\r\n        if(true) return q;\r\n    }\r\n    throw new Exception(\"Missing return statement in function\");\r\n}", "public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteApiKeyResponse>(request, options);\r\n}", "public InsertTagsRequest(): base(\"Ots\", \"2016-06-20\", \"InsertTags\", \"ots\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public virtual DeleteUserByPrincipalIdResponse DeleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteUserByPrincipalIdRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteUserByPrincipalIdResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteUserByPrincipalIdResponse>(request, options);\r\n}", "public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeNetworkInterfacesResponse>(request, options);\r\n}", "public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) {\r\n    listener.BeforeRecordSerialize(offset, RecordId, this);\r\n    LittleEndian.PutShort(data, offset, Options);\r\n    LittleEndian.PutShort(data, offset + 2, RecordId);\r\n    LittleEndian.PutInt(data, offset + 4, 8);\r\n    LittleEndian.PutInt(data, offset + 8, field_1_numShapes);\r\n    LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID);\r\n    listener.AfterRecordSerialize(offset + 16, RecordId, RecordSize, this);\r\n    return RecordSize;\r\n}", "public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<CreateSecurityConfigurationResponse>(request, options);\r\n}", "public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeClientVpnConnectionsResponse>(request, options);\r\n}", "public static void fill(double[] array, double value) {\r\n    {\r\n        for(int i = 0; i < array.Length; i++) {\r\n            array[i] = value;\r\n        }\r\n    }\r\n}", "public bool hasNext() {\r\n    return pos < maxColumn;\r\n}", "public DocsEnum Reset(int[] postings) {\r\n    this.postings = postings;\r\n    upto = -2;\r\n    freq_Renamed = 0;\r\n    return this;\r\n}", "public bool HasAll(RevFlagSet set) {\r\n    return (flags & set.mask) == set.mask;\r\n}", "public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyAccountResponse>(request, options);\r\n}", "public virtual IToken LT(int k) {\r\n    LazyInit();\r\n    if(k == 0) {\r\n        return null;\r\n    }\r\n    if(k < 0) {\r\n        return Lb(-k);\r\n    }\r\n    int i = p + k - 1;\r\n    Sync(i);\r\n    if(i >= tokens.Count) {\r\n        return tokens[tokens.Count - 1];\r\n    }\r\n    return tokens[i];\r\n}", "public void RemoveSheet(int sheetIndex) {\r\n    if(boundsheets.Count > sheetIndex) {\r\n        records.Remove(records.Bspos - (boundsheets.Count - 1) + sheetIndex);\r\n        boundsheets.RemoveAt(sheetIndex);\r\n        FixTabIdRecord();\r\n    }\r\n    int sheetNum1Based = sheetIndex + 1;\r\n    for(int i = 0; i < NumNames; i++) {\r\n        NameRecord nr = GetNameRecord(i);\r\n        if(nr.SheetNumber == sheetNum1Based) {\r\n            nr.SheetNumber = (0);\r\n        } else if(nr.SheetNumber > sheetNum1Based) {\r\n            nr.SheetNumber = (nr.SheetNumber - 1);\r\n        }\r\n    }\r\n    if(linkTable != null) {\r\n        for(int i = sheetIndex + 1; i < NumSheets + 1; i++) {\r\n            linkTable.RemoveSheet(i);\r\n        }\r\n    }\r\n}", "public void RemoveName(int index) {\r\n    names.RemoveAt(index);\r\n    workbook.RemoveName(index);\r\n}", "public override bool Equals(Object o) {\r\n    if(!(o is Property))return false;\r\n    Property p = (Property)o;\r\n    Object pValue = p.Value;\r\n    long pId = p.ID;\r\n    if(id != pId || (id != 0 && !TypesAreEqual(type, p.Type)))return false;\r\n    if(value == null && pValue == null)return true;\r\n    if(value == null || pValue == null)return false;\r\n    Type valueClass = value.GetType();\r\n    Type pValueClass = pValue.GetType();\r\n    if(!(valueClass.IsAssignableFrom(pValueClass)) &&!(pValueClass.IsAssignableFrom(valueClass)))return false;\r\n    if(value is byte[])return Arrays.Equals((byte[])value, (byte[])pValue);\r\n    return value.Equals(pValue);\r\n}", "public GetRepoBuildListRequest(): base(\"cr\", \"2016-06-07\", \"GetRepoBuildList\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/build\";\r\n    Method = MethodType.GET;\r\n}", "public MessageWriter() {\r\n    buf = new ByteArrayOutputStream();\r\n    enc = new OutputStreamWriter(GetRawStream(), Constants.CHARSET);\r\n}", "public void Append(RecordBase r) {\r\n    _recs.Add(r);\r\n}", "public override void Close() {\r\n    if(this.Read(this.skipBuffer) != -1 || this.actualSize != this.expectedSize) {\r\n        throw new CorruptObjectException(MessageFormat.Format(JGitText.Get().packfileCorruptionDetected, JGitText.Get().wrongDecompressedLength));\r\n    }\r\n    int used = this._enclosing.bAvail - this.inf.RemainingInput;\r\n    if(0 < used) {\r\n        this._enclosing.OnObjectData(this.src, this._enclosing.buf, this.p, used);\r\n        this._enclosing.Use(used);\r\n    }\r\n    this.inf.Reset();\r\n}", "public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeModelPackageResponse>(request, options);\r\n}", "public void Construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {\r\n    if(rec is FormulaRecord) {\r\n        FormulaRecord formulaRec = (FormulaRecord)rec;\r\n        StringRecord cachedText=null;\r\n        Type nextClass = rs.PeekNextClass();\r\n        if(nextClass == typeof(StringRecord)) {\r\n            cachedText = (StringRecord)rs.GetNext();\r\n        } else {\r\n            cachedText = null;\r\n        }\r\n        InsertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));\r\n    } else {\r\n        InsertCell(rec);\r\n    }\r\n}", "public override object Clone() {\r\n    return new DeflateDecompressor();\r\n}", "public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateS3ResourcesResponse>(request, options);\r\n}", "public GroupQueryNode(IQueryNode query) {\r\n    if(query == null) {\r\n        throw new QueryNodeError(new Message(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"query\", \"null\"));\r\n    }\r\n    Allocate();\r\n    IsLeaf = false;\r\n    Add(query);\r\n}", "public override string ToQueryString(IEscapeQuerySyntax escaper) {\r\n    StringBuilder path = new StringBuilder();\r\n    path.Append(\"/\").Append(GetFirstPathElement());\r\n    foreach(QueryText pathelement in GetPathElements(1)) {\r\n        string value = escaper.Escape(new StringCharSequence(pathelement.Value),CultureInfo.InvariantCulture, EscapeQuerySyntaxType.STRING).ToString();\r\n        path.Append(\"/\\\"\").Append(value).Append(\"\\\"\");\r\n    }\r\n    return path.ToString();\r\n}", "public void RemoveCellComment() {\r\n    HSSFComment comment2 = _sheet.FindCellComment(_record.Row, _record.Column);\r\n    comment = null;\r\n    if(null == comment2) {\r\n        return;\r\n    }\r\n    (_sheet.DrawingPatriarch as HSSFPatriarch).RemoveShape(comment2);\r\n}", "public void Reset() {\r\n    count = 0;\r\n    Debug.Assert(forwardCount == 0, \"pos=\" + pos + \" forwardCount=\" + forwardCount);\r\n}", "public virtual ActivateUserResponse ActivateUser(ActivateUserRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ActivateUserRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ActivateUserResponseUnmarshaller.Instance;\r\n    return Invoke<ActivateUserResponse>(request, options);\r\n}", "public virtual bool isCharsetDetected() {\r\n    throw new System.NotSupportedException();\r\n}", "public virtual ModifySnapshotCopyRetentionPeriodResponse ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifySnapshotCopyRetentionPeriodRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.Instance;\r\n    return Invoke<ModifySnapshotCopyRetentionPeriodResponse>(request, options);\r\n}", "public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteClusterSubnetGroupResponse>(request, options);\r\n}", "public static string Decode(byte[] buffer) {\r\n    return Decode(buffer, 0, buffer.Length);\r\n}", "public virtual int GetDefaultPort() {\r\n    return -1;\r\n}", "public virtual StopTaskResponse StopTask(StopTaskRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopTaskRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance;\r\n    return Invoke<StopTaskResponse>(request, options);\r\n}", "public override void SeekExact(BytesRef target, TermState otherState) {\r\n    if(!target.Equals(term_Renamed)) {\r\n        state.CopyFrom(otherState);\r\n        term_Renamed = BytesRef.DeepCopyOf(target);\r\n        seekPending = true;\r\n    }\r\n}", "public SeriesToChartGroupRecord(RecordInputStream in1) {\r\n    field_1_chartGroupIndex = in1.ReadShort();\r\n}", "public static void WriteUnicodeStringFlagAndData(ILittleEndianOutput out1, String value) {\r\n    bool is16Bit = HasMultibyte(value);\r\n    out1.WriteByte(is16Bit ? 0x01 : 0x00);\r\n    if(is16Bit) {\r\n        PutUnicodeLE(value, out1);\r\n    } else {\r\n        PutCompressedUnicode(value, out1);\r\n    }\r\n}", "public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance;\r\n    return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options);\r\n}", "public void AddFile(string file) {\r\n    CheckFileNames(new[] { file });\r\n    setFiles.Add(file);\r\n}", "public virtual void setSize(int width, int height) {\r\n    mWidth = width;\r\n    mHeight = height;\r\n}", "public void SetPrecedenceFilterSuppressed(bool value) {\r\n    if(value) {\r\n        this.reachesIntoOuterContext |= SUPPRESS_PRECEDENCE_FILTER;\r\n    } else {\r\n        this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;\r\n    }\r\n}", "public virtual IntervalSet Look(ATNState s, RuleContext ctx) {\r\n    return Look(s, null, ctx);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(OptionFlags);\r\n    out1.WriteShort(RowHeight);\r\n}", "public Builder(bool dedup) {\r\n    this.dedup = dedup;\r\n}", "public Hashtable(int capacity, float loadFactor) : this(capacity) {\r\n    if(loadFactor <= 0 || float.IsNaN(loadFactor)) {\r\n        throw new System.ArgumentException(\"Load factor: \" + loadFactor);\r\n    }\r\n}", "public virtual object Get(string key) {\r\n    int bucket = normalCompletion.GetBucket(key);\r\n    return bucket == -1 ? (long?)null : bucket;\r\n}", "public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance;\r\n    return Invoke<ListHyperParameterTuningJobsResponse>(request, options);\r\n}", "public virtual DeleteTableResponse DeleteTable(string tableName) {\r\n    var request = new DeleteTableRequest();\r\n    request.TableName = tableName;\r\n    return DeleteTable(request);\r\n}", "protected internal override bool LessThan(TextFragment fragA, TextFragment fragB) {\r\n    if(fragA.Score == fragB.Score)return fragA.FragNum > fragB.FragNum;\r\n    elsereturn fragA.Score < fragB.Score;\r\n}", "public void FreeBefore(int pos) {\r\n    Debug.Assert(pos >= 0);\r\n    Debug.Assert(pos <= nextPos);\r\n    int newCount = nextPos - pos;\r\n    Debug.Assert(newCount <= count, \"newCount=\" + newCount + \" count=\" + count);\r\n    Debug.Assert(newCount <= buffer.Length, \"newCount=\" + newCount + \" buf.length=\" + buffer.Length);\r\n    count = newCount;\r\n}", "public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateHITTypeOfHITResponse>(request, options);\r\n}", "public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateRecommenderConfigurationResponse>(request, options);\r\n}", "public int CompareTo(object other) {\r\n    BytesRef br = other as BytesRef;\r\n    Debug.Assert(br != null);\r\n    return utf8SortedAsUnicodeSortOrder.Compare(this, br);\r\n}", "public virtual int Stem(char[] s, int len) {\r\n    if(len > 4 && s[len - 1] == 's') {\r\n        len--;\r\n    }\r\n    if(len > 5 && (StemmerUtil.EndsWith(s, len, \"ene\") || (StemmerUtil.EndsWith(s, len, \"ane\") && useNynorsk))) {\r\n        return len - 3;\r\n    }\r\n    if(len > 4 && (StemmerUtil.EndsWith(s, len, \"er\") || StemmerUtil.EndsWith(s, len, \"en\") || StemmerUtil.EndsWith(s, len, \"et\") || (StemmerUtil.EndsWith(s, len, \"ar\") && useNynorsk))) {\r\n        return len - 2;\r\n    }\r\n    if(len > 3) {\r\n        switch(s[len - 1]) {\r\n        case 'a':\r\n        case 'e':\r\n            return len - 1;\r\n        }\r\n    }\r\n    return len;\r\n}", "public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDBSnapshotsResponse>(request, options);\r\n}", "public SortedSetDocValuesFacetField(string dim, string label): base(\"dummy\", TYPE) {\r\n    FacetField.VerifyLabel(label);\r\n    FacetField.VerifyLabel(dim);\r\n    this.Dim = dim;\r\n    this.Label = label;\r\n}", "public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDocumentationPartResponse>(request, options);\r\n}", "public virtual string GetValue() {\r\n    return value;\r\n}", "public override java.nio.ShortBuffer asReadOnlyBuffer() {\r\n    return duplicate();\r\n}", "public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateDataSourcePermissionsResponse>(request, options);\r\n}", "public static Record CreateSingleRecord(RecordInputStream in1) {\r\n    if(_recordCreatorsById.ContainsKey(in1.Sid)) {\r\n        I_RecordCreator constructor = _recordCreatorsById[in1.Sid];\r\n        return constructor.Create(in1);\r\n    } else {\r\n        return new UnknownRecord(in1);\r\n    }\r\n}", "public override int getCount() {\r\n    return this._enclosing.mTabLayout.getChildCount();\r\n}", "public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options);\r\n}", "public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateProjectVersionResponse>(request, options);\r\n}", "public override java.nio.IntBuffer slice() {\r\n    return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position);\r\n}", "public sealed override byte get() {\r\n    throw new System.NotImplementedException();\r\n}", "public override java.nio.LongBuffer put(int index, long c) {\r\n    checkIndex(index);\r\n    backingArray[offset + index] = c;\r\n    return this;\r\n}", "public StoredField(string name, float value): base(name, TYPE) {\r\n    FieldsData = new Single(value);\r\n}", "public virtual IntervalSet GetExpectedTokensWithinCurrentRule() {\r\n    ATN atn = Interpreter.atn;\r\n    ATNState s = atn.states[State];\r\n    return atn.NextTokens(s);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[FILESHARING]\\n\");\r\n    buffer.Append(\"    .Readonly       = \").Append(ReadOnly == 1 ? \"true\" : \"false\").Append(\"\\n\");\r\n    buffer.Append(\"    .password       = \").Append(StringUtil.ToHexString(Password)).Append(\"\\n\");\r\n    buffer.Append(\"    .username       = \").Append(Username).Append(\"\\n\");\r\n    buffer.Append(\"[/FILESHARING]\\n\");\r\n    return buffer.ToString();\r\n}", "protected internal SubmoduleInitCommand(Repository repo) : base(repo) {\r\n    paths = new AList<string>();\r\n}", "public virtual void Include(string name, AnyObjectId id) {\r\n    if(!Repository.IsValidRefName(name)) {\r\n        throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidRefName, name));\r\n    }\r\n    if(include.ContainsKey(name)) {\r\n        throw new InvalidOperationException(JGitText.Get().duplicateRef + name);\r\n    }\r\n    include.Put(name, id.ToObjectId());\r\n}", "public virtual EnableSnapshotCopyResponse EnableSnapshotCopy(EnableSnapshotCopyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = EnableSnapshotCopyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = EnableSnapshotCopyResponseUnmarshaller.Instance;\r\n    return Invoke<EnableSnapshotCopyResponse>(request, options);\r\n}", "public virtual ValueFiller GetValueFiller() {\r\n    return new ValueFillerAnonymousInnerClassHelper(this);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteByte(Pane);\r\n    out1.WriteShort(ActiveCellRow);\r\n    out1.WriteShort(ActiveCellCol);\r\n    out1.WriteShort(ActiveCellRef);\r\n    int nRefs = field_6_refs.Length;\r\n    out1.WriteShort(nRefs);\r\n    for(int i = 0; i < field_6_refs.Length; i++) {\r\n        field_6_refs[i].Serialize(out1);\r\n    }\r\n}", "public static Counter NewCounter() {\r\n    return NewCounter(false);\r\n}", "public virtual int Get(string name, int dflt) {\r\n    int[] vals;\r\n    object temp;\r\n    if(valByRound.TryGetValue(name, out temp) && temp != null) {\r\n        vals = (int[])temp;\r\n        return vals[roundNumber % vals.Length];\r\n    }\r\n    string sval;\r\n    if(!props.TryGetValue(name, out sval)) {\r\n        sval = dflt.ToString(CultureInfo.InvariantCulture);\r\n    }\r\n    if(sval.IndexOf(':') < 0) {\r\n        return int.Parse(sval, CultureInfo.InvariantCulture);\r\n    }\r\n    int k = sval.IndexOf(':');\r\n    string colName = sval.Substring(0, k - 0);\r\n    sval = sval.Substring(k + 1);\r\n    colForValByRound[name] = colName;\r\n    vals = PropToInt32Array(sval);\r\n    valByRound[name] = vals;\r\n    return vals[roundNumber % vals.Length];\r\n}", "public void PreSerialize() {\r\n    if(records.Tabpos > 0) {\r\n        TabIdRecord tir = (TabIdRecord)records[(records.Tabpos)];\r\n        if(tir._tabids.Length < boundsheets.Count) {\r\n            FixTabIdRecord();\r\n        }\r\n    }\r\n}", "public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(@delegate.Strategy) {\r\n    this.@delegate = @delegate;\r\n    this.maxTokenCount = maxTokenCount;\r\n    this.consumeAllTokens = consumeAllTokens;\r\n}", "public ExternalBookBlock(int numberOfSheets) {\r\n    _externalBookRecord = SupBookRecord.CreateInternalReferences((short)numberOfSheets);\r\n    _externalNameRecords = new ExternalNameRecord[0];\r\n    _crnBlocks = new CRNBlock[0];\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[SCENARIOPROTECT]\\n\");\r\n    buffer.Append(\"    .protect         = \").Append(Protect).Append(\"\\n\");\r\n    buffer.Append(\"[/SCENARIOPROTECT]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual NGit.Api.PushCommand SetThin(bool thin) {\r\n    CheckCallable();\r\n    this.thin = thin;\r\n    return this;\r\n}", "public int CompareTo(SearcherTracker other) {\r\n    return other.RecordTimeSec.CompareTo(RecordTimeSec);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new ReverseStringFilter(m_luceneMatchVersion, input);\r\n}", "public BlockList() {\r\n    directory = NGit.Util.BlockList<T>.NewDirectory(256);\r\n    directory[0] = NGit.Util.BlockList<T>.NewBlock();\r\n    tailBlock = directory[0];\r\n}", "public QueryScorer(WeightedSpanTerm[] weightedTerms) {\r\n    this.fieldWeightedSpanTerms = new JCG.Dictionary<string, WeightedSpanTerm>(weightedTerms.Length);\r\n    foreach(WeightedSpanTerm t in weightedTerms) {\r\n        if(!fieldWeightedSpanTerms.TryGetValue(t.Term, out WeightedSpanTerm existingTerm) ||(existingTerm == null) ||(existingTerm.Weight < t.Weight)) {\r\n            fieldWeightedSpanTerms[t.Term] = t;\r\n            maxTermWeight = Math.Max(maxTermWeight, t.Weight);\r\n        }\r\n    }\r\n    skipInitExtractor = true;\r\n}", "public override bool Equals(object other) {\r\n    Debug.Assert(NeverEquals(other));\r\n    if(other is MergedGroup<T> otherMergedGroup) {\r\n        if(groupValue == null) {\r\n            return otherMergedGroup == null;\r\n        } else {\r\n            return groupValueIsValueType ?JCG.EqualityComparer<T>.Default.Equals(groupValue, otherMergedGroup.groupValue) :J2N.Collections.StructuralEqualityComparer.Default.Equals(groupValue, otherMergedGroup.groupValue);\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}", "public java.nio.charset.Charset charset() {\r\n    return cs;\r\n}", "public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeExperimentResponse>(request, options);\r\n}", "public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel) {\r\n    this.escherGroup = escherGroup;\r\n    this.workbook = workbook;\r\n    this.verticalPointsPerPixel = verticalPointsPerPixel;\r\n    this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;\r\n    this.font = new Font(\"Arial\", 10);\r\n    this.foreground = forecolor;\r\n}", "public virtual string Pattern() {\r\n    return patternText;\r\n}", "public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteRouteTableResponse>(request, options);\r\n}", "public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateVPCWithHostedZoneResponse>(request, options);\r\n}", "public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance;\r\n    return Invoke<PutIntegrationResponse>(request, options);\r\n}", "public SimpleEntry(K theKey, V theValue) {\r\n    key = theKey;\r\n    value = theValue;\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        int byte0 = blocks[blocksOffset++] & 0xFF;\r\n        int byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (byte0 << 4) | ((int)((uint)byte1 >> 4));\r\n        int byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;\r\n    }\r\n}", "public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance;\r\n    return Invoke<DisassociateConnectionFromLagResponse>(request, options);\r\n}", "public virtual FileMode GetOldMode() {\r\n    return oldMode;\r\n}", "public override string ToString() {\r\n    return mapEntry.ToString();\r\n}", "public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance;\r\n    return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder(\"[Array Formula or Shared Formula]\\n\");\r\n    buffer.Append(\"row = \").Append(Row).Append(\"\\n\");\r\n    buffer.Append(\"col = \").Append(Column).Append(\"\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance;\r\n    return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return \"slice start=\" + Start + \" length=\" + Length + \" readerIndex=\" + ReaderIndex;\r\n}", "public static int ParseHexInt4(byte digit) {\r\n    sbyte r = digits16[digit];\r\n    if(r < 0) {\r\n        throw new IndexOutOfRangeException();\r\n    }\r\n    return r;\r\n}", "public Attribute(string name, string value) {\r\n    _name = name;\r\n    _value = value;\r\n}", "public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeStackSetOperationResponse>(request, options);\r\n}", "public ICell GetCell(short cellnum) {\r\n    int ushortCellNum = cellnum & 0x0000FFFF;\r\n    return GetCell(ushortCellNum);\r\n}", "public void Write(byte[] b) {\r\n    WriteContinueIfRequired(b.Length);\r\n    _ulrOutput.Write(b);\r\n}", "public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) {\r\n    _imageId = imageId;\r\n    _attribute = attribute;\r\n}", "public virtual void DiscardResultContents() {\r\n    resultContents = null;\r\n}", "public virtual ObjectId GetPeeledObjectId() {\r\n    return GetLeaf().GetPeeledObjectId();\r\n}", "public virtual UndeprecateDomainResponse UndeprecateDomain(UndeprecateDomainRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance;\r\n    return Invoke<UndeprecateDomainResponse>(request, options);\r\n}", "public override void Write(ILittleEndianOutput out1) {\r\n    out1.WriteByte(sid + PtgClass);\r\n    out1.WriteByte(field_3_string.Length);\r\n    out1.WriteByte(_is16bitUnicode ? 0x01 : 0x00);\r\n    if(_is16bitUnicode) {\r\n        StringUtil.PutUnicodeLE(field_3_string, out1);\r\n    } else {\r\n        StringUtil.PutCompressedUnicode(field_3_string, out1);\r\n    }\r\n}", "public virtual DeleteQueueResponse DeleteQueue(string queueUrl) {\r\n    var request = new DeleteQueueRequest();\r\n    request.QueueUrl = queueUrl;\r\n    return DeleteQueue(request);\r\n}", "public virtual void SetCheckEofAfterPackFooter(bool b) {\r\n    checkEofAfterPackFooter = b;\r\n}", "public virtual void Swap() {\r\n    int sBegin = beginA;\r\n    int sEnd = endA;\r\n    beginA = beginB;\r\n    endA = endB;\r\n    beginB = sBegin;\r\n    endB = sEnd;\r\n}", "public virtual int GetPackedGitWindowSize() {\r\n    return packedGitWindowSize;\r\n}", "public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance;\r\n    return Invoke<PutMetricDataResponse>(request, options);\r\n}", "public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance;\r\n    return Invoke<GetCelebrityRecognitionResponse>(request, options);\r\n}", "public CreateQueueRequest(string queueName) {\r\n    _queueName = queueName;\r\n}", "public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef): base(arearef) {\r\n    this.externalWorkbookNumber = externalWorkbookNumber;\r\n    this.firstSheetName = sheetName.SheetId.Name;\r\n    if(sheetName is SheetRangeIdentifier) {\r\n        this.lastSheetName = ((SheetRangeIdentifier)sheetName).LastSheetIdentifier.Name;\r\n    } else {\r\n        this.lastSheetName = null;\r\n    }\r\n}", "public virtual void SetBaseline(long clockTime) {\r\n    t0 = clockTime;\r\n    timeout = t0 + ticksAllowed;\r\n}", "public virtual MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance;\r\n    return Invoke<MoveAddressToVpcResponse>(request, options);\r\n}", "public override string ToString() {\r\n    string coll = m_collectionModel.GetName();\r\n    if(coll != null) {\r\n        return string.Format(\"LM {0} - {1}\", GetName(), coll);\r\n    } else {\r\n        return string.Format(\"LM {0}\", GetName());\r\n    }\r\n}", "public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeLagsResponse>(request, options);\r\n}", "public AreaEval Offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {\r\n    if(_refEval == null) {\r\n        return _areaEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);\r\n    }\r\n    return _refEval.Offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);\r\n}", "public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) {\r\n    byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT);\r\n    byteBuffer.position(_position * libcore.io.SizeOf.SHORT);\r\n    if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) {\r\n        ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount);\r\n    } else {\r\n        ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount);\r\n    }\r\n    this._position += shortCount;\r\n    return this;\r\n}", "public override void Initialize(String cat) {\r\n    this._cat = cat;\r\n}", "public override void write(int oneByte) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeImportImageTasksResponse>(request, options);\r\n}", "public ColumnInfoRecord(RecordInputStream in1) {\r\n    _first_col = in1.ReadUShort();\r\n    _last_col = in1.ReadUShort();\r\n    _col_width = in1.ReadUShort();\r\n    _xf_index = in1.ReadUShort();\r\n    _options = in1.ReadUShort();\r\n    switch(in1.Remaining) {\r\n    case 2:\r\n        field_6_reserved = in1.ReadUShort();\r\n        break;\r\n    case 1:\r\n        field_6_reserved = in1.ReadByte();\r\n        break;\r\n    case 0:\r\n        field_6_reserved = 0;\r\n        break;\r\n    default:\r\n        throw new Exception(\"Unusual record size remaining=(\" + in1.Remaining + \")\");\r\n    }\r\n}", "public Status(IndexDiff diff) : base() {\r\n    this.diff = diff;\r\n    clean = diff.GetAdded().IsEmpty() && diff.GetChanged().IsEmpty() && diff.GetRemoved().IsEmpty() && diff.GetMissing().IsEmpty() && diff.GetModified().IsEmpty() && diff.GetUntracked().IsEmpty() && diff.GetConflicting().IsEmpty();\r\n}", "public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance;\r\n    return Invoke<CreateExperimentResponse>(request, options);\r\n}", "public override Object Clone() {\r\n    return this;\r\n}", "public override java.nio.FloatBuffer slice() {\r\n    byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT);\r\n    byteBuffer.position(_position * libcore.io.SizeOf.FLOAT);\r\n    java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());\r\n    java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb);\r\n    byteBuffer.clear();\r\n    return result;\r\n}", "public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeSnapshotSchedulesResponse>(request, options);\r\n}", "public virtual ListImagesResponse ListImages(ListImagesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListImagesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance;\r\n    return Invoke<ListImagesResponse>(request, options);\r\n}", "public Diff(int ins, int del, int rep, int noop) {\r\n    INSERT = ins;\r\n    DELETE = del;\r\n    REPLACE = rep;\r\n    NOOP = noop;\r\n}", "public override String ToFormulaString(String[] operands) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(operands[0]);\r\n    buffer.Append(\",\");\r\n    buffer.Append(operands[1]);\r\n    return buffer.ToString();\r\n}", "public static void SetupEnvironment(String[] workbookNames, ForkedEvaluator[] Evaluators) {\r\n    WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[Evaluators.Length];\r\n    for(int i = 0; i < wbEvals.Length; i++) {\r\n        wbEvals[i] = Evaluators[i]._evaluator;\r\n    }\r\n    CollaboratingWorkbooksEnvironment.Setup(workbookNames, wbEvals);\r\n}", "public ListPhotoTagsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListPhotoTags\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public RandomSamplingFacetsCollector(int sampleSize, long seed): base(false) {\r\n    this.sampleSize = sampleSize;\r\n    this.random = new XORShift64Random(seed);\r\n    this.sampledDocs = null;\r\n}", "public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance;\r\n    return Invoke<AllocateStaticIpResponse>(request, options);\r\n}", "public FeatRecord(RecordInputStream in1) {\r\n    futureHeader = new FtrHeader(in1);\r\n    isf_sharedFeatureType = in1.ReadShort();\r\n    reserved1 = (byte)in1.ReadByte();\r\n    reserved2 = in1.ReadInt();\r\n    int cref = in1.ReadUShort();\r\n    cbFeatData = in1.ReadInt();\r\n    reserved3 = in1.ReadShort();\r\n    cellRefs = new CellRangeAddress[cref];\r\n    for(int i = 0; i < cellRefs.Length; i++) {\r\n        cellRefs[i] = new CellRangeAddress(in1);\r\n    }\r\n    switch(isf_sharedFeatureType) {\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:\r\n        sharedFeature = new FeatProtection(in1);\r\n        break;\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:\r\n        sharedFeature = new FeatFormulaErr2(in1);\r\n        break;\r\n    case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:\r\n        sharedFeature = new FeatSmartTag(in1);\r\n        break;\r\n    default:\r\n        logger.Log(POILogger.ERROR, \"Unknown Shared Feature \" + isf_sharedFeatureType + \" found!\");\r\n        break;\r\n    }\r\n}", "public virtual RevCommit TryFastForward(RevCommit newCommit) {\r\n    Ref head = repo.GetRef(Constants.HEAD);\r\n    if(head == null || head.GetObjectId() == null) {\r\n        throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, Constants.HEAD));\r\n    }\r\n    ObjectId headId = head.GetObjectId();\r\n    if(headId == null) {\r\n        throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, Constants.HEAD));\r\n    }\r\n    RevCommit headCommit = walk.LookupCommit(headId);\r\n    if(walk.IsMergedInto(newCommit, headCommit)) {\r\n        return newCommit;\r\n    }\r\n    string headName;\r\n    if(head.IsSymbolic()) {\r\n        headName = head.GetTarget().GetName();\r\n    } else {\r\n        headName = \"detached HEAD\";\r\n    }\r\n    return TryFastForward(headName, headCommit, newCommit);\r\n}", "public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance;\r\n    return Invoke<CreateSnapshotScheduleResponse>(request, options);\r\n}", "public Record GetNext() {\r\n    if(_nextIndex >= _list.Count) {\r\n        throw new Exception(\"Attempt to Read past end of record stream\");\r\n    }\r\n    _countRead++;\r\n    return (Record)_list[_nextIndex++];\r\n}", "public override string ToString() {\r\n    return RawParseUtils.Decode(buf.ToByteArray());\r\n}", "public ListTablesRequest(string exclusiveStartTableName) {\r\n    _exclusiveStartTableName = exclusiveStartTableName;\r\n}", "public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance;\r\n    return Invoke<EnableAlarmActionsResponse>(request, options);\r\n}", "public Builder(): base() {\r\n    lastDocID = -1;\r\n    wordNum = -1;\r\n    word = 0;\r\n}", "public override bool Equals(object obj) {\r\n    State other = (State)obj;\r\n    return is_final == other.is_final && Arrays.Equals(this.labels, other.labels) && ReferenceEquals(this.states, other.states);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new EnglishPossessiveFilter(m_luceneMatchVersion, input);\r\n}", "public void ClearFormatting() {\r\n    _string = CloneStringIfRequired();\r\n    _string.ClearFormatting();\r\n    AddToSSTIfRequired();\r\n}", "public override int Get(int index, long[] arr, int off, int len) {\r\n    Debug.Assert(len > 0, \"len must be > 0 (got \" + len + \")\");\r\n    Debug.Assert(index >= 0 && index < valueCount);\r\n    len = Math.Min(len, valueCount - index);\r\n    Arrays.Fill(arr, off, off + len, 0);\r\n    return len;\r\n}", "public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteRouteResponseResponse>(request, options);\r\n}", "public virtual string ToPrivateString() {\r\n    return Format(true, false);\r\n}", "public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance;\r\n    return Invoke<CreatePresignedDomainUrlResponse>(request, options);\r\n}", "public override void write(int oneChar) {\r\n    doWrite(new char[] { (char)oneChar }, 0, 1);\r\n}", "public SSTRecord GetSSTRecord() {\r\n    return sstRecord;\r\n}", "public override string ToString() {\r\n    return \"term=\" + term + \",field=\" + field + \",value=\" + value;\r\n}", "public override bool IsSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {\r\n    return bloomFilter.GetSaturation() > 0.9f;\r\n}", "public Builder(bool ignoreCase) {\r\n    this.ignoreCase = ignoreCase;\r\n}", "public override string ToString() {\r\n    return GetType().Name+ \"(maxBasicQueries: \" + maxBasicQueries+ \", queriesMade: \" + queriesMade+ \")\";\r\n}", "public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDataSourceResponse>(request, options);\r\n}", "public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RebootNodeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance;\r\n    return Invoke<RebootNodeResponse>(request, options);\r\n}", "public void ProcessChildRecords() {\r\n    ConvertRawBytesToEscherRecords();\r\n}", "public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance;\r\n    return Invoke<CreateOrUpdateTagsResponse>(request, options);\r\n}", "public FileSnapshot GetSnapShot() {\r\n    return snapShot;\r\n}", "public Stream OpenResource(string resource) {\r\n    Stream stream = this.clazz.GetTypeInfo().Assembly.FindAndGetManifestResourceStream(clazz, resource);\r\n    if(stream == null) {\r\n        throw new IOException(\"Resource not found: \" + resource);\r\n    }\r\n    return stream;\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    sb.Append(GetType().Name).Append(\" [\");\r\n    sb.Append(\"sid=\").Append(HexDump.ShortToHex(_sid));\r\n    sb.Append(\" size=\").Append(_data.Length);\r\n    sb.Append(\" : \").Append(HexDump.ToHex(_data));\r\n    sb.Append(\"]\\n\");\r\n    return sb.ToString();\r\n}", "public virtual int nextIndex() {\r\n    return index;\r\n}", "public override string ToQueryString(IEscapeQuerySyntax escaper) {\r\n    if(IsDefaultField(this.m_field)) {\r\n        return \"\\\"\" + GetTermEscapeQuoted(escaper) + \"\\\"\";\r\n    } else {\r\n        return this.m_field + \":\" + \"\\\"\" + GetTermEscapeQuoted(escaper) + \"\\\"\";\r\n    }\r\n}", "public override Object Clone() {\r\n    CalcModeRecord rec = new CalcModeRecord();\r\n    rec.field_1_calcmode = field_1_calcmode;\r\n    return rec;\r\n}", "public virtual bool IsOutput() {\r\n    return output;\r\n}", "public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance;\r\n    return Invoke<CreateNetworkInterfaceResponse>(request, options);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_password);\r\n}", "public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance;\r\n    return Invoke<StopDominantLanguageDetectionJobResponse>(request, options);\r\n}", "public void WithConnectionTimeout(int milliseconds) {\r\n    connectionTimeoutInMilliseconds = milliseconds;\r\n}", "public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance;\r\n    return Invoke<GetGatewayGroupResponse>(request, options);\r\n}", "public override java.nio.FloatBuffer slice() {\r\n    return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset +_position);\r\n}", "public static string Join(ICollection<string> parts, string separator, string lastSeparator) {\r\n    StringBuilder sb = new StringBuilder();\r\n    int i = 0;\r\n    int lastIndex = parts.Count - 1;\r\n    foreach(string part in parts) {\r\n        sb.Append(part);\r\n        if(i == lastIndex - 1) {\r\n            sb.Append(lastSeparator);\r\n        } else {\r\n            if(i != lastIndex) {\r\n                sb.Append(separator);\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    return sb.ToString();\r\n}", "public override string ToString() {\r\n    return \"(\" + a.ToString() + \" AND \" + b.ToString() + \")\";\r\n}", "public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) {\r\n    _topicArn = topicArn;\r\n    _nextToken = nextToken;\r\n}", "public override byte ReadByte() {\r\n    return bytes[pos--];\r\n}", "public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance;\r\n    return Invoke<TerminateClientVpnConnectionsResponse>(request, options);\r\n}", "public ReceiveMessageRequest(string queueUrl) {\r\n    _queueUrl = queueUrl;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_barSpace);\r\n    out1.WriteShort(field_2_categorySpace);\r\n    out1.WriteShort(field_3_formatFlags);\r\n}", "public override object Common(object output1, object output2) {\r\n    return outputs.Common((T)output1, (T)output2);\r\n}", "public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateVariableRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance;\r\n    return Invoke<CreateVariableResponse>(request, options);\r\n}", "public static int Match(byte[] b, int ptr, byte[] src) {\r\n    if(ptr + src.Length > b.Length) {\r\n        return -1;\r\n    }\r\n    for(int i = 0; i < src.Length; i++, ptr++) {\r\n        if(b[ptr] != src[i]) {\r\n            return -1;\r\n        }\r\n    }\r\n    return ptr;\r\n}", "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {\r\n    int bytesRemaining = ReadHeader(data, offset);\r\n    int pos = offset + 8;\r\n    int size = 0;\r\n    field_1_rectX1 = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    field_2_rectY1 = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    field_3_rectX2 = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    field_4_rectY2 = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    bytesRemaining -= size;\r\n    if(bytesRemaining != 0) throw new RecordFormatException(\"Expected no remaining bytes but got \" + bytesRemaining);\r\n    return 8 + size + bytesRemaining;\r\n}", "public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance;\r\n    return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options);\r\n}", "public virtual bool isNamespaceAware() {\r\n    return getFeature(org.xmlpull.v1.XmlPullParserClass.FEATURE_PROCESS_NAMESPACES);\r\n}", "public virtual void SetOverridable(bool on) {\r\n    overridable = on;\r\n}", "public virtual string getClassName() {\r\n    return className;\r\n}", "public virtual DirectoryReader GetIndexReader() {\r\n    lock(this) {\r\n        if(indexReader != null) {\r\n            indexReader.IncRef();\r\n        }\r\n        return indexReader;\r\n    }\r\n}", "public virtual int indexOfKey(int key) {\r\n    return binarySearch(mKeys, 0, mSize, key);\r\n}", "public BlankRecord(RecordInputStream in1) {\r\n    field_1_row = in1.ReadUShort();\r\n    field_2_col = in1.ReadShort();\r\n    field_3_xf = in1.ReadShort();\r\n}", "public override long length() {\r\n    return length_Renamed;\r\n}", "public PasswordRecord(RecordInputStream in1) {\r\n    field_1_password = in1.ReadShort();\r\n}", "public HashMap(int capacity, float loadFactor) : this(capacity) {\r\n    if(loadFactor <= 0 || float.IsNaN(loadFactor)) {\r\n        throw new System.ArgumentException(\"Load factor: \" + loadFactor);\r\n    }\r\n}", "public override void Run() {\r\n    long lastReopenStartNS = DateTime.UtcNow.Ticks * 100;\r\n    while(!finish) {\r\n        bool hasWaiting;\r\n        lock(this)hasWaiting = waitingGen > searchingGen;\r\n        long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);\r\n        long sleepNS = nextReopenStartNS - Time.NanoTime();\r\n        if(sleepNS > 0)#if !NETSTANDARD1_6try{#endifreopenCond.WaitOne(TimeSpan.FromMilliseconds(sleepNS / Time.MILLISECONDS_PER_NANOSECOND)); #if !NETSTANDARD1_6}#pragma warning disable 168catch(ThreadInterruptedException ie)#pragma warning restore 168{Thread.CurrentThread.Interrupt(); return;}#endifif(finish) {\r\n                    break;\r\n                }\r\n        lastReopenStartNS = Time.NanoTime();\r\n        refreshStartGen = writer.GetAndIncrementGeneration();\r\n        try {\r\n            manager.MaybeRefreshBlocking();\r\n        } catch(System.IO.IOException ioe) {\r\n            throw new Exception(ioe.ToString(), ioe);\r\n        }\r\n    }\r\n    RefreshDone();\r\n}", "public DeleteLoginProfileRequest(string userName) {\r\n    _userName = userName;\r\n}", "public virtual E pollFirst() {\r\n    return (_size == 0) ? default(E) : removeFirstImpl();\r\n}", "public CreatePhotoRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"CreatePhoto\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public override string GetName() {\r\n    return \"resolve\";\r\n}", "public virtual int FindEndOffset(StringBuilder buffer, int start) {\r\n    if(start > buffer.Length || start < 0) return start;\r\n    int offset, count = m_maxScan;\r\n    for(offset = start; offset < buffer.Length && count > 0; count--) {\r\n        if(m_boundaryChars.Contains(buffer[offset])) return offset;\r\n        offset++;\r\n    }\r\n    return start;\r\n}", "public virtual void SetObjectChecker(ObjectChecker oc) {\r\n    objCheck = oc;\r\n}", "public BaseRef(AreaEval ae) {\r\n    _refEval = null;\r\n    _areaEval = ae;\r\n    _firstRowIndex = ae.FirstRow;\r\n    _firstColumnIndex = ae.FirstColumn;\r\n    _height = ae.LastRow - ae.FirstRow + 1;\r\n    _width = ae.LastColumn - ae.FirstColumn + 1;\r\n}", "public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance;\r\n    return Invoke<CreateVpcEndpointResponse>(request, options);\r\n}", "public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance;\r\n    return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options);\r\n}", "public ChartFRTInfoRecord(RecordInputStream in1) {\r\n    rt = in1.ReadShort();\r\n    grbitFrt = in1.ReadShort();\r\n    verOriginator = (byte)in1.ReadByte();\r\n    verWriter = (byte)in1.ReadByte();\r\n    int cCFRTID = in1.ReadShort();\r\n    rgCFRTID = new CFRTID[cCFRTID];\r\n    for(int i = 0; i < cCFRTID; i++) {\r\n        rgCFRTID[i] = new CFRTID(in1);\r\n    }\r\n}", "public override Merger NewMerger(Repository db) {\r\n    return new StrategyOneSided.OneSide(db, treeIndex);\r\n}", "public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDataSourceFromRedshiftResponse>(request, options);\r\n}", "public override void ClearDFA() {\r\n    for(int d = 0; d < decisionToDFA.Length; d++) {\r\n        decisionToDFA[d] = new DFA(atn.GetDecisionState(d), d);\r\n    }\r\n}", "public void RemoveName(String name) {\r\n    int index = GetNameIndex(name);\r\n    RemoveName(index);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[RightMargin]\\n\");\r\n    buffer.Append(\"    .margin               = \").Append(\" (\").Append(Margin).Append(\" )\\n\");\r\n    buffer.Append(\"[/RightMargin]\\n\");\r\n    return buffer.ToString();\r\n}", "public override Object Clone() {\r\n    return new RefreshAllRecord(_options);\r\n}", "public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig): base(queryConfig) {\r\n    Add(new WildcardQueryNodeProcessor());\r\n    Add(new MultiFieldQueryNodeProcessor());\r\n    Add(new FuzzyQueryNodeProcessor());\r\n    Add(new MatchAllDocsQueryNodeProcessor());\r\n    Add(new OpenRangeQueryNodeProcessor());\r\n    Add(new NumericQueryNodeProcessor());\r\n    Add(new NumericRangeQueryNodeProcessor());\r\n    Add(new LowercaseExpandedTermsQueryNodeProcessor());\r\n    Add(new TermRangeQueryNodeProcessor());\r\n    Add(new AllowLeadingWildcardProcessor());\r\n    Add(new AnalyzerQueryNodeProcessor());\r\n    Add(new PhraseSlopQueryNodeProcessor());\r\n    Add(new BooleanQuery2ModifierNodeProcessor());\r\n    Add(new NoChildOptimizationQueryNodeProcessor());\r\n    Add(new RemoveDeletedQueryNodesProcessor());\r\n    Add(new RemoveEmptyNonLeafQueryNodeProcessor());\r\n    Add(new BooleanSingleChildOptimizationQueryNodeProcessor());\r\n    Add(new DefaultPhraseSlopQueryNodeProcessor());\r\n    Add(new BoostQueryNodeProcessor());\r\n    Add(new MultiTermRewriteMethodProcessor());\r\n}", "public String FormatAsString(String sheetName, bool useAbsoluteAddress) {\r\n    StringBuilder sb = new StringBuilder();\r\n    if(sheetName != null) {\r\n        sb.Append(SheetNameFormatter.Format(sheetName));\r\n        sb.Append(\"!\");\r\n    }\r\n    CellReference cellRefFrom = new CellReference(FirstRow, FirstColumn,useAbsoluteAddress, useAbsoluteAddress);\r\n    CellReference cellRefTo = new CellReference(LastRow, LastColumn,useAbsoluteAddress, useAbsoluteAddress);\r\n    sb.Append(cellRefFrom.FormatAsString());\r\n    if(!cellRefFrom.Equals(cellRefTo)|| IsFullColumnRange || IsFullRowRange) {\r\n        sb.Append(':');\r\n        sb.Append(cellRefTo.FormatAsString());\r\n    }\r\n    return sb.ToString();\r\n}", "public override java.nio.ByteBuffer put(int index, byte value) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual void Mode(int m) {\r\n    _mode = m;\r\n}", "public override java.nio.ShortBuffer slice() {\r\n    return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset +_position);\r\n}", "public virtual void Set(int index, long n) {\r\n    if(count < index) {\r\n        throw Sharpen.Extensions.CreateIndexOutOfRangeException(index);\r\n    } else {\r\n        if(count == index) {\r\n            Add(n);\r\n        } else {\r\n            entries[index] = n;\r\n        }\r\n    }\r\n}", "public override java.nio.ByteBuffer putFloat(float value) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public static double Max(double[] values) {\r\n    double max = double.NegativeInfinity;\r\n    for(int i = 0, iSize = values.Length; i < iSize; i++) {\r\n        max = Math.Max(max, values[i]);\r\n    }\r\n    return max;\r\n}", "public UpdateRepoWebhookRequest(): base(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\";\r\n    Method = MethodType.POST;\r\n}", "public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateCondition expected) {\r\n    _domainName = domainName;\r\n    _itemName = itemName;\r\n    _attributes = attributes;\r\n    _expected = expected;\r\n}", "public override string ToString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(\"[SXPI]\\n\");\r\n    for(int i = 0; i < _fieldInfos.Length; i++) {\r\n        sb.Append(\"    item[\").Append(i).Append(\"]=\");\r\n        _fieldInfos[i].AppendDebugInfo(sb);\r\n        sb.Append('\\n');\r\n    }\r\n    sb.Append(\"[/SXPI]\\n\");\r\n    return sb.ToString();\r\n}", "public virtual bool IsSuccessful() {\r\n    if(mergeResult != null) {\r\n        return mergeResult.GetMergeStatus().IsSuccessful();\r\n    } else {\r\n        if(rebaseResult != null) {\r\n            return rebaseResult.GetStatus().IsSuccessful();\r\n        }\r\n    }\r\n    return true;\r\n}", "public virtual void SetBytesValue(byte[] value) {\r\n    SetBytesValue(new BytesRef(value));\r\n}", "public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeConnectionsResponse>(request, options);\r\n}", "public DeletePhotosRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"DeletePhotos\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public void add(E @object) {\r\n    iterator.add(@object);\r\n    subList.sizeChanged(true);\r\n    end++;\r\n}", "public static java.nio.ByteBuffer allocate(int capacity_1) {\r\n    if(capacity_1 < 0) {\r\n        throw new System.ArgumentException();\r\n    }\r\n    return new java.nio.ReadWriteHeapByteBuffer(capacity_1);\r\n}", "public virtual SrndQuery GetSubQuery(int qn) {\r\n    return m_queries[qn];\r\n}", "public override float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {\r\n    if(numPayloadsSeen == 0) {\r\n        return currentPayloadScore;\r\n    } else {\r\n        return Math.Min(currentPayloadScore, currentScore);\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[BLANK]\\n\");\r\n    buffer.Append(\"row       = \").Append(HexDump.ShortToHex(Row)).Append(\"\\n\");\r\n    buffer.Append(\"col       = \").Append(HexDump.ShortToHex(Column)).Append(\"\\n\");\r\n    buffer.Append(\"xf        = \").Append(HexDump.ShortToHex(XFIndex)).Append(\"\\n\");\r\n    buffer.Append(\"[/BLANK]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeLogPatternResponse>(request, options);\r\n}", "public virtual RegisterTransitGatewayMulticastGroupMembersResponse RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RegisterTransitGatewayMulticastGroupMembersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupMembersResponseUnmarshaller.Instance;\r\n    return Invoke<RegisterTransitGatewayMulticastGroupMembersResponse>(request, options);\r\n}", "public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance;\r\n    return Invoke<GetPhoneNumberSettingsResponse>(request, options);\r\n}", "public virtual ObjectId GetData() {\r\n    return data;\r\n}", "public override bool isDirect() {\r\n    return false;\r\n}", "public DeleteServerCertificateRequest(string serverCertificateName) {\r\n    _serverCertificateName = serverCertificateName;\r\n}", "public java.lang.StringBuffer append(bool b) {\r\n    return append(b ? \"true\" : \"false\");\r\n}", "public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance;\r\n    return Invoke<GetEvaluationResponse>(request, options);\r\n}", "public BRAIRecord GetDataName() {\r\n    return dataName;\r\n}", "public bool find(int start_1) {\r\n    findPos = start_1;\r\n    if(findPos < _regionStart) {\r\n        findPos = _regionStart;\r\n    } else {\r\n        if(findPos >= _regionEnd) {\r\n            matchFound = false;\r\n            return false;\r\n        }\r\n    }\r\n    matchFound = findImpl(address, input, findPos, matchOffsets);\r\n    if(matchFound) {\r\n        findPos = matchOffsets[1];\r\n    }\r\n    return matchFound;\r\n}", "public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance;\r\n    return Invoke<GetLifecyclePolicyPreviewResponse>(request, options);\r\n}", "public SinglePositionTokenStream(string word) {\r\n    termAtt = AddAttribute<ICharTermAttribute>();\r\n    posIncrAtt = AddAttribute<IPositionIncrementAttribute>();\r\n    this.word = word;\r\n    returned = true;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_print_gridlines);\r\n}", "public override string ToString() {\r\n    StringBuilder s = new StringBuilder();\r\n    s.Append(Constants.TypeString(Type));\r\n    s.Append(' ');\r\n    s.Append(Name);\r\n    s.Append(' ');\r\n    s.Append(commitTime);\r\n    s.Append(' ');\r\n    AppendCoreFlags(s);\r\n    return s.ToString();\r\n}", "public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) {\r\n    CheckCallable();\r\n    this.remote = remote;\r\n    return this;\r\n}", "public void CollapseRow(int rowNumber) {\r\n    int startRow = FindStartOfRowOutlineGroup(rowNumber);\r\n    RowRecord rowRecord = GetRow(startRow);\r\n    int lastRow = WriteHidden(rowRecord, startRow, true);\r\n    if(GetRow(lastRow + 1) != null) {\r\n        GetRow(lastRow + 1).Colapsed = (true);\r\n    } else {\r\n        RowRecord row = CreateRow(lastRow + 1);\r\n        row.Colapsed = (true);\r\n        InsertRow(row);\r\n    }\r\n}", "public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateSkillGroupWithRoomResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[SERIESLIST]\\n\");\r\n    buffer.Append(\"    .seriesNumbers        = \").Append(\" (\").Append(SeriesNumbers).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"[/SERIESLIST]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual QueryConfigHandler GetQueryConfigHandler() {\r\n    return this.queryConfig;\r\n}", "public virtual string GetClassArg() {\r\n    if(null != originalArgs) {\r\n        string className = originalArgs[CLASS_NAME];\r\n        if(null != className) {\r\n            return className;\r\n        }\r\n    }\r\n    return this.GetType().Name;\r\n}"]}