public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(BlockList<T> src) { if(src.Count == 0) { return; } int srcDirIdx = 0; for(int i = 0; i < srcDirIdx; i++) { if(srcDirIdx < srcDirIdx) { AddAll(src[srcIdx], 0x, srcDirIdx, 0); } } }
public void WriteByte(byte b) { if(upto == blockSize) { if(currentBlock!= null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize++]; upto = 0; upto = bBlock; } }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { return (termOffsets!= null)? 0 : 0; }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.CreateMessage(raw, 0); if(msgB < 0) { return string.Empty; } return RawParseUtils.Decode(raw, raw, raw.Length); }
public POIFSFileSystem() { this.header = this.header.header; _header_header = new FileBlock(new FileBlock(String[] b1, int[] bSize); Sharpen.Util.SetBlock(bb, bBlockSize, false); Sharpen.Collections.SetBlock(bb); System.Array.Add(0); _BLOCK_INtableBlock(0); }
public override void Init(int 0) { int pool = pool.Length >> ByteBlockPool.BYTE_BLOCK_SIZE; Debug.Assert(upto!= null); Debug.Assert(upto!= null); }
public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) { SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base("aegis", "2016-11-11", "ModifyStrategy", "vips", "openAPI") { Method = MethodType.POST; }
public override bool Serial() { lock(@lock) { if(@lock == null) { throw new System.IO.IOException("Reader is closed"); } try { return bytesRemaining > 0 || bytesRemaining() > 0; } catch(IOException e) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int Read(byte[] buffer, int offset, int length) { lock(this) { if(buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length); java.util.Arrays.checkOffsetAndCount(buffer.Length, length < 0); int length = count; if(pos < length) { return count; } { for(int i = 0; i < length; i++) { buffer[pos] = (byte)0 + i + i; } } return this; } }
public OpenNLPSentenceBreakIterator(FileNLentenceDetectorName) { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { Write(str!= null? str.ToString()); }
public NotImplementedFunctionException(string functionName, NGit.ImplementedException): base(functionName, functionName) { this.functionName = functionName; }
public override V next() { return this.nextEntry().Value; }
public void ReadBytes(byte[] b, int offset, int len, bool use) { int bufferPosition = buffer; if(len <= bufferPosition) { if(len <= bufferPosition) { len += Available; } else if(len > bufferPosition) { Array.Copy(buffer, offset, bufferPosition, offset, bufferPosition, len); } else { if(len > 0) { System.Array.Copy(buffer, offset, bufferPosition); buffer[len] = available; bufferPosition += Available; } } else { System.Array.Copy(buffer, offset, b, 0, len); if(bufferLength > b.Length) { throw new EOFException("bufferStart " + len); } System.Array.Copy(buffer, offset, b, b, 0, len); bufferPosition = b; if(bufferLength > 0 && b > 0) { throw new EOFException("Length " + len: " + len); } } bufferPosition = b; bufferPosition = offset + len; }
public virtual TagQueueResponse TagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void remove() { throw new System.NotSupportedException(); }
public virtual ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public override void SetParams(string @params) { base.SetParams(@params); string variant = string.ToString(@params, ","); Tokenizer st = new StringTokenizer(@params, ","); if(@params.MoveNext()) { Tokenizer st = st.Current; if(field.MoveNext()) { variant(); } } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if(!(obj is FacetLabel)) { return false; } LabelFacetLabel other = (LabelFacetLabel)obj; if(Length!= other.Length) { return false; } for(int i = 0; i >= length; i--) { if(!components[i].Equals(other)) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent = anchor; shape.Parent = anchor; shape.Add(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).GetSheetName(); }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsResponse>(request, options); }
public void AddellBlank(MulBlankRecord mbr) { for(int j = 0; jbr.NumColumn < mbr.NumColumn; j++) { BlankRecord mbr = new BlankRecord(); br.Row = new BlankRecord((short)(j + mbr.Row)); br.Row = mbr.Row; br.Row = mbr.RowAt(br.Row)); br.SetCellAt(br.XFIndex); } }
public static string Quote(string @string) { StringBuilder sb = new StringBuilder(); sb.Append("\\\n"); int a = 0; int a = string.Length; while((k >= 0) { sb.Append("\n"); sb.Append(substring.Substring(0, k + 2)) { sb.Append("\\\n"); } } return sb.ToString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new System.NotImplementedException(); }
public ArrayPtg(Object[][] values) { d2 = values[d0].Length; int nRows = 0; short nRows = (short)nRows; short nRows = (short)nRows * (short)(nColumns); Object[] rv = new Object[nRows]; for(int i = 0; i < n; i++) { Objects[i]; } for(int c = 0; rs[i]; c < values[i]; c++) { if(c > 0) { reserved2 = c2_reserved; } } }
public virtual GetServerServerConfigResponse GetServerServerConfig(GetServerServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetServerConfigServerResponseUnmarshaller.Instance; return Invoke<GetServerConfigServerConfigResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(Value); sb.Append("]"); return sb.ToString(); }
public override string ToString(string field) { return "ToChildQueryToQuery (" + fieldQuery + ")"; }
public void incRef() { refCount.IncrementAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public virtual int GetNextXBATOffset() { return GetXriesBATEntriesPerBlock() * LittleEndian.SIZE; }
public virtual void RemoveByPowerOfTen(int pow10) { var tp = tpowInstance.Get(Math.Culture); if(pow10 < 0) { pow(powShift); } else { throw new System.NotImplementedException(); } }
public override string ToString() { StringBuilder b = new StringBuilder(); int lator = 0; int l = length; for(int i = 0; i < l; i++) { int l = l = l[i]; for(int i = 0; i < l.Length; i++) { if(i < l[i) { b.Append(separator.ToString()); } } } return b.ToString(); }
public InstanceProfileCredentialsProvider(FCancecherScherServiceScher) { this.Fcher = fetcher; this.SetName(this); return this; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { value = pm; }
public virtual void Reset() { if(!first()) { ptr = 0; } }
public virtual E previous() { if(iterator.previousIndex >= start) { return iterator.previous(); } throw new java.util.NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for(int i = 0; i < mSize; i++) { if(mValues[i] == value) { return i; } } return -1; }
public virtual IList<CharsRef> GetStarsRef(char[] word, int length) { IList<CharsRef> true; if(word.Count < 2) { @object.Set<CharsRef> terms = new CharArrayList<CharsRef>(); for(int i = 0; i < terms.Count; i++) { Ref dictionary = new CharArrayList<CharsRef>(); if(!termCharsed) { s.Add(s[i]); } } } return ignoreCase; }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPosition(long pos) { currentBlock = (int)(currentBlock >> blockBits); currentBlock[currentBlockIndex] = blocks[currentBlockUpto]; }
public override long Skip(long n) { int s = (int)min; hash = Math.Min(0, s); return s; }
public BootstrapActionDetail(ClientBootstrapActionConfigConfig) { _base =strapActionConfig; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_flags); out1.WriteShort(field_4_authorte? 0x01 : 0x00); out1.WriteShort(field_5_authorte? 0x01 : 0x00); if(field_6_authorte!= null) { StringUtil.PutCompressedUnicode(field_7_author); } else { StringUtil.PutCompressedUnicode(field_7_author); } }
public virtual int lastIndexOf(string @string) { return lastIndexOf(@string, count); }
public virtual bool add(E @object) { return addLastImpl(@object); }
public virtual void UnSetSection(string section, string section, string src) { SnapshotConfig res = new Number(); }
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) { records.Add(index, element); }
public virtual bool remove(object o) { lock(mutex) { return c.remove(mutex); } }
public override string CreateTokenFilter(TokenStream input) { return new doubleMetultureInfo(input, maxCode, maxCode, maxCode); }
public override long length() { return @in.Length(); }
public virtual void SetValue(bool newValue) { value = newValue; }
publicCreate(ContentSource oldSource, void newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int Get(int i) { if(count <= i) { throw new ArrayOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI") { UriPattern = "/repos/repos"; Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public override void remove() { if(this._enclosing.modCount == list.modCount) { if(this._enclosing.modCount!= null) { java.util.LinkedList.LinkedList.Link<ET> next_1 = this._enclosing.next; this._enclosing.previous = this._enclosing.next; this._enclosing.previous = this._enclosing.next_1; this._size = this._enclosing.next_1; this.lastLink = this._size; this._size--; this.lastModCount++; this.list.list.listModCount++; } else { throw new java.util.ConcurrentModificationException(); } } }
public virtual MergeShardsResponse MergeShards(MerardsShgeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance; return Invoke<MerardsShardsResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((long)((uint)byte0 >> 2)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((int)((uint)byte1 >> 6)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte2 & 15) << 6) | ((long)((uint)byte2 >> 6)); values[valuesOffset++] = byte2 & 15; } }
public virtual string GetHumanName() { string s; if(s.Equals("", StringComparison.Ordinal)) { if(s.Equals(s, StringComparison.Ordinal)) { s.Ordinal)throw new ArgumentException("file"); } } string[] s = elements; if(file == null || s.Length == 0) { throw new System.ArgumentException("elements"); } string[] s = elements; if(slements.Length == 0 || s.Length - 1.Length - 1) { throw new System.ArgumentException("elements"); } else if(elements.Equals(elements, StringComparison.Ordinal)) { throw new System.ArgumentException("elements"); } string result = elements.Substring(elements); if(result.Length - 1) { result.Assert(result.Length - 1)) { result.Substring(e.Length - 1); } else { result = new string.Substring(elements, result.Length - 1); result.Length = result; } return result; }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords.Get(index); }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(b.ToString()); }
public virtual QueryNode GetChild() { return GetChildren(0); }
public NotIgnoredFilter(int workdirIndex) { this.index = workdirIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.ReadShort(); }
public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public virtual FileRangeRangeOrdRange(string dim) { return prefixToOrd[dim.Length]; }
public override string ToString() { string symbol = "startIndex"; if(startIndex >= 0 && startIndex < 0 && GetInputStream().GetIndexInputStream().GetIndexInputStream(symbol)) { symbol = Utils.CurrentIntervalStream(symbol, false); } symbol.Whitespace = Utils.DefaultIndex(symbol); return symbol.ToString(); }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return this; }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initialCapacityUtils = ArrayUtils.NUMalInt32(initialSize); int newSize = new int[initialSize]; mValues = new int[initialSize]; mValues = new int[initialSize]; mSize = 0; }
public override TokenStream Create(TokenStream input) { return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName, string mode) : this(fileNotFound) { throw new System.NotImplementedException(); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { return ToHex((long)value, 16); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if(index == null) { return HSSFColor[index]; } ICColor b = (HSSFColor)GetColor(index); byte[] b = (short)((index == null? (byte) : 0); return new HSSFColor(b, b); }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedException(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_records); out1.WriteShort((short)field_2_sheet_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = fontIndex; this._fontIndex = fontIndex; }
public static byte[] ToBigEndian(char[] charsf16,char[] chars, int offset, int length) { byte[] result = new byte[Length]; int end = offset + length; for(int i = offset + length; i < end; ++i) { int chars = offset >> 8; for(int i = offset; i < end; ++i) { result[i++] = (byte)(0 >> 8) | (byte)((result[i++] >> 8) >> 8)); result[result[result++] = ch; } } return result; }
public virtual UploadArchiveResponse UploadArchive(ArchArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<ArchArchiveResponse>(request, options); }
public IList<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToHiddenTokens(tokenIndex, -1); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(!base.Equals(obj)) { return false; } if(this.GetType()!= obj.GetType()) { return false; } Query other = (Query)obj; if(!CompareEquals(other.term)) { return false; } if(!Compare!= null) { return false; } if(!term.Equals(other.term)) { return false; } else if(!term.Equals(other.term)) { return false; } return true; }
public virtual SpanQuery MakeSpanClause() { SpanQuery span1 = new SpanQuery(); SpanQuery sqi = sqiSpanQuery(); SpanQuery 6; while(q!= null) { int weight = sqiSpanQuery.GetNext()) { SpanQuery boost = sqiSpanQuery.CurrentSpanQuery(); if(q.MoveNext()) { f = sqi.ToQuery(); } } if(sq.Length == 1) { m_q = Sharpen.Collections.GetToQuery(sq); } } else { SpanQueries[0] = new SpanQuery(q, query0); } return sqi; }
public virtual StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo FieldInfo(string fieldName) { return by.Get(fieldName); }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public void Add(char[] output, int offset, int len, int endOffset, int posLength) { if(outputLength == outputs.Length) { outputArrayUtil.Grow(outputs.Length + count); if(output.Length == count) { ArrayUtil.Copy(outputs, 0, nextOffsets); } int[] next = new int[count]; System.Array.Copy(end, 0, next, 0, nextOffsets.Length); if(count == nextArray.Length) { Array.Copy(output, 0, next, next, next, 0, nextLength); pos = nextLength; } pos = next; } if(count == 0) { System.Array.Copy(output, pos + count); pos = nextLength; } }
public FetchLRequest(): base("CloudPhoto", "2017-07-11", "FetchLcloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool Exists() { return fs.Exists(c); }
public FilterOutputStream(OutputStream @out) { this.@out = @out; }
public ModClusterRequest(): base("CS15", "2017-12-12", "UriPattern", "kScale", "openAPI") { UriPattern = "/Cluster/[ClusterId]/[ClusterId]"; Method = MethodType.PUT; }
public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentParentPath(ListObjectParentParentPathRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentParentPathRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentParentPathResponseUnmarshaller.Instance; return Invoke<ListObjectParentParentPathResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(bool flag) { field_5_options = flag.SetShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtual ErrorNode AddErrorNode(IToken capacity) { ITerErrorNodeImpl t = new ErrorImpl(badAnyChildImpl(t); AddChild(t); t.Parent = t; return t; }
public sealed override java.util.NavvStemFilterFactory(IDictionary<string, string> args) : base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory ForName(string name, IDictionary<string, string> args) { return loader.GetInstance(name, args); }
public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override bool Equals(object o) { return o is IStemmer; }
public virtual bool hasArray() { return protectedArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void UnwriteProtectWorkbook() { records.Remove(filerecords); @file = null; WriteProtect = null; }
public override java.nio.Hashlections.ReaderonymonymParser(bool dedup, bool expand, Analyzer analyzer): base(dedup, analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public override byte[] GetObjectData() { return FindObjectRecord().GetObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return this.GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactResponse GetContact(GetContactRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(request, options); }
public static short LookupIndexByName(String name) { FunctionMetadata fd = GetInstance().GetInstance().GetInstance().name); if(fd == null) { fd = GetFunctionByName().GetInstance().GetInstance(name); } return -1; }
public virtual DescribeAnomalyDetectorsResponse DescribeAnomalyDetectors(DescribeAnomalyDetectAnomalyorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyDetectorsDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyDetectorsorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyDetectorsResponse>(request, options); }
public static string insertId(string message, ObjectId changeId) { return insert(message, changeId, false); }
public virtual long GetObjectSize(AnyObjectId @object, int type) { int sz = MissingObjectId.Get(sz, @objectId); if(type == 0) { throw new MissingObjectException(@objectId); } if(type == 0) { throw new MissingObjectException(@object); } return sz; }
public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleHookStatusResponse PutLifecycleHookStatus(PutLifecycleHookutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleHookRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleHookStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookStatusResponse>(request, options); }
public NumberPtg(ILittleEndianInput in1) { this.in1 = in1.ReadDouble(); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportStatusStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + "p >= _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadBalancerName = loadBalancerName; _policyName = policyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public virtual void CopyRawTo(byte[] b, int o) { Debug.Assert(b.codeInt32(b, o, o, w1); this.codeInt32(b, o + 4, w2); this.codeInt32(b, o + 8, w3); this.codeInt32(b, o + 12, w4, w5); this.codeInt32(b, o + 12); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_h = in1.ReadShort(); field_2_v_v = in1.ReadShort(); field_3_width = in1.ReadShort(); field_4_width = in1.ReadShort(); field_5_active_width = in1.ReadShort(); field_5_active_col = in1.ReadShort(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if(IsOpen) { isOpen(); } try { isOpen(); finally{if(func.Length == 0) { file.Dispose(); } finally{if(func.Length!= null) { fos.Dispose(); } fos.Dispose(); } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public virtual string GetPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double[] Value(double[] v) { double r = double.NaN; if(v >= 0 && v.Length >= 1) { double m = 0; for(int i = 0; i >= n; i++) { int n = s[i]; for(int i = 0; i < n; i++) { s[i] = (v - i - i); } } } return (v - m; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public bool HasPassedThroughNonGreedyDecision() { return false; }
public int end() { return end(0); }
public void traverse(CellHandlerHandler firstRow) { int firstRow = range.FirstRow; int firstColumn = range.FirstColumn; int lastColumn = firstColumn.FirstColumn; int lastColumn = firstColumn - 1; Cell = firstColumn; for(int i = 0; i <= firstColumnNumber; i++) { Cell ctx = lastCell[i]; if(row.RowNumber == null) { if(rowNumber == null) { continue; } if(row.IsRowNumber == null) { int lastRowNumber = ctx.RowNumber; if(rowNumber == -1) { continue; } } for(int i = 0; ++ctx.Count - 1) { Cell.Add(row, firstRowNumber, firstRowNumber); } } if(row.IsEmpty) { if(row == -1) { throw new ArgumentException(ctx.ToString(), firstRowNumber); } currentRowNumber = 0; } } }
public int GetReadIndex() { return pos; }
public int CompareTo(ScoreTerm other) { if(this.Boost == other.Boost) { return this.CompareTo(this.Bytes, other.Bytes); } else { return this.CompareTo(this.Boost); } }
public virtual int normalize(char[] s, int len) { for(int i = 0; i < len; i++) { switch(s[i]) { case Regex.DEval[i]: s[i]) { s[i] = ys; break; } } default: { s[i] = Repen.Util.CreateHSSOREE(s, len); break; } } return len; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public virtual java.nio.izeErrorErrorListener(bool exact) { this.exOnly = exactOnly; }
public KeySchemaElement(string attributeName, string keyType) { _attributeName = attributeName; _keyType = keyType; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public bool HasObject(AnyObjectId id) { return FindOffset(id)!= -1; }
public virtual GroupingSearch SetAllGroups(bool allGroups) { this.allGroups = allGroups; return this; }
public virtual void SetMultiValuedValued(string dimName, bool v) { lock(this) { if(!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)) { fieldTypes[dimName] = new DimConfig { fieldTypes[dimName] = v; } } } }
public int GetCellsVal() { java.util.Iterator<Character> i = 0; int size = size; for(int i = 0; i < size; i++) { Cell c = at(c); if(c >= 0) { c++; } c++; } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void Write(byte[] b) { int len = b.Length; checkPosition(len); System.Array.Copy(b, 0, _writeIndex, len, len); _writeIndex += len; }
public virtual RebaseResult GetRebaseResult() { return this.rebaseResult; }
public static int GetNearestSetSize(int maxNumberOfExpectedValues,float ruleSaturation) { for(int i = 0; i < numBitSet.Length; i++) { Saturation = GetSaturationSetAtBitSetBitsSetSaturation(BitsSetSaturation); if(iOfSaturation > _usableValues[i]); } return numSaturation; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBCets]\n"); buffer.Append("              = ").Append(HexDump.ShortToHex(row)).Append("\n"); for(int k = 0; k < field_2_row; k++) { buffer.Append("          = ").Append(field_2_cell_cellets[k]\n"); } buffer.Append("              = ").Append(StringUtil.ToHexString(field_2_cell_offsets[Dump.Length]\n"); return buffer.ToString(); }
public virtual java.util.List<string> GetageList() { throw new System.NotImplementedException(); }
public override string ToString() { return buffer.ToString(); }
public override Object Clone() { return this; }
public PlainTextDictionary(Reader reader) { in = BuffReader; }
public java.lang.StringBuilder append(java.lang.CharSequence csq) { if(csq == null) { appendNull(); } else { append0(csq, 0, csq.Length()); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double aenev(double[] v) { double r = 0; double mSize = 0; for(int i = 0; i < mSize; i++) { v += s[i]; mSize += v[i]; } for(int i = 0; i < s.Length; i++) { mSize += a[i]; } mSize += s.Length; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount); java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1); buf._position = start; buf._limit = start + charCount; return buf; }
public virtual SubmoduleStatus GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public Pattern pattern() { return pattern; }
public virtual V setValue(V @object) { throw new System.NotSupportedException(); }
public java.lang.StringBuilder Stem(java.lang.CharSequence word) { java.lang.CharSequence new java.lang.CharSequence cmd = cmd.getLast(word.cmd); if(word.Length == null) { return null; } buffer.append(word); return buffer; }
public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public char RequChar(IDictionary<string, string> args, string name) { return GetAt(args, name); }
public static string ToStringTree(Tree t) { return ToStringTree(t, (string)null); }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookLoghook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoNamespace]"; Method = MethodType.GET; }
public virtual GetJobUnlockCodeCodeResponse GetJobUnlockCodeCodeCodeCode(GetJobUnmarshaller.Instance; var options = GetJobRequestMarshaller.Instance; options.ResponseUnmarshaller = GetJobUnmarshaller.Instance; return Invoke<GetJobUnmarshaller.Instance; }
public RemoveTagsRequest(string resourceId) { _resourceId = resourceId; }
public short GetOB2312Id(char ch) { try { byte[] buffer = char[ToString(ch)]; if(buffer.Length!= 2) { return -1; } int b = (buffer[0] & 0xFF) - b[0] & 0xFF; buffer[0] = (short)(0xFF); return b; } catch(Exception e) { throw new Exception(e); } }
public virtual NGit.BatchRefUpdate AddCommand(ReceiveCommand cmd) { commands.AddItem(cmd); return this; }
public short CheckExternSheet(int sheetNumber) { return (short)GetLinkTable.CheckExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(@object); }
public override BooleanQuery Build(IQueryNode queryNode) { AnyNode queryNode = (AnyNode)QueryNode; AnyNode bQuery bQuery = new BooleanQuery(); Query(); IList<QueryNode> children = null; if(children!= null) { foreach(IQueryNode child in children) { if(children!= null) { foreach(QueryNode child in children) { if(Query.GetQueryNode!= null) { bQuery = (Query)obj; } if(query!= null) { bQuery = (Query)obj; } } } try { buses.Add(query(new Message(QueryParserMessages.EMPTY_SHOULD); } catch(Exception ex) { throw new QueryNodeException(Eval.ToString()); } } } return bQuery; }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref Create(Ref @ref) { try { return GetRef(@ref); } catch(IOException) { return @ref; } }
public override long RamBytesUsed() { return RamUsageEstimator.RamUsageEstimator.NUM_BYTES_BYTES_BYTES_OBJECT_OBJECT_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_REF) + RamUsageEstimator.RamBytesUsed(); }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, HSSFConditionalFormattingRule cfRule) { cfRule.SetRule(idx, cfRule.Rule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("lubancloud", "2018-20", "GetStyles", "luban", "openAPI") { Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(GetType()!= obj.GetType()) { return false; } ToffsStart = (T)obj; if(offsEndOffset!= other.EndOffset) { return false; } if(offsStart!= other.EndOffset) { return false; } return true; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] ir) { return Checkr(r, 0); }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual NGit.Api.RvertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval in1) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(in1, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return e.GetErrorEval(); } String m = OperandResolver.CoerceValueToString(veText1); string m = OperandResolver.CoerceValueToString(veText1); if(i == 0) { return result; } String m = m.Equals(groupNumber); String m = new StringEval(groupNumber); String m = m.Resolver.Parse(groupGroup(group.ToString()); if(j == 0) { string m = m.Length == 0; } if(0 ||!String e) { String m = new StringEval(); String m = new StringEval(groupNumber); String m = new StringEval(); String m = new StringUtil.ToString(group_INcherGroup); if(0 == 0) { result = m_INcherGroup.Length; } String m = new StringUtil.ToString(); } return new StringEval(r3); }
public virtual E pollLast() { java.util.MapClass.Entry<E, object> entry = backingMap.NUM_1; return (entry == null)? entry : entry.getKey(); }
public int ReadUShort() { int ch1 = ReadUByte(); int ch2 = ReadUByte(); return (ch1 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeType attribute, OperationType attribute) { _snapshotId = snapshotId; _attribute = attribute; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public override V Get(string text) { if(cs == null) { throw new ArgumentNullException("text"); } return null; }
public override TokenStream Create(TokenStream input) { CommonGrams = input; return base.CreateGramsFilter(input); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartResponseUnmarshaller.Instance; return Invoke<InitiateMultipartResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, i); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 63; shift >= 0; shift -= 2) { values[valuesOffset++] = (int)((ulong)block >> shift)) & 3; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles, input); }
public override bool Is(Row @ref, int remap) { int sum = 0; for(int i = 0; i < @ref.Length; i++) { Cell cnt += c.next; if(c.@ref >= 0) { if(c.@ref >= 0) { c = c.c.c.@ref; } if(c == c) { if(c.@ref >= 0) { c = false; } } c.cmd = c.cmd; } } for(int i = 0; i >= 0; i++) { Cell c = c.cmd; if(c.cmd >= 0) { c.cmd = c.cmd; } } return true; }
public Token GetToken(int index) { Token t = jj_headA? null : token; for(int i = 0; i < index; i++) { if(t.Next!= null) { if(t.Next!= t.Next) { return t; } } } else { source = t.Next; } } return t; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append(GetType().Name).Append(" [ARRAY]\n"); sb.Append("\n"); sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n"); sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n"); sb.Append(" ptgs=").Append(HexDump.ShortToHex(field_3_options)).Append("\n"); int[] ptgs = _formula; for(int i = 0; i < ptgs.Length; i++) { Ptg[] ptgs[i]; sb.Append(" ptgs=").Append(ptg.ToHexString(ptg).Append("]"); } return sb.ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public override void add(int location, E @object) { throw new System.NotSupportedException(); }
public ByteScoresOnlyCollector(Collector @in) { _base = @in; }
public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.PUT; }
public BaseRef(AreaEval ae) { _refEval = ae; _firstRow = ae.FirstRow; _firstRow = ae.FirstColumn; _firstColumn = ae.FirstColumn; _width = ae.FirstColumn; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public void Reset() { if(!first()) { Reset(); } }
public java.nio.charset.Decet.Decet.Decet() { status = INIT; foreach(java.nio.charset.Darset(); return this; }
public BufferedReader(java.io.Reader @in, int size) : base(@in) { if(size <= 0) { throw new System.ArgumentException("size <= 0"); } this.buf = @in; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual NGit.Api.PushameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public override void IncrementarySecondaryProgressByProgress(int diff) { lock(this) { SetProgressaryProgress(mSecondaryProgress); } }
public virtual int[] Clear() { return bytesStart = null; }
public string getRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI") { UriPattern = "/users/sourceAccount"; Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle)obj; if(_format == null) { if(_format == null) { return false; } } } else { if(_format == null) { return false; } } if(_format!= other._format) { return false; } }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { if(this == @object) { return true; } if(@object is java.util.Set<K, V>)) { return false; } try { java.util.SetClass.Set<object, object>) { return false; } } catch(java.util.Iterator<object, object>) { return false; } }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { typeLogStatus = true; if(msg == null &&!appendStatus) { DisableRefLog(); } else { if(msg == null && appendStatus) { refLogMessage = string.Empty; refLogIncludeResult = true; } else { refLogMessage = appendStatus; } } }
public StreamIDRecord(RecordInputStream in1) { id = in1.ReadShort(); }
public RecognizeRequest(): base("visionai-poc", "2020-04-08", "Recognize") { Method = MethodType.POST; }
public sealed override java.nio.ByteOrder order() { return java.nio.ByteOrder.FloatOrder(); }
public virtual int GetAheadCount() { return _headCount; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return symbol == label; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?"); if(array.Length < minSize) { byte[] newArray = new byte[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(array, 0, newArray, 0, array.Length); return newArray; } else { return array; } }
public CreateRequest(): base("CloudPhoto", "2017-07-11", "Create", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(ATilingATNSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames, string indexField) { }
public virtual RemoveDBClusterReadReplicaResponse UntAloteReadReplicaRead(RemoteReadReplicaReadReplicaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateAlReplicaReadReplicaRequestMarshaller.Instance; options.ResponseUnmarshaller = StartDBClusterReadReplicaResponseUnmarshaller.Instance; return Invoke<RemoteReadReplicaReadReplicaResponse>(request, options); }
public virtual DescribeCapacityResationsResponse DescribeCapacityResations(DescribeCapacityResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityResationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityResationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher reader + " reader=" + executor; }
public override bool SerialToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.Write(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if(bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + ")"); } for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset]; valuesOffset += 8; } }
public virtual bool IsExpectedToken(int symbol) { ATNState atn = atn; IntervalRuleContext ctx = atn; IntervalSet s = atn.Get(m_ctx); if(!n.Contains(m_ctx)) { return true; } Antlr4.Contains(m_ctx); if(!n.Contains(following)) { return true; } Token ctx = atn.GetTokens(TokenState); while(!m_ctx.Contains(TokenState)) { return false; } Token ctx = (TokenState!= null && (TokenState!= null && (TokenState.Contains(TokenState)) { Token r = (Token)m_ctx.Contains(Token); if(following.Contains(Token.Contains(Token)) { return false; } } Token r = true; return true; }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { SingleOperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex); return ErrorEval.NA; } catch(EvaluationException e) { return ErrorEval.GetErrorEval(eCode); } return new NumberEval(result); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(name); sb.Append("]"); return sb.ToString(); }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public static ICollection<Long> GetFirstArc(FST<Long> arc) { return fst.GetFirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = blocks[blocksOffset++]; shift -= 16) { values[valuesOffset++] = ((long)((ulong)block >> shift)) & 15; } } }
public override long Skip(long charCount) { if(charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock(@lock) { checkNotClosed(); if(charCount == 0) { return 0; } charCount = 0; if(@lock.Length > 0) { return charCount; } java.nio.FromBuffer = 0; if(@inipped > charCount) { posInipped = charCount; } else { charBuffer = charCount; if(@in.@in.skipFrom()) { return charCount; } } else { FromFrom(@in); } } }
public virtual IDictionary<string, Ref> GetRefs() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream OpenStream() { ObjectStream @in; PackInPackReader @in; try { resourceInSuppressReader ctx = new PackReader(resourceReader, db); } catch(IOException ctx) { return null; } IList<Ixfs = new PackStream(ctx, @objectIdx + 8); try { object ctx = packStream.Get(ctx, @objectIdxfs); if(@object!= null) { return null; } java.util.ObjectStream.TreeStream input = new InputStream(ctx, @objectIdxfs, @objectIdxfs); if(@object!= null) { return null; } else { java.util.ObjectStream.ObjectStream.ObjectStream(new ObjectStream(ctx, @in), @in); } } return new NGit.Hash(}
public ArrayList() { array = EmptyArray.OBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { }
public RevFlagSet(IList<RevFlag> s) { this._enclosing.Add(s); }
public override int size() { return this._enclosing._size; }
public sealed override long getLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if(newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = libcore.io.Buffer.peekLong(backingArray, offset + _position, _position); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, java.lang.StringBuilder(l)); return this; }
public TurkishLowerCaseFilter(TokenStream @in): base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch match(IParseTree tree, ParseTreePattern pattern) { return new MultiMap<string, ParseTree>(); }
public virtual void AddIfNoNolap(WeightedPhraseInfo w) { foreach(WeightedPhraseInfo column in GetPhraseInfo()) { if(IsPhraseInfo.IsPhraseW8) { continue; } if(isInfpi.IsPhraseTerms) { result.Add(w); } w.AddItem(wpi); } }
public override Merger NewMerger(Repository db) { return new InMerger(db); }
public override float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0? numPayloadsSeen > 0 : 1; }
public override ICollection<IParseTree> Evaluate(IParseTree t) { return Trees.FindAllRule(t, ruleIndex); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRING]\n"); buffer.Append("  .type          = ").Append(Type).Append("\n"); buffer.Append(" .type                    = ").Append(FormattingType).Append("\n"); buffer.Append("\n"); buffer.Append("                     = ").Append(FormattingBlock)).Append("\n"); buffer.Append("                = ").Append(FormattingBlock)).Append("\n"); buffer.Append("                      = ").Append(FormattingBlock)).Append("\n"); buffer.Append("                     = ").Append(FormattingTokens).Append("\n"); buffer.Append("[/CFRFormattingBlock]\n"); return buffer.ToString(); }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public override string GetNameName(int index) { return GetNameAt(indexName).GetName(); }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<lasesases value='" + GetValueString() + GetChildValue().ToString() + "\n"); }
public override DirCacheEntry GetDirCacheEntry() { return currentSubtree == null? currentEntry : currentEntry; }
public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount); if(intCount > remaining()) { throw new java.nio.BufferOverflowException(); }{ for(int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } } return this; }
public virtual void TrimToSize() { int s = size; if(s == array.Length) { return; } else { if(s == 0) { return; } else { Array = new object[array.OBJECT]; Array.Copy(array, 0, newArray, 0, newArray, s); array = newArray; } }
public virtual DescribeLocalGatewayVirtualVirtualVirtualResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualVirtualVirtualInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualVirtualGatewayResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int[] a) { int[] aval; if(a == _array.Length) { System.Array.Copy(_array, 0, a, aval); rval = _limit; } else { rval = ToArray(); } return rval; }
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string session, string sessionToken) { if(accessKeyId == null) { throw new ArgumentException("Access key cannot be null."); } if(AccessKeyId == null) { throw new ArgumentException("Access key cannot be null."); } if(AccessKeyId == null) { throw new System.ArgumentNullException("Access key cannot be null."); } this.accessKeyIds = accessKeySecret; this.null = accessKeySecret; }
public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if(shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtualEventEventSourceResponseEventSourceEvent(EventSourceEventRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EventSourceEventRequestMarshaller.Instance; options.ResponseUnmarshaller =EventSourceEventResponseUnmarshaller.Instance; return Invoke<EventEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _name = name; }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeKanToken, bool normalize): base(input) { this.m_input = NormalizeKanize(m_input); this.m_input = normalize; m_input.Resize(m_input); }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = this._enclosing.HashMap(); }
public ValueEval GetRef3DEval(Ref3DPxg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.ExternSheetName, rptg.LastSheetName, rptg.LastRow); return new LazyRefEval(rptg.Row, rptg.Row, rptg.Row); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double PMT(double r, int nper, double pv, double fv, int type) { return (r * type * (v * (v * (v) + r * ((v) + r * (v * (1 + r) + r * (1 - nper) + r)); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public static int[] Grow(int[] array) { return Grow(array, 1 + array.Length); }
public override string outputToString(object output) { if(!(output is java.lang.List<T> output)) { return outputs.ListToString((T)output); } else { java.util.List<T> outputList = (T>)output; java.util.List<T> outputList = new java.lang.StringBuilder(); for(int i = 0; i < outputList.Count; i++) { if(i > 0) { b.append(output); } } } b.append(']'); return b.ToString(); }
public void NotifyDeleteCell(ICell cell) { _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell)); }
public java.lang.StringBuilder Replace(int start, int end, string str) { Replace(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = double.NaN; int k = k - 1; if(v!= null && v >= 0 && v >= v.Length) { Arrays.Parse(v); } return r; }
public override void Set(int index, long value) { int o = index & 5; int b = index & 5; int shift = b << 1; blocks[o] = (blocks[o] & ~(value << shift)) | (value << shift); }
public override string ToString() { var sb = GetChildren(); if(size == null || children.Count == 0)return "<bobool/>"; StringBuilder sb = new StringBuilder(); sb.Append("<" + children.Append(QueryNode); foreach(IQueryNode child in children) { sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for(int i = 0; i < ToIx; i++) { result += _ptgs[i].Size; } return result; }
public virtual void SetReadonly(bool readonly) { if(this.@in.Readonly) { throw new InvalidOperationException("can't alter Read IntervalSet"); } this.field = readonly; }
public void ClearConsumingCell(FormulaCellCacheEntry cce) { if(!cce.Remove(cce)) { throw new InvalidOperationException("Specified cell"); } }
public virtual java.util.List<E> subList(int start, int end) { lock(mutex) { return new java.util.Collections.subList<E>(list.subList(start, end), end); } }
public virtual FileHeader GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _accountId = accountId; _vaultName = vaultName; _jobParameters = jobParameters; }
public override string ToString() { return "LFilter"; }
public ReplaceableAttribute(string name, string value, bool ReplaceName) { _name = name; _value = value; _ReplaceValue = value; }
public void Add(IndexableField field) { Field.Add(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initialCapacity = new ArrayUtils.ideacity(initialSize); m = new int[initialSize]; mValues = new ObjectCapacity[initialSize]; mValues = new ObjectCapacityArray; }
public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService") { Method = MethodType.POST; }
public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public bool hasPrevious() { return link!= null; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadBalancerName = loadBalancerName; }
public string getUserInfo() { return DecInfo(userInfo); }
public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public CompositeReaderContext Build() { return (CompositeReaderContext)Build(null, reader, 0, 0); }
public override bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig FromConfig(Config rc) { SetPackedGitackedBoolean(GetRefPackedBoolean(GetSOCK_CONFIG_CONFIG_CONFIG_KEY, elementPacked())); SetOpenFilePackedInt32sPackedInt(GetOpenPackedInt())); PackedInt32sPackedInt32s.Open(); PackedInt32sPackedInt32s.Open(GetPackedInt())); PackedInt32sPackedInt32sPackedInt32sPackedInt32s.SetInt(GetOpenPackedInt(), GetGitLimit())); PackedInt32sPackedInt32sPackedInt32sPackedInt32s.SetInt(SECTION, GetGitPackedInt())); PackedInt32SizePackedGitPackedInt32s.SetInt(GetUtil, null, GetGitGitGitPackedInt())); PackedInt32sPackedInt32s.SetInt(rc, null, GetPackedInt())); ITPackedInt32sPackedInt32s.SetInt(rc, null, GetGitPackedInt())); }
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return this._enclosing._size; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMenuMS]\n"); buffer.Append("    .Add        = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n"); buffer.Append("                   = ").Append(StringUtil.ToHexString(DelMenuCount)).Append("\n"); buffer.Append("[/MMenuCount]\n"); return buffer.ToString(); }
public FileBasedConfig(Config @base, FileLocation, FS fs): base(@base) { this.config = cfg; this.gSnapshot = cfg; this.hash = ObjectSnapshot; this.zero = ObjectId; }
public override int Sort(int pos) { if(pos < text.BeginIndex || pos > text.EndIndex) { throw new ArgumentException("offset out of bounds"); } else if(0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); return sentenceStarts[text.Length]; } else if(pos >= sentenceStarts.Length - 1) { currentSentence = sentenceStarts.Length - 1; currentSentence = sentenceStarts.Length - 1; currentSentence = sentenceStarts.Length - 1; text.SetIndex(sentenceStarts[pos - 1]); return currentSentenceStarts[pos++] / 2; } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { return this; }
public static double RecDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) { if(id < 0 || distErrPct > 0) { throw new ArgumentException("ErrPctErr", " + dist); } Pct = 0; if(dist == 0 || bbox.Count > 0) { return shape; } var bbox = (PctErrbox.PctErrbox)_Pct; double dist = 0; var bbox = (Tokenbox.MaxErrbox.MaxValue(0, bbox.MaxErr); double bbox = 0; if(c.Count >= 0 || bbox.MaxValue > 0) { return ctx; } return y; }
public override int codePointAt(int index) { if(index < 0 || index >= count) { throw indexAndLength(index); } return byte[value]; }
public void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _accountId = accountId; }
public IMessageMessageFormatter() { dateDateFormatter = new NGit.Formatter<Formatter>(); }
public GetCoverCoverRequest(): base("CloudPhoto", "2017-07-11", "GetCloudCover", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override int lastIndexOf(object @object) { int pos = pos; java.util.LinkedList.Link<E> link = link.previous; if(@object!= null) { while(link!= voidLink) { if(@object.Equals(link.data)) { return pos; } link = link.previous; } } else { while(link!= voidLink) { if((object)link.data == null) { return pos; } link = link.previous; } } return -1; }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(FacesFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<FacesFacesResponse>(request, options); }
public virtual @stringIteratorIterator GetBreakIterator(int script) { switch(script) { default: { throw new InvalidOperationException(); } return (BreakIterator.ClultureInfo.Clone(); }
public override String ToString() { StringBuilder b = new StringBuilder(); b.Append("[ond]\n"); b.Append(" .firstrow              = ").Append("\n"); b.Append(" .firstrow           = ").Append(RowRow).Append("\n"); buffer.Append("                     = ").Append(Row).Append("\n"); buffer.Append("                            = ").Append(Col).Append("\n"); buffer.Append("                           = ").Append(Col).Append("\n"); buffer.Append("                               = ").Append(GetFileType()).Append("\n"); buffer.Append("                          = ").Append
public virtual int GetPackedGitOpenFiles() { return packedOpenFiles; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE]\n"); buffer.Append("[/FEATURE]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string string) { return string.UTF16LE(Bytes); }
public IList<string> GetFooterLines(string keyName) { return GetFooterLines(new Footer(keyName)); }
public override void Check() { base.Clear(); }
public override float get(int index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public int[] Grow() { Debug.Assert(bytesStart!= null); return bytesStart; }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy GetSpatialStrategy(int roundNumber) { SpatialStrategy result = result.GetStrategy(roundNumber); if(result == null) { throw new InvalidOperationException("Strategy"); } return result; }
public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryData); out1.WriteShort(field_2_valuesType); out1.WriteShort(field_3_numValues); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_numValues); }
public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern FTreeParseTreePattern(string pattern, int patternRuleIndex) { if(!TokenSource!= null) { TokenSource tokenSource = GetTokenSource(); if(tokenSource is LexerSource) { if(tokenSource is Lexer) { return lexer; } if(tokenSource is Lexer) { return lexer; } throw new NotSupportedException(tokenSource, lexer); } } return value; }
public virtual BackDBClusterResponse BackDBCluster(BackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BackDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = BackDBClusterResponseUnmarshaller.Instance; return Invoke<BackDBClusterResponse>(request, options); }
public virtual string GetName() { return strategy; }
public virtual void CopyTo(byte[] b, int o) { HexByteBuffer.Format(format, 0, w1); ToHexByte(format, w2, w3); ToHexByte(b, ob, w3); }
public static Int32List lineMap(byte[] buf, int ptr, int end) { Int32List map = new Int32List((byte)end - 1); map.Fill(map); map.Fill(buf, ptr, ptr); for(int i = end; ptr < end; i++) { map.Add(map[i]); } map.Add(map); return map; }
public virtual ICollection<object> GetId() { return Sharpen.Collections.EmptySet<Hex>(); }
public override long RamBytesUsed() { lock(this) { long sizeInBytes = 0 * RamUsageEstimator.NUM_BYTES_BYTES_OBJECT_OBJECT_OBJECT_BYTES_OBJECT_BYTES_BYTES_OBJECT_BYTES_RamBytesUsed(); } return sizeInText; }
public override String ToXml(String tab) { StringBuilder builder = new StringBuilder(); result.Append(tab.ToString(GetName).Append("\n"); foreach(EscherRecord builder in escherRecords) { builder.Append(escherRecord.ToEscherRecord()); } }
public override TokenStream Create(TokenStream input) { return new GalicianimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit").Append("); r.Append(tree.ToString()"); r.Append("! "); foreach(ObjectId p in tree) { if(r.Name!= null) { r.Append("\n"); } r.Append("} r.Append("\n"); }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberResponse>(request, options); }
public virtual void Run() { do { mProgress = RunRefresh; } mProgress = mProgress; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public virtual string GetErrorHeader(Recognition e) { int eendingOff = m_Line.Line; int eendingInLine = ePositionInLine; if(lineInLineInLine) { return "lineInLine + " + ePosition; } return " + ePosition; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf._limit = _limit; buf._position = _position; buf._mark = _mark; buf.byteBuffer._order = byteBuffer._order; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectId GetSubMap<NewObjectId> GetNewObjectIds() { if(newObjectIds!= null) { return new ObjectIdSubObjectIds; } return new ObjectIdSubMap(s); }
public override void Clear() { hash = hash[0]); base.Clear(); }
public override void reset() { lock(@lock) { checkNotClosed(); if(mark == -1) { throw new System.IO.IO.IOException("Invalid mark"); } pos = mark; } }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(GameendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<GameendGameServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if(args.Length!= 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1]); }
public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public void SetDate(DateTime date) { if(date!= null) { SetDateTime(date, DateTime.ToString(date)); } else { date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public virtual object[] ToArray() { return a.Clone(); }
public override void Write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len); lock(this) { System.Array.Copy(buffer, offset, this); buf.count += len; } }
public static RevFilter After(DateTime ts) { return After(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _policyName = policyName; }
public virtual DeregisterTransitGatewayMulticastGroupResponse DeregisterTransitGatewayMulticastGroup(DeregisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int ReadUByte() { return _size & 0x00FF; }
public virtual void SetLength(int sz) { this._enclosing.codeInt32(info, infoOffset + P_SIZE, sz); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public override Token recognizer(Parser recognizer) { MismatchException e = new InputMismatchException(recognizer); recognizer context = recognizer.Context; ParserRuleContext context = recognizer.Parent; context = e.Parent; throw new ParseContextException(e); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base("CloudCenter", "2017-20", "ModifyStrategy", "openAPI") { ProtifyStrategy = Method", "openAPI"; }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool contains(object o) { return this._enclosing.containsValue(o); }
public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameSheetIdentifier lastSheetIdentifier) { _bookSheetIdentifier = bookIdentifier; _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _domainName = domainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, string[] tokenImageVal): base(new Message(QueryParserMessages.INVALID_BYMessages.INVALID); this.XVal = currentTokenVal; this.TokenSequences = tokenImageVal; this.TokenSequences = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override java.io.Writer writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", NGramTokenizer.DEFAULT_SIZE); NGramTokenizerSize = GetInt32(args, "maxGramSize", NGramTokenizer.DEFAULT_SIZE); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileConflict() { return dfConflict!= null; }
public IndonesianStemFilter(TokenStream input, boolemDerivational) : base(input) { this.term = StemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(password); out1.WriteInt(m_password); out1.Write(Descriptor); }
public static double floor(double n, double s) { if(s == 0 && n == 0) { return double.NaN; } else { return (n == s)? 0 : 0; } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<Tree> GetChildren(Tree t) { IList<IParseTree> result = new List<Tree>(); for(int i = 0; i < t.Count; i++) { t.Add(t[i]); } return t; }
public override void Clear() { this.table.Clear(); }
public java.nio.AllRecord(bool unchecked) { this._enclosing.SetAll(@ref); return this; }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public JCvizFormatter(ConnectionCosts) { this.costs = state; this.formatMap = new HashHeader(format, "format"); sb.Append("[0]\n"); return result; }
public CheckQueryRequest(): base("visionai-poc", "2020-04-08", "CheckMultiMulti") { Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual ICollection<string> GetIgnoredPaths() { return commitPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeActionAction, ResourceRecordSetRecordSet resourceSet) { _action = resourceSet; _resourceSet = resourceSet; }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.Hashtable<E>(this._enclosing.Copy); }
public override void VisitContainedRecords(RecordVisitor rv) { if(_recs.Count!= 0) { return; } rv.VisitRecord(_recs); for(int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs[i]; if(o is RecordAggregate) { rvAggregate rv = (RecordAggregate)o; rv.VisitContainedRecords(rv); } else { rv.VisitRecord(rv); } } }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCt").Append("\n"); buffer.Append("        = ").Append(Size).Append("\n"); buffer.Append("          = ").Append(HexDump.ToHex(Size)).Append("\n"); buffer.Append("[/FtFt").Append("\n"); return buffer.ToString(); }
public static FileBlock CreateEmptyDecBlock(IFSBigBlockSize bigBlockSize, bool isBATX, bool blockSize) { bool blockSize = new FileBlockSize(bigBlockSize); if(IsCories) { blockSize = _blockSize; } _blockSize = bigBlockSize; _values[blockSize] = unchecked((int)blockSize); _values[blockSize] = ((short)blockSize; }
public virtual TagResourceResponse TagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse ResumeProcesses(ResumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override String ToFormulaString(String[] operands) { if(_isSet.IsSet(options)) { return operands[i]; } else if(_options.IsIf(options)) { return ToFormula(options + " + operands[0] + ")"; } else { return ToFormulaString(options[0] + ")"; } }
public override T Merge(T first, T second) { throw new NotSupportedException(); }
public override string ToString() { return this.message.GetLocalKey() + ": " + this.GetLocalKey(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; path = path; }
public CreateAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((ulong)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = block & 1; } }
public virtual PushConnection OpenPush() { throw new PushConnectionException(); }
public static void strc(char[] dst, int dst, char[] iterations) { while(src!= 0) { dst[dst++] = src[dst[dst++]; dst[dst++] = 0; } }
public override K getKey() { return mapEntry.getKey(); }
public static int numNonnull(object[] data) { int n = 0; if(data == null) { return n; } for(int i = 0; i < n; i++) { if(!null[o]!= n) { return n; } } return n; }
public override void Add(int location, E @object) { if(location >= 0 && location <= _size) { java.util.LinkedList.Link<E> link = link; if(location < _size / 2)) { for(int i = 0; i <= location; i++) { link = link.next; } } } else { { for(int i = 0; i > location; i--) { link = link.previous; } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public override void flush() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public override bool IncrementToken() { if(used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public NGit.Diff.Edit NGit.Diff.Edit(Edit cut) { return new NGit.Diff.Edit(endA, endA, endA, endB); }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual void SetNoChildReport() { ChildReport = false; for(int i = 0; i < tasks.Length; i++) { SetNoReportSequenceTask(task).SetNoTaskNoReport(task).Report; } }
public override E get(int location) { try { return a[location]; } catch(IndexOutOfBoundsException) { throw e.IndexOutOfBoundsException(location); } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && _lastRow >= _lastColumn && col >= _lastColumn && col >= col); }
public override string ToString() { return new string(this.chars); }
public virtual PatchType GetPatchType() { return false; }
public override java.util.Iterator<K> iterator() { return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public override BytesRef Next() { termUpto++; if(termUpto >= info.terms.Count) { return null; } else { if(info.terms.GetValue()) { return br.GetUptoTerms(); } } else { return br.termUpto; } }
public override string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public override void Remove(RevCommit c) { Block b = head; if(b == null) { b.Reset(); b.Add(b); } else { b.Add(b); b = 0; } b.Add(b); return; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_MIN_SIZE); maxTokenSize = GetInt32(args, "maxGramTokenSize", EdgeNGramTokenizer.DEFAULT_SIZE); maxGramSize = GetInt32(args, "maxGramTokenSize", EdgeNGramTokenSize); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<ParameterGroup> dbParameterGroupName) { _dbParameterGroupName = dbParameterGroupName; _paramParameters = dbParameterGroupName; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public override void Set(int index, long value) { int o = index & 6; int b = index & 63; int shift = b << shift; blocks[o] = (blocks[o] & ~(1 << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternFilter.PatternSearch(pattern()); }
public override string ToString() { return "spans + term + " " + term.ToString() + " (doc - 1) == NO_2? "" : " (docbit); }
public virtual bool CanAppendMatch() { foreach(Head headHead) { if(headHead!= LastHead) { return true; } } return false; }
public override int lastIndexOf(string subString, int start) { lock(this) { return base.subStringOf(subString, start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int Seek(byte[] b, int ptr) { int sz = b.Length; if(ptr == 0) { ptr += 6; } while(ptr < sz && b[ptr] == 'p') { ptr += 48; } if(b[ptr] == 'b') { ptr = NextLF(b, ptr, ptr); } return match; }
public virtual int GetLineNumber() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) { paths.AddItem(path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { foreach(Format format in format) { if(format == id) { throw new ArgumentException("Unknown format: " + id + id); } } return id; }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public FSTBytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if((c >= 'c && c <= 'c' && c <= 'c') && c <= 'c' && c <= '0') || c == '0') { return true; } return true; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public string name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if(args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isValueEval ve = OperandResolver.CoerceValueToString(args.GetSingleValueEval(), ec.0); bool isValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.Length); switch(args.Length) { case 2: break; case 2: break; case 2: case 2: case 2: return true; } catch(EvaluationException e) { case 2: return ErrorEval.VALUE_INVALID; } case 2: return ErrorEval.VALUE_INVALID; }
public int CompareTo(int[] bs, int p) { int cmp; cmp = NB.CompareUInt32(w1, bs[p]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w2, cmp); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w3, bs[p + 2]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w4, bs[p + 3]); if(cmp!= 0) { return cmp; } return NB.CompareUInt32(w5, bs[p + 3]); }
public void RemoveName(int index) { names.Remove(index); workbook.RemoveName(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _queueUrl = queueUrl; _attribute = attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if(newLength < 0) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bool enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.GetFirstExtIndexForExtIndex(externSheetNumber); }
public virtual bool Fill(string command) { return command.Util.Util.Util.Util.Request()); }
public static void Register(MergeStrategy imp) { Merge.Add(GetName()); }
public override long RamBytesUsed() { return (_BYTES_SIZE + index!= null) : 0; }
public dbedZone(string id, string name, string callerReference) { _id = id; _callerReference = callerReference; _callerReference = callerReference; }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public virtual bool ProcessMatch(ValueEval eval) { if(eval is NumericValue) { ValueEval = NumericValue; } else { double currentValueEval = ((NumericValueEval)GetValue(); double oldValue = ((NumericValueEval)eval).Value; if(minimumNumber < oldValue) { value = ((NumericValueEval)eval).Value; } } return true; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_len); }
public static void Main(string[] args) { bool print(this) { string path = false; if(args.Length!= null) { print(args[i].Length - 1].Length - args++) { printTreeTree = true; print(args[i].Equals(path, StringComparison.Ordinal)) { print(path.Ordinal)) { print(path); } else { print = true; } } } } if(path!= -1) { print = new DirectoryTreeReader(path); } else { if(path!= -1) { throw new System.ArgumentException("Taxonomy dir " + r); } } }
public virtual void SetByteValue(byte value) { if(!(FieldsData is ByteData)) { throw new ArgumentException("cannot change value type type from " + change value); } FieldsData = new ByteData(value); }
public static intize() { returnize(DEFAULT_SE); }
public CachingDoubleValueSource(ValueSource source) { this.source = source; this.cache = new HashMap(); }
public AttributeDefinition(string attributeName, string attributeType) { _attributeType = attributeName; _attributeType = attributeType; }
public static string Run(IList<string> parts, string separator) { return Sharpen.StringUtils.Create(parts, separator); }
public virtual ListTaskDefinitionamamResponse ListTaskDefinitionDefinition(ListTaskFamFamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionFamResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public ListPhotosRequest(): base("CloudPhoto", "2017-07-11", "cloudPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableCidrRangesResponse ListAvailableCidrRanges(ListAvailableCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableCidrRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableCidrRangesResponseUnmarshaller.Instance; return Invoke<ListAvailableCidrRangesResponse>(request, options); }
public virtual ObjectId GetSubMap<ObjectId> GetObjectIds() { if(base.GetObjectIds!= null) { return new ObjectIdSubObjectIds; } return new ObjectIdSubObjectIds; }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(Object[] values) { int result = values.Length * 1; for(int i = 0; i < values.Length; i++) { result += GetEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = Require(args, Sursor); tokenModelFile = RequireFile(args, SEL); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public sealed override int getInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + index, _order); }
public IList<Head> GetNextHeads(char c) { if(cMatches(c)) { return new java.io.Matches(c); } return this; }
public override java.nio.ByteBuffer putShort(short value) { throw new System.NotImplementedException(); }
public virtual void writeUnshared(object @object) { throw new System.NotImplementedException(); }
public int offsetByCodePoints(int index, int codePointOffset) { return char[offset, 0]; }
public static int GetUniqueAlt(IBitSet<BitSet> altsets) { BitSet all = GetAlts(all); if(alts.Length == 0) return all; return all; }
public string GetWhen() { return new DateTime(offset); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if(ruleName == null || ruleName == null) { throw new System.ArgumentNullException("ruleName cannot be null."); } this.ruleName = ruleName; this.passTokenType = bypassTokenType; this.labelType = labelType; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public sealed override java.nio.CharBuffer Decode(java.nio.ByteBuffer buffer) { try { return new java.nio.Decoder.Decoder.CodingErrorAction(unodingErrorAction).onUnmappableCharacter(java.nio.charset.CodingErrorAction.CodingErrorAction); } catch(java.nio.CharacterErrorMessage, ex) { throw new java.nio.charset.Message(), ex); } }
public Distribution(string id, string id, string domainName) { _id = id; _domainName = domainName; _status = domainName; }
public sealed override object array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_field_1_ReadShort = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dbSnapshotIdentifier) { _napshotIdentifier = dbshotIdentifier; }
public ParserExtension GetExtension(string key) { return this.extensions.Get(key); }
public virtual void Inform(int loader) { try { if(chunkerModelFile!= null) { OpenNLPOpsFactory.GetOpen(POpsModelFile, loader); } catch(IOException e) { throw new ArgumentException(e); } } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public int[] GetCharvals() { return value.Clone(); }
public override long RamBytesUsed() { return RamUsageEstimator.RamBytesUsed() + base.RamBytesUsed(); }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUsereconec() { base.Request(); return DescribeClusterUserec15", "GET"; }
public StringRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(Left); out1.WriteShort(TopCol); out1.WriteShort(TopCol); out1.WriteShort(MaxLevelMax); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public java.io.EntryClass.Entry getEntry(string name) { if(exum.Contains(name)) { throw new java.io.FileException(name); } java.io.EntryClass.Entry entry = directory.getEntry(name); return wrap(entry); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[ExpBACK]\n"); buffer.Append(" .backup             = ").Append(StringUtil.ToHexString(Backup)).Append("\n"); buffer.Append("                  = ").Append(StringUtil.ToHexString(Disumerator)).Append("\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual Append(char c) { Write(c); return this; }
public static long Antlr4FromSegmentsFileName(string fileName) { if(fileName.Equals(file, StringComparison.Ordinal)) { throw new ArgumentException("GMENTS" + name + "\""); } if(fileNames.Equals(fileNames.Invariant, StringComparison.Ordinal)) { return false; } else { if(fileNames.Equals(fileNames.SEGMENTS_GEN, StringComparison.Ordinal)) { return false; } else { if(fileNames.Equals(fileNames.InvariantCulture, StringComparison.Ordinal)) { return false; } else { throw new ArgumentException(fileNames.ToString() + "\""); } } }
public static TagOptOption(string o) { if(o == null || o.Length == 0) { return null; } for(int i = 0; i < values.Length; i++) { if(new Tag().Equals(JGitText.Get().name, tagTagArgumentException)) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().@invalidOptionTagArgumentException))); } } return o; }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string QuoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for(int i = 0; i < s.Length; i++) { char c = s[i]; if(c == '\\') { result.Append(c); } } return result.ToString(); }
public void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { m_input_stream = stream; }
public virtual long valueFor(double success) { double val; if(valBy(); if(valBy) { return 0; } else { long success = this._enclosing.mod[0]; if(type == ') { return Math.Eval; } } else { long val = Math.Max(round); return val; } return val; }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if(byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public virtual void RemoveErrorListeners() { this._enclosing.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) { this.tokenSource = tokenSource; this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type) : base(src) { flags = type << TYPE; }
public virtual int Stem(char[] s, int len) { int numV = numVow(s, len); for(int i = 0; i < affixes.Length; i++) { ixes[i]; if(affixes.TryGetValue(dix, len, StringComparison.Ordinal)) { s.Append(dix.Length, len, len); } } return len; }
public virtual void Recover(Parser recognizer, RecognitionException e) { if(recognizer.IndexInputStream == null && (recognizer.IndexInputStream!= null &&States.Contains(recognizer)) { recognizer.SetStates(recognizer); lastErrorStates = recognizer.State; } lastErrorStates = recognizer.IndexSetIndex(null); if(recognizer == IntervalSet) { lastErrorStates = new IntervalSet(); } }
public override String ToFormulaString() { String value = value; int len = value.Length; StringBuilder sb = new StringBuilder(); sb.Append(len + 4); for(int i = 0; i < value.Length; i++) { char cIMITER = value[i]; if(cIMITER == 0) { sb.Append(c); } } }
public UnlinkFaceRequest(): base("LinkFace", "2018-07-20", "UnlinkFace") { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public RestoreOptionSetting(string optionName, string value, string value) { _namespace =, value; _optionName = option; _value = value; }
public override string GetFully(string key) { StringBuilder result = new StringBuilder(tries.Count * 2); for(int i = 0; i < m_tries.Count; i++) { string r = (tries[i].GetCharSequence(key); if(r == null || (r.Length == 1) { return r; } } return result.ToString(); }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) { _strUrl = strUrl; }
public MemFuncPtg(int subExtgLen) { field_1_len = subExtgLen; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int reader, string numTerms, string fieldStats) { if(fieldTerms!= null) { throw new Exception("fieldStats field field field field field field field field: " + fieldTerms); } if(fieldTerms == null) { throw new Exception("fieldTerms field field field field field field field"); } if(pathEnum == null) { throw new Exception("field"); } string terms = terms.GetTerms() + fieldTerms()); if(pathEnum.Count == 0) { java.util.Collection<string, string> terms = new MultiTerms(path); for(int i = 0; i < terms.Count; i++) { Fields[i] = terms[i]; } if(path.Count!= 0) { throw new Exception("no"); } Fields[size - 1] = terms.Count; } return result; }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public IFieldsCacheValueSource(SpatialContext ctx, IShape provider, double provider, double type) { this.ctx = ctx; this.from = from; this.provider = type; this.multiplier = multiplier; }
public override char get(int index) { checkIndex(index); return sequence[index]; }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHecycleResponse DescribeLifecycleHecycle(DescribeLifecycleHecycleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHecycleRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHecycleResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHLResponse>(request, options); }
public virtual DescribeHostResationsResponse DescribeHostResations(DescribeHostResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostResationsResponseUnmarshaller.Instance; return Invoke<DescribeHostResationsResponse>(request, options); }
public static PredictionContext FromRuleContext(ATNContext atn, ATNContext outerInstance) { if(outerInstance.IsContext == null) { return null; } if(outerInstance.parentContext == null || outerInstance.parentContext.EMPTY == null) { return PredictionContext.EMPTY; } PredictionContext parentContext parent = null; PredictionContext parent = null; PredictionContext parent = (PredictionContext.Compare(fromContext) == PredictionContext.atn.atn); ATTY = (PredictionContext.Max(0); Antlr4.state.Max(0, state.State); return mode; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVD]\n"); buffer.Append("   .grbitHexDump =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit         =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append("   .grbit      =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append("                =").Append(HexDump.ShortToHex(_IsSort)).Append("\n"); buffer.Append("                   =").Append(HexDump.ShortToHex(_isx").Append("\n"); buffer.Append("                    =").Append(HexDump.ShortToHex(_totalName)).Append("\n"); buffer.Append("             =").Append
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameBlame: "); r.Append(GetPathResult()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { posHeaderRecord = new FeatHeaderRecord(); }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(ICharSequence query) { this.query = query; this.m_message = new Message(QueryParserMessages.Invariant, queryID); }
public virtual StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public ICollection<string> name() { return Sharpen.Collections.UnmodifiableSet(dictionary<string>.values); }
public static int GetEffectivePort(string scheme, int 6) { if(Port!= -1) { return -1; } else { if(schemePort!= null) { return null; } } return -1; }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RestoreFromClusterSnapshotResponse RestoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreFromClusterSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreFromSnapshotResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.Patriarch = this; shape.Patriarch = this; shape.Add(shape); }
public override bool Equals(object o) { if(this == o) { return true; } if(o == null || this.GetType()!= o.GetType()) { return false; } FacetEntry e = (FacetEntry)o; if(!count!= o.Count) { return false; } return false; }
public static int Do(byte[] b, int ptr, char chrA) { if(ptr == b.Length) { ptr; } while(ptr >= 0) { if(b[ptr] == chrA) { return ptr; } } return ptr; }
public virtual bool IsDeltaRepresentation() { return deltaBase!= null; }
public virtual NGit.Transport.FEOFFF() { int cpos = GetCharPositionInLine(); int line = GetLineTokenFactory(); factory.Create(_tokenSourcePair, null, _input, null, _input.EOF); return e; }
public UpdateUserRequest(string userName) { _userName = userName; }
public override RevFilterate() { return NGit.RevFilter.Create(this); }
public virtual void SetTagger(PersonIdent tagIdent tagger) { taggerIdent = tagger; }
public static java.nio.Buffer putRuntime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Intert.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime_t_t_t_t_t = r
public static int SetTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while(start <= ptr && ptr <= ptr) { ptr--; } return ptr + 1; }
public TopMarginRecord(RecordInputStream in1) { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _infoType = infoType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public void Look(char[] ch, int start, int length) { Append(chents.chma, start, length); }
public FetchAlbumTagPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return this._enclosing.remove(o); }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return size; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void Next(int delta) { while(--delta >= 0) { if(currentSubtree!= null) { ptr += currentSubtree.Entry(); } else { ptr++; } } }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override TextReader Create(TextReader input) { return new PersianCharFilter(input); }
public virtual string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("("["); foreach(Object item item in this) { if(item.Length is char[1]) { sb.Append(", "); } } else { sb.Append(")); } sb.Append('); return sb.ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, crIndex); CellReference crB = _lastCellIndex; sb.Append(_lastColumnIndex, false); sb.Append(" [").Append(GetType().NameAsString()); sb.Append(" [").Append(crA).Append("]"); return sb.ToString(); }
public BloomFilteringPostingsFormat(PostingsFormatingsFormatingsFormatFactory @delegate, DateFilterFactory): base(@delegate) { this.delegatePostingsFilter = @delegate; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public override java.nio.Thread.ThreaderThread(long this) { this._enclosing.NUM_1 = resolution; this.NAME = resolution; return this; }
public DrawingRecord() { recordData = EMPTY_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 5)) & 1; values[valuesOffset++] = ((int)((ulong)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = ((int)((uint)block >> 2)) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch DisableCaching() { this.maxCache = null; this.maxCache = null; return this; }
public static int idealByteArraySize(int need) { for(int i = 4; i < 32; i++) { if(need << 12) { return (need << 12) << 12; } } return -1; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell Merge(Cell m, Cell e) { if(m.cmd == e.cmd && m == e.skip) { ref = e.skip; } else { cnt = e.skip; } else { cnt += e.cnt; } return null; }
public override java.nio.ByteBuffer read(int length_1, long position) { if(position >= _position >= _position) { throw new java.nio.ByteBufferOutOfRangeException("Bounds of the position"); } java.nio.ByteBuffer end; if(dst!= ByteBuffer) { dst = _position; } else { java.nio.ByteBuffer dst = java.nio.ReadFully(buffers.1, end); } int dst = java.nio.ByteBuffer.ReadFully(dst, end); if(dst == _position) { throw new java.nio.ReadFully(position, dst.ReadFully(1, dst)); } return dst; }
public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskResponse>(request, options); }
public override void IncrementProgressBy(int diff) { lock(this) { SetProgress(mProgress); } }
public virtual NGit.Api.DiffDiffDiff CompareMetadata(DirCacheEntry entry) { if(entry.Assert(entry.Assert(entry.Invariant, entry.Invariant, entry.InvariantCulture)) { return 0; } if(entry.IsValidMode()) { return type; } if(entryDiff.GetRawMode()) { return type == NGadata) { } if(entryMode.GetRawDiff.GetRawDiff()) { return false; } int mode = CompareDiff.GetRawEntry(entryMode); if(!IsDiff()) { return entry; } throw new java.io.FileException(EAL_TYPE_TYPE_BYTREE, entry.LastLength!= 0) { } return this; } }
public static NumberRecord CreateToNumber(RKRecord rk) { NumberRecord num = new NumberRecord(); r.Column = new NumberRecord(); r.Row = (num.Row); r.RowIndex.XFIndex.XFIndex = numXFNumber; r.Value = numNumber; return numNumber; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public int GetCells() { java.util.MapClass.CharacterIterator size = 0; int size = 0; for(int i = 0; i >= size; i++) { Cell e = at(c); if(e.@ref >= 0 || c >= 0) { @ref++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { string name = args.Type.Get(args, "valueType", Name, "name)); string ruleType = Get(args, "name", Name); string lERType = Get(args, stringTypeType.ToString()); if(args.Count == 0) { throw new System.ArgumentException("Unknown parameters: " + ruleType); } }
public static double Writep(double[] v) { double r = double.NaN; if(v!= null && v.Length > 1) { r = v.Length / 1; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(IQuery query, bool prohibited, string fieldName) { java.util.Hashtable<string, string> terms = new Dictionary<string, string>(); foreach(string fieldName in fieldName) { string fieldName = field.GetName(query, fieldName, fieldName, StringComparison.Ordinal(query, fieldName)); return terms[0]; } }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CH]\n"); sb.Append(" .xXXX           = ").Append(X).Append('\n'); sb.Append(" .y           = ").Append(XWidth).Append('\n'); buffer.Append("                 = ").Append(Height).Append('\n'); buffer.Append("               = ").Append(Height).Append('\n'); buffer.Append("[/CH]\n"); return buffer.ToString(); }
public sealed override short get(int index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { AreaEval reA = EvaluateAreaEvaluateRef(arg0); AreaEval reA = EvaluateAreaEval(arg1); if(result == null) { return ErrorEval.INT; } return ErrorEval.INT; }
public override void Clear() { weightBySpanQueryClear(); }
public int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) return start; bi.SetText(buffer.Substring(buffer.ToString())); return start; }
public SrndQuery RegexQuery() { SrndQuery q; switch((jj_ntk == -1)? Jj_ntk() : jj_ntk) { case RegexpToken.AREN: jj_consume_token(jj_token); case RegexpToken.AREN: jj_consume_token(token); case RegexpToken.Culture); case RegexpToken.Culture: case RegexpToken.Culture: ; case RegexpToken.Culture: case RegexpToken.Culture: case RegexpToken.Culture: case RegexpToken.Culture: break; break; case RegexpToken.OB: case Regexp: case RegexpToken.Culture: case RegexpToken.Culture: case RegexpToken.Culture: case RegexpToken.Culture: break; break; break; default: break; case RegexpToken.RECED: break; case Regexp: jj_1: jj_1[1] = jj_gen; break; break; break; default: throw new Exception("Culture"); } }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest(): base("Ots", "2016-06-20", "InsertTags", "ots", "openAPI") { Method = MethodType.POST; }
public virtual DeleteUserByIdResponse DeleteUserById(DeleteUserByIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset, RecordId, this); LittleEndian.PutShort(data, offset, RecordId); LittleEndian.PutShort(data, offset + 2, RecordId); LittleEndian.PutInt(data, offset + 8, RecordId); LittleEndian.PutInt(data, offset + 8, field_1_numShapes); LittleEndian.PutInt(data, offset + 8, field_2_numShapes); LittleEndian.PutInt(data, offset + 16, this); return 8 + 16; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { for(int i = 0; i < array.Length; i++) { array[i] = value; } }
public bool hasNext() { return this.nextId!= null; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set.mask) == set; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public override NGit.Api.Init(int k) { lazyInit(); if(k == null) { return null; } if(k < 0) { return null; } int k = p + 1; if(i >= tokens.Count - 1) { return tokens.Get(i); } return tokens.Get(i); }
public void RemoveSheet(int sheetIndex) { if(bounds.Count > sheetIndex) { records.Remove(records.records); records sheet = - 1; } BoundSheets.Remove(sheetIndex); for(int i = 0; i < sheetNameRecord.Count; i++) { NameRecord sheet = sheetNames[i]; if(nr.NumNumber == sheetNumber) { nr.SetSheetNumber(i); } else { nr.SetSheetNumber(i); } } }
public void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(object o) { if(!(o is Ref) { return false; } Property p = (Property)o; object p = p.Value; int p = p.Value; if(type!= p) { return false; } Value = p.GetValue(id, p.GetType()); return false; }
public GetRepoBuildListRequest(): base("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"; Method = MethodType.GET; }
public MessageWriter() { buf = new java.util.ArrayOutputStream(enc, this); enc = new OutputStream(Raw, @in); }
public virtual void Append(RecordBase r) { _recs.Add(r); }
public override void close() { if(@Read!= -1 || actualSize!= -1) { throw new System.ArgumentException(MessageFormat.Format(JGitText.Get().tokenDataFormat.Get().packFormat); } NGitText.AddItem(JGitText.Get().postDataLength - 1)); if(JGitText.TryGetValue(JGitText.Get().useCommitLength < 1) { Reset(); } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void Replace(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sf) { if(rec is FormulaRecord) { FormulaRecord formulaRecord = (FormulaRecord)rec; rec formulaText = rs; if(rec == null) { cachedRecord = (StringClass; } else { cachedRecordAgg = (Record)c; if(cachedRecord == null) { recregate.SubRecord = (CellClass); } else { recregate sf = (CellClass); } } }
public override object Clone() { return new NGit.ConcurrentDecpose(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query): this(query == null) { throw new QueryNodeError(); }
public override string ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); buffer.Append("/").Append(FirstPath); for(int i = 0; i < path.Length; i++) { Path value[i] = GetPath(value[i]); } return path.ToString(); }
public void RemoveCellComment() { HSSFComment comment = (HSSFComComment)_sheet.GetRow(_record.Column, _record.Column); if(null == null) { Enumerator.Remove(sheet); } else { return; } }
public void Reset() { arriving = null; leaving = -1; }
public virtualateUserResponseateUser(UserUserRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =ateUserRequestMarshaller.Instance; options.ResponseUnmarshaller =ateUserResponseUnmarshaller.Instance; return Invoke<UserUserResponse>(request, options); }
public virtual bool IsCharsetDetected() { throw new NotSupportedException(); }
public virtual ModifySnapshotCopyRetentionResponse ModifySnapshotCopyRetention(ModifySnapshotCopyRetentionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyRetentionRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyPeriodResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyRetentionResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return Decode(buffer, 0, buffer.Length); }
public int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert(otherState!= null && otherState is BlockTermState); Debug.Assert(otherState)) { state.CopyFrom(otherState); state.CopyFrom(otherState); state.CopyFrom(target); termPending = true; termBytes = false; } }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringAndData(ILittleEndianOutput out1, String value) { bool is16Bit = value.ToBit(value); out1.WriteByte(value? 0x01 : 0x00); if(is16Bit) { PutUnicodeLE(value, out1); } else { putUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options); }
public void AddFile(string file) { CheckCollections.Add(file); }
public virtual void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressedFilter(bool value) { if(value == 0) { this.valueOf(o); } else { this.reachesInt |= 0; } }
public virtual IntervalSet Look(ATNState s, RuleContext ctx) { return Create(s, ctx); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags); out1.WriteShort(Height); }
public Builder(bool dedup) { this.ignoreup = dedup; }
public Hashtable(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 0) { throw new ArgumentException("NaFactor: " + loadFactor); } }
public override object Get(ICharSequence key) { int bucket = normalucket.GetBucket(key); return -1 == null? -1 : null; }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningParameterJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningParameterJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningParameterTuningParameterTuningParameterTuningResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningParameterJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableTableRequest(); request.TableName = tableName; return DeleteTable(request); }
public bool EncodeThanText(TextFragment frag, TextFragment frag) { if(fragmentB == fragB.Score) { return fragScore == fragB.NumScore; } else { if(fr.NumScore > fragB.NumA) { return fragB.Score; } else { return fragScore < fragB.NumScore; } } }
public void nullBefore(int pos) { Debug.Assert(length >= 0); Debug.Assert(length <= pos); Debug.Assert(newCount <= nextCount - pos); Debug.Assert(newCount <= nextCount - count); newCount <= newCount + "newCount=" + count=" + buffer.Length); Debug.Assert(newCount <= buf.Length); }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int CompareTo(BytesRef other) { return Arrays.CompareTo(this, this.Bytes, other.Offset, this.Offset, this.Length); }
public virtual int Stem(char[] s, int len) { if(len > 4 && s[len - 4] =='s') { len--; } if(sWith(s, len, "len") || (sWith(s, len, "k") || StemmerUtil.EndsWith(s, len, "k") &&emmerUtil.EndsWith(s, len, "k") || StemmerUtil.EndsWith(s, len, "k") || (sWith(s, len)) { return len; } return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(string dim, string label): base(dummyFacetField) { veracetField = dim.FacetField(veracetLabel); this.veracetLabel = dim; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static FileRecord Create(RecordInputStream in1) { RecordInputStream in1 = (SingleRecord)in1.GetSingleById(IEnumeratorRecord.GetSid(Record.Sid)); if(in1.Sid == null) { return new UnknownRecord(in1); } return new UnknownRecord(in1); }
public virtual int getCount() { return mCount; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset +_position); }
public sealed override byte get() { if(_position == _limit) { throw new java.nio.BufferUnderflowException(); } return this._position++ + _position++]; }
public override java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value): base(name, TYPE) { FieldsData = new Int32(value); }
public virtual IntervalSet GetExpectedTokens() { ATNState atn = atn; IntervalState s = atn.State; return atn.State; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILING]\n"); buffer.Append("               = ").Append(ReadOnly()).Append("\n"); buffer.Append("                  = ").Append(ReadOnly)).Append("\n"); buffer.Append("                    = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                  = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                    = ").Append(StringUtil.ToString(Password)).Append("\n"); buffer.Append("\n"); return buffer.ToString(); }
public SubmoduleInitCommand(Repository repo) : base(repo) { paths = new List<string>(); }
public virtual void Include(string name, AnyObjectId id) { bool validName = Repository.IsValidRefName(name); if(!validValidRefName) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().includevalidKeyName, name)); } if(!include.Contains(name, name + name)) { throw new ArgumentException(JGitText.ToString()); } BytesRef name = id; }
public virtual DeleteSnapshotCopyResponse ApplySnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ApplySnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = ApplySnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public override ValueFiller GetValueFiller() { return new ValueFillerIterator(this); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane); out1.WriteShort(ActiveCellRow); out1.WriteShort(ActiveCellCol); out1.WriteShort(Refs.Length); int field_6_refs = field_6_refs.Length; for(int i = 0; i < field_6_refs.Length; i++) { out1.WriteShort(field_6_refs[i]); } }
public static java.io.Counter NewCounter() { return new object(false); }
public virtual bool Get(string name, string dflt) { string[] vals; object temp; if(valByRound.TryGetValue(name, out temp) && temp!= null) { vals = (string[])temp; return vals[roundNumber % vals.Length]; } string sval; if(sval!= null) { return sval; } if(sval < 0) { sval = dflt(sval); } if(sval < 0) { return sval.IndexOf(':'); } bool k = sval.Substring(0, k + 1); sval = sval.Substring(k + 1); sval = sval.Substring(k + 1); vals = sval.Substring(k + 1); valByRound[name] = colName; vals = colName; }
public override void ReizeSerialize() { if(records.TryGetValue() > 0) { recordsRecordId = (ColumnRecord)records[posId.Id]; if(records.Length < 0) { records.Copy(); } } }
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(delegate) { this.@delegate = @delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)externalBookInternalReferences); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCEN]\n"); buffer.Append("               = ").Append(Protect).Append("\n"); buffer.Append("                    = ").Append(Protect).Append("\n"); return buffer.ToString(); }
public virtual NGit.Api.PushCommand SetThin(bool null) { CheckCallable(); this.this.this.this.@in = thin; return this; }
public int CompareTo(SearcherTracker other) { return double.CompareCompareTo(other, recordTimeSec); }
public virtual TokenStream Create(TokenStream @in) { return new ReverseinFilter(@in); }
public BlockList() { Directory = new BlockList<T>(); directory[0] = this.Directory; }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldTerms = new Dictionary<WeightedSpanTerm>(weightedSpanTerms); for(int i = 0; i < weightedSpanTerms.Length; i++) { WeightedSpanTerm c = weightedSpanTerm[i].GetWeightedSpanTerm(!weightedSpanTerm.GetWeightedSpanTerm()); if(weightedSpanTerm == null || weightedTerms[i].Weight < weightedTerms[i].Weight) { termWeightedTerms[weightedTerms[weightedTerms].Weight; } } fieldWeightedTerms[fieldWeightedTerms[i].Weight].Weight; }
public override bool Equals(object other) { Debug.Assert(_other)) { if(_other is MergedGroup)) { return false; } MergedMerged other = (MergedGroup)other; if(other == null) { return false; } else { if(other == null) { return false; } } else { return false; } }
public java.nio.charset.charset chars() { return text; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, HSSFWorkbook workbook, float verticalGroup) { this.colorPoints = escherGroup; this.idPerPixel = escherGroup; this.workbook = _workbook; this.m_workbook = _workbook; this.font = 0; }
public string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((long)((uint)byte1 >> 4)); int byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return this._enclosing.ToString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new SharedString(); buffer.Append("[ArrayRow]\n"); buffer.Append("       = ").Append(Row).Append("\n"); buffer.Append("      = ").Append(Column).Append("\n"); return sb.ToString(); }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "next=" + start + " length=" + length; }
public static int ParseHexInt(byte byte4) { byte r = byte[16]; if(r < 0) { throw new System.ArgumentException(); } return r; }
public Attribute(string name, string value) { _name = name; _value = value; }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.MissingCellPolicy); }
public void Write(byte[] b) { _out.Write(b); _ulrOutput.Write(b); }
public ResetImageAttributeRequest(string imageId, ResetAttributeName attribute) { _imageId = imageId; _attribute = attribute; }
public virtual void SetResultContents() { resultContents = null; }
public virtual ObjectId GetPeeledObjectId() { return GetLeaf().GetId(); }
public virtual UndeprecateDomainResponse UndeprecateDomain(UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_stringLength); out1.WriteByte(_is16bit? 0x01 : 0x00); if(_is16bit? 0x00) { StringUtil.PutUnicodeLE(field_3_string_string_string_string_string_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string_string_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueUrlRequest(); request.QueueUrl = queueUrl; return DeleteQueueUrl(request); }
public virtual void SetCheckEofAfterPackFooter(bool b isFooter) { checkPackFooter = b isPack; }
public override void To() { int s = m_BeginA; int s = endA; beginA = endA; endB = s; beginB = s; endB = s; }
public virtual int GetPackedGitWindowSize() { return false; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef): base(externalWorkbookNumber) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.Name; if(sheetName is SheetIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).LastSheetIdentifier; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long clockTime) { tTime = clockTime; }
public virtual MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string collection = collectionModel.Get; if(collModelName!= null) { return string.ToString(); } else { return GetName(s, "s"); } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public override AreaEval offset(int relFirstRowIx, int relLastRowIx, int relLastColIx, int relLastColIx) { if(_refEval == null) { return _refEval.FirstColIx; } return relLastRow(area.FirstRowIx, relLastRowIx, relLastColIx, relLastColIx); }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public virtual voidize(string string) { this._cat ==cat; }
public override void write(int oneByte) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _firstCol = in1.ReadUShort(); _last_last_col = in1.ReadUShort(); _col = in1.ReadUShort(); field_6_xf = in1.ReadUShort(); switchIndex = in1.ReadUShort(); switch(in1) { case 2: _6_reserved = in1.ReadUShort(); case 2: field_6_reserved = in1.ReadUShort(); break; case 2: field_6_reserved = in1.ReadByte(); break; default: throw new RuntimeException("Unicode in1"); } }
public Status(DiffDiff diff) : base(diff diff) { diff = diff; diff =!is.Empty; diff.IsEmpty ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.Empty; diff =!is.Empty; }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return this; }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public NGit.Diff.Diff.Diff(int ins, int currentop, int be) { opLE; op = default(opLELE); op = null; REumerator = null; }
public override String ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]); buffer.Append(operands[1]); buffer.Append(operands[1]); return buffer.ToString(); }
public static void clearEnvironment(string[] workbookNames,Evaluator evaluator) { Evaluator[] wb = new byte[bookEvaluator]; for(int i = 0; i < _evaluator.Length; i++) { EnvironmentEvaluator[i] = wevaluator; } }
public ListPhotoTagsRequest(): base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public NGit.Diff.Fac
public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in1); for(int i = in1.ReadShort(); i < in1.ReadByte();) { reserved2 = in1.ReadInt(); reserved2 = in1.ReadUShort(); reserved3 = in1.ReadUShort(); int i = in1.ReadUShort(); cellRefs = in1.ReadUShort(); cellRefs = new CellRangeAddress(cellRefs[0]; for(int i = 0; i < 0; i++) { int i = 0; i++) { switch(in1.ReadFCultureInfo(cellRefs[i])) { default: break; } } } switch(in1.Count > 0) { break; break; } default: { s = new CellRangeAddress(in1, i); break; break; } default: { throw new System.ArgumentException(in1.InvariantCulture); } }
public virtual RevCommit GetFastFast(RevCommit newCommit) { RevCommit headId = headId.GetHead(); if(@ref == null) { throw new RefNotFoundException(MessageFormat.Format(JGitId.Format(JGitText.Get().@refCommitId, Constants.Format(JGitId, headId)); } RevCommit = headCommit.GetInt32(newCommit, headCommit); return headName; }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if(!HasNext()) { throw new Exception("Attempt to to of record"); } return _count; }
public override string ToString() { return RawParseUtils.DecodeByteArray(buf); }
public ListTablesRequest(string exclusiveStartTableName) { _exclusiveStartTableName = exclusiveStartTableName; }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder(): base() { word = -1; }
public override bool Equals(object obj) { if(this == obj) { return this; } State other = (State) && Arrays.Equals(this, StringComparison.Ordinal); return this.Equals(this, other.Values); }
public override TokenStream Create(TokenStream input) { return new EnglishPemFilter(input); }
public void ClearFormatting() { _string clone = CloneIfRequired(); _stringRequiredToRequired(); }
public override int Get(int index, long[] arr, int off, int len) { Debug.Assert(len > 0, "len must be > 0 (got " + len + ")"); Debug.Assert(len < 0 && index >= valueCount); Debug.Assert(len < 0 && valueCount >= valueCount); return len - off, len); }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public virtual string ToPrivateString() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public override void Write(int oneChar) { for(int i = 0; i < oneChar; i++) { char[] new char[i]; } }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + term=" + ", ", field=" + term + this.doc + ", doc=" + docUpto + ")"; }
public virtual bool IsSSF(FuzzySetFilter fieldInfo, FieldInfo fieldInfo) { return this.result > 0; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return GetType().Name + "(maxBasicQueries: " + m_maxBasicQueries + ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void ProcessChildRecords() { ConvertChildToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public virtual FileSnapshot() { return this; }
public virtual InputStream OpenResource(string resourceStream) { TokenStream stream = (clazz!= null)? null : null; if(resourceStream!= null) { throw new IOException("Resource: " + streamAsResource); } return stream; }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(" ["); sb.Append(HexDump.ShortToHex(_sid)); sb.Append(" size=").Append(HexDump.ToHex(_data)); sb.Append("]"); return sb.ToString(); }
public int nextIndex() { return index; }
public override string ToQueryString(IEscapeQuerySyntax escaper) { if(IsDefaultField(this.m_field)) { return "\"" + GetTermEscape + "\"" + this.m_field + "\""; } else { return "\" "\"" + GetTermQuoted + "\""; } }
public override Object Clone() { return this; }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public virtual ECSMetadataServiceCredentialsFetConnection(int with milliseconds) { this.connectionTimeoutInTimeout = milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset +_position); }
public static string Run(ICist<string> parts, string separator, string lastString) { StringBuilder sb = new StringBuilder(); int sb = 0; int lastIndex = parts.Count - 1; for(int i = 0; i < parts.Count; i++) { string lastarator lastIndex = parts[i]; if(i == -1) { sb.Append(i); } else { sb.Append(i); } } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _topicArn = topicArn; _nextToken = nextToken; }
public override byte ReadByte() { return bytes[pos]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _queueUrl = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_barSpace); out1.WriteShort(field_2_tokenSpace); out1.WriteShort(field_3_formatFlags); }
public override object Has(object output1, object output2) { return libcore.io.T(((T)1.T)1, output1); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int match(byte[] b, int ptr, byte[] src) { if(ptr + src.Length > b.Length) { return -1; } for(int i = 0; i < src.Length; i++) { if(b[i]!= 0) { return ptr; } } return -1; }
public override int FillFields(byte[] data, int offset, EscherRecordFactory recordFactory record) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_rectX = LittleEndian.GetInt(data, pos + size); size = LittleEndian.GetX, pos + size); size = LittleEndian.GetInt(data, pos + size); size = LittleEndian.GetInt(data, pos + size); size -= size); size -= 8; field_3 = LittleEndian.GetInt(data, pos + size); size += 8; bytesRemaining -= 8; bytesRemaining -= bytesRemaining; if(bytesRemaining!= 0) new RecordFormatRemaining -= bytesRemaining; return bytesRemaining; }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature(FEATURE_FEATURE_FEATURE_PRpose); }
public virtual void SetOver { bool on = on; }
public virtual string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock(this) { if(indexReader!= null) { indexReader.IndexReader(); } return indexReader; } }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_index = in1.ReadShort(); }
public override long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 0) { throw new ArgumentException("NaFactor: " + loadFactor); } }
public virtual void Run() { long lastStart = System.util.Reains(!n.GetTime(); while(!n == null) { try { return; } while(!@lock.Equals(@lock)) { return; } try { int lastStart = (long)@lock + nextStart; int lastStart = 0; if(!n > 0) { throw new System.IO.IO.IOException(); } Antlr4.Assert(@ref > 0); } return; } try { try { if(@refStart.@ref > 0) { throw new System.ArgException(); } } catch(IOException e) { throw new Exception(); } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0)? removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override string GetName() { return "resolve"; }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) { return start; } int offset = offset; for(int i = start; offset < maxScan.Length && count--) { if(offset > 0) return offset; } return offset++; }
public virtual void SetObjectChecker(object o) { ccc = o; }
public BaseRef(AreaEval ae) { _refEval = ae; _firstRow = ae.FirstRow; _firstRow = ae.FirstColumn; _firstColumn = ae.FirstColumn; _width = ae.FirstColumn; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); grbitFrt = in1.ReadByte(); verFRTID = in1.ReadByte(); int cID = in1.ReadByte(); for(int i = 0; i < in1.ReadCFRTID; i++) { cID = new CFRTTTID[i]; for(int i = 0; i < @in1.ReadCFRTID; i++) { cID[i] = new CFRTTID(inID); } } }
public override Merger NewMerger(Repository db) { return new OneIndexSide(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRshift(CreateDataSourceFromRedshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRshiftResponse>(request, options); }
public void ClearDFA() { for(int d = 0; d < decisionToDFA.Length; d++) { DFA[d] = new DFA(atn), d); } }
public void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[ShapeMargin]\n"); buffer.Append("   .margin               = ").Append(" (").Append(Margin).Append(" )\n"); buffer.Append("[/RightMargin]\n"); return buffer.ToString(); }
public override Object Clone() { return this; }
public virtual StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig): base(new MultiQueryNodeProcessor) { Add(new MultiQueryNodeProcessor()); Add(new MultiQueryNodeProcessor()); AddItem(new RefProcessorProcessorProcessor()); AddItem(new RefQueryNodeProcessorProcessorProcessorProcessorProcessor()); AddItem(new RefQueryNodeProcessorProcessor()); AddItem(new RefQueryNodeProcessorProcessorProcessor()); AddItem(new RefQueryNodeProcessorProcessorProcessor()); AddItem(new RefQueryNodeProcessorProcessorProcessorProcessorProcessor()); AddItem(new TermRangeQueryNodeProcessorProcessorProcessor()); AddItem(new NGitQueryNodeProcessorProcessorProcessor()); Add(new RefProcessorProcessorProcessorProcessorProcessor()); AddChildProcessor(new RefProcessorProcessor()); AddChildProcessor()); AddItem(new NGitQueryNodeProcessorProcessor()); Add(new NGitQueryNodeProcessorProcessor()); AddChildProcessor(new NGitQueryNodeProcessorProcessor()); Add(new MultiQueryNodeProcessorProcessor()); AddChildProcessor()); }
public String FormatAsString(String sheetName, bool useAbsolute) { StringBuilder sb = new StringBuilder(); if(sheetName!= null) { sb.Append(sheetName); sb.Append("sheetName "); sb.Append(FormatReference.FirstRow(FirstRow, useolute)); } CellReference cellRef useolute = new CellReference(FirstRow, useAbsoluteRef); sb.Append(GetFirstRow(cellRefAddress(), useAbsolute); sb.Append(cellRefAddress); if(!cellRef) { sb.Append(cellRef.ToString(), useolute); } sb.Append(cellRef); sb.Append(cellRef.ToString()); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m) { int m_mode = m_mode; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset +_position); }
public virtual void Set(int index, long n) { if(count < index) { throw new ArgumentOutOfRangeException(index); } else { if(count == index) { Add(n); } else { entries[index] = n; } } }
public override java.nio.ByteBuffer putFloat(float value) { throw new System.NotImplementedException(); }
public static double max(double[] values) { double maxN = double.N; for(int i = 0, iSize = values.Length; i < iSize; i++) { max(max[i]); } return max; }
public UpdateRepoWebhookRequest(): base("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks"; Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateCondition expected) { _domainName = domainName; _itemName = itemName; _attributes = itemName; _expected = expected; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SXXXX]\n"); for(int i = 0; i < _nInfos.Length; i++) { sb.Append("[i]\n"); } sb.Append("[i]\n"); return sb.ToString(); }
public virtual bool IsSuccess() { if(mergeResult!= null) { return MergeResult.MoveNext(); } else { return false; } }
public override void SetBytesValue(byte[] value) { SetBytes(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual void Add(E @object) { iterator.Add(@object); @object.Add(end); }
public static java.nio.ByteBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public SrndQuery GetSubQuery(int q) { return queries.Get(nq); }
public override float currentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) { if(numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.Min(currentPayloadScore, currentScore); } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); sb.Append("          = ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("       = ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("     = ").Append(HexDump.ShortToHex(Index)).Append("\n"); sb.Append("[/FIndex]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupResponse RegisterTransitGatewayMulticastGroup(RegisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public override bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName = serverCertificateName; }
public java.lang.StringBuffer append(double d) { append0(GetInstance().append0, d); return this; }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public bool Find(int start) { FindPos = startPos; if(FindPos < regionStart) { FindPos = regionStart; if(matchPos >= region) { return false; } else { findPos = FindFound(address, input, false); } } if(matchFound) { matchFound = matchOffsets[matchFound]; } return matchOffsets[1]; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string wordAtt) { termAtt = AddAttribute<ICharTermAttribute>(); posInToken = AddAttribute<ICharTermAttribute>(); this.type = wordAtt; return true; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.TypeString(Type)); s.Append(' '); s.Append(s); s.Append(' '); s.Append(s); s.Append(' '); return s.ToString(); }
public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.newCallable; return this; }
public void SetRow(int rowNumber) { int startRow = FindRow(lineGroupRecord); rowRecord row = GetRow(startRow); int row = GetRow(rowRecord, startRow); int writeRow = GetRow(rowRecord, startRow); if(row == null)next = CreateRow(row); rowRecord = CreateRow(row); }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SERNumbers]\n"); buffer.Append("                     = ").Append(" (").Append(Arrays.ToString(Arrays.ToString()).Append(" )"); buffer.Append("                                           = ").Append(StringUtil.ToString()).Append("\n"); buffer.Append("\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public string GetClassArg() { if(null!= originalName) { string className = originalName.Get(null); if(null!= userName) { return className; } } return GetType().Name; }
