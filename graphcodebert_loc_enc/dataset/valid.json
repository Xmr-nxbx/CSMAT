{"java": ["public DVRecord(RecordInputStream in) {\r\n    _option_flags = in.readInt();\r\n    _promptTitle = readUnicodeString(in);\r\n    _errorTitle = readUnicodeString(in);\r\n    _promptText = readUnicodeString(in);\r\n    _errorText = readUnicodeString(in);\r\n    int field_size_first_formula = in.readUShort();\r\n    _not_used_1 = in.readShort();\r\n    _formula1 = Formula.read(field_size_first_formula, in);\r\n    int field_size_sec_formula = in.readUShort();\r\n    _not_used_2 = in.readShort();\r\n    _formula2 = Formula.read(field_size_sec_formula, in);\r\n    _regions = new CellRangeAddressList(in);\r\n}", "public String toString() {\r\n    return pattern();\r\n}", "public InsertInstanceRequest() {\r\n    super(\"Ots\", \"2016-06-20\", \"InsertInstance\", \"ots\");\r\n    setMethod(MethodType.POST);\r\n}", "public boolean contains(Object o) {\r\n    return indexOf(o) != -1;\r\n}", "public final ByteBuffer encode(String s) {\r\n    return encode(CharBuffer.wrap(s));\r\n}", "public boolean requiresCommitBody() {\r\n    return false;\r\n}", "public String getKey() {\r\n    return RawParseUtils.decode(enc, buffer, keyStart, keyEnd);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3, ValueEval arg4) {\r\n    double result;\r\n    try {\r\n        double d0 = NumericFunction.singleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);\r\n        double d1 = NumericFunction.singleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);\r\n        double d2 = NumericFunction.singleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);\r\n        double d3 = NumericFunction.singleOperandEvaluate(arg3, srcRowIndex, srcColumnIndex);\r\n        double d4 = NumericFunction.singleOperandEvaluate(arg4, srcRowIndex, srcColumnIndex);\r\n        result = evaluate(d0, d1, d2, d3, d4 != 0.0);\r\n        NumericFunction.checkValue(result);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    return new NumberEval(result);\r\n}", "public DeleteClientVpnEndpointResult deleteClientVpnEndpoint(DeleteClientVpnEndpointRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteClientVpnEndpoint(request);\r\n}", "public Object get(CharSequence key) {\r\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\r\n    if(list == null || list.isEmpty()) {\r\n        return null;\r\n    }\r\n    for(TernaryTreeNode n : list) {\r\n        if(charSeqEquals(n.token, key)) {\r\n            return n.val;\r\n        }\r\n    }\r\n    return null;\r\n}", "public StartFleetActionsResult startFleetActions(StartFleetActionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartFleetActions(request);\r\n}", "public CellRangeAddress getCellRangeAddress(int index) {\r\n    return _list.get(index);\r\n}", "public static Document loadXML(Reader is) {\r\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n    DocumentBuilder db = null;\r\n    try {\r\n        db = dbf.newDocumentBuilder();\r\n    } catch(Exception se) {\r\n        throw new RuntimeException(\"Parser configuration error\", se);\r\n    }\r\n    org.w3c.dom.Document doc = null;\r\n    try {\r\n        doc = db.parse(new InputSource(is));\r\n    } catch(Exception se) {\r\n        throw new RuntimeException(\"Error parsing file:\" + se, se);\r\n    }\r\n    return doc;\r\n}", "public double get(String name, double dflt) {\r\n    double vals[] = (double[]) valByRound.get(name);\r\n    if(vals != null) {\r\n        return vals[roundNumber % vals.length];\r\n    }\r\n    String sval = props.getProperty(name, \"\" + dflt);\r\n    if(sval.indexOf(\":\") < 0) {\r\n        return Double.parseDouble(sval);\r\n    }\r\n    int k = sval.indexOf(\":\");\r\n    String colName = sval.substring(0, k);\r\n    sval = sval.substring(k + 1);\r\n    colForValByRound.put(name, colName);\r\n    vals = propToDoubleArray(sval);\r\n    valByRound.put(name, vals);\r\n    return vals[roundNumber % vals.length];\r\n}", "public int getBackgroundImageId() {\r\n    EscherSimpleProperty property = getOptRecord().lookup(EscherPropertyTypes.FILL__PATTERNTEXTURE);\r\n    return property == null ? 0 : property.getPropertyValue();\r\n}", "public TreeFilter getTreeFilter() {\r\n    return treeFilter;\r\n}", "public GetMemberResult getMember(GetMemberRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetMember(request);\r\n}", "public boolean canEncode() {\r\n    return true;\r\n}", "public ReplaceRouteResult replaceRoute(ReplaceRouteRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeReplaceRoute(request);\r\n}", "public ObjectId getResultTreeId() {\r\n    return (resultTree == null) ? null : resultTree.toObjectId();\r\n}", "public boolean equals(final Object o) {\r\n    boolean rval = this == o;\r\n    if(!rval && (o != null) && (o.getClass() == this.getClass())) {\r\n        IntList other = (IntList) o;\r\n        if(other._limit == _limit) {\r\n            rval = true;\r\n            for(int j = 0; rval && (j < _limit); j++) {\r\n                rval = _array[ j ] == other._array[ j ];\r\n            }\r\n        }\r\n    }\r\n    return rval;\r\n}", "public ListReusableDelegationSetsResult listReusableDelegationSets(ListReusableDelegationSetsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListReusableDelegationSets(request);\r\n}", "public String toString() {\r\n    return \"(\" + a.toString() + \" OR \" + b.toString() + \")\";\r\n}", "public InitiateLayerUploadResult initiateLayerUpload(InitiateLayerUploadRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeInitiateLayerUpload(request);\r\n}", "public UpdateRepoRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"UpdateRepo\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");\r\n    setMethod(MethodType.POST);\r\n}", "public PhoneticFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    inject = getBoolean(args, INJECT, true);\r\n    name = require(args, ENCODER);\r\n    String v = get(args, MAX_CODE_LENGTH);\r\n    if(v != null) {\r\n        maxCodeLength = Integer.valueOf(v);\r\n    } else {\r\n        maxCodeLength = null;\r\n    }\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public FetchCommand fetch() {\r\n    return new FetchCommand(repo);\r\n}", "public QueryPhraseMap searchPhrase(String fieldName, final List<TermInfo> phraseCandidate) {\r\n    QueryPhraseMap root = getRootMap(fieldName);\r\n    if(root == null) return null;\r\n    return root.searchPhrase(phraseCandidate);\r\n}", "@Override public Iterator<Multiset.Entry<K>> iterator() {\r\n    return new MultisetEntryIterator();\r\n}", "public DBSnapshot deleteDBSnapshot(DeleteDBSnapshotRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDBSnapshot(request);\r\n}", "public void setOutput() {\r\n    output = true;\r\n}", "public ByteBuffer compact() {\r\n    throw new ReadOnlyBufferException();\r\n}", "public XmlPullParser newPullParser() throws XmlPullParserException {if(parserClasses == null) throw new XmlPullParserException(\"Factory initialization was incomplete - has not tried \"+classNamesLocation); if(parserClasses.size() == 0) throw new XmlPullParserException(\"No valid parser classes found in \"+classNamesLocation); final StringBuilder issues = new StringBuilder(); for(int i = 0; i < parserClasses.size(); i++) {\r\n        final Class ppClass = (Class) parserClasses.get(i);\r\n        try {\r\n            final XmlPullParser pp = (XmlPullParser) ppClass.newInstance();\r\n            for(Iterator iter = features.keySet().iterator(); iter.hasNext();) {\r\n                final String key = (String) iter.next();\r\n                final Boolean value = (Boolean) features.get(key);\r\n                if(value != null && value.booleanValue()) {\r\n                    pp.setFeature(key, true);\r\n                }\r\n            }\r\n            return pp;\r\n        } catch(Exception ex) {\r\n            issues.append(ppClass.getName() + \": \"+ ex.toString()+\"; \");\r\n        }\r\n    } throw new XmlPullParserException(\"could not create parser: \"+issues);}", "public DeleteAnalysisSchemeResult deleteAnalysisScheme(DeleteAnalysisSchemeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteAnalysisScheme(request);\r\n}", "public ExcelExtractor(HSSFWorkbook wb) {\r\n    super(wb);\r\n    _wb = wb;\r\n    _formatter = new HSSFDataFormatter();\r\n}", "public IntBuffer put(int index, int c) {\r\n    checkIndex(index);\r\n    byteBuffer.putInt(index * SizeOf.INT, c);\r\n    return this;\r\n}", "public final byte getParameterClass(int index) {\r\n    if(index >= paramClass.length) {\r\n        return paramClass[paramClass.length - 1];\r\n    }\r\n    return paramClass[index];\r\n}", "public ListEndpointsResult listEndpoints(ListEndpointsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListEndpoints(request);\r\n}", "public static CharsRef join(String[] words, CharsRefBuilder reuse) {\r\n    int upto = 0;\r\n    char[] buffer = reuse.chars();\r\n    for(String word : words) {\r\n        final int wordLen = word.length();\r\n        final int needed = (0 == upto ? wordLen : 1 + upto + wordLen);\r\n        if(needed > buffer.length) {\r\n            reuse.grow(needed);\r\n            buffer = reuse.chars();\r\n        }\r\n        if(upto > 0) {\r\n            buffer[upto++] = SynonymMap.WORD_SEPARATOR;\r\n        }\r\n        word.getChars(0, wordLen, buffer, upto);\r\n        upto += wordLen;\r\n    }\r\n    reuse.setLength(upto);\r\n    return reuse.get();\r\n}", "public StringBuffer insert(int index, float f) {\r\n    return insert(index, Float.toString(f));\r\n}", "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {\r\n    if(shortCount > remaining()) {\r\n        throw new BufferOverflowException();\r\n    }\r\n    System.arraycopy(src, srcOffset, backingArray, offset + position, shortCount);\r\n    position += shortCount;\r\n    return this;\r\n}", "public DisassociateResolverEndpointIpAddressResult disassociateResolverEndpointIpAddress(DisassociateResolverEndpointIpAddressRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateResolverEndpointIpAddress(request);\r\n}", "public AcceptDirectConnectGatewayAssociationProposalResult acceptDirectConnectGatewayAssociationProposal(AcceptDirectConnectGatewayAssociationProposalRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAcceptDirectConnectGatewayAssociationProposal(request);\r\n}", "public StopStackSetOperationResult stopStackSetOperation(StopStackSetOperationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopStackSetOperation(request);\r\n}", "public CacheSubnetGroup createCacheSubnetGroup(CreateCacheSubnetGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateCacheSubnetGroup(request);\r\n}", "public CachedOrds(OrdinalsSegmentReader source, int maxDoc) throws IOException {offsets = new int[maxDoc + 1]; int[] ords = new int[maxDoc]; long totOrds = 0; final IntsRef values = new IntsRef(32); for(int docID = 0; docID < maxDoc; docID++) {\r\n        offsets[docID] = (int) totOrds;\r\n        source.get(docID, values);\r\n        long nextLength = totOrds + values.length;\r\n        if(nextLength > ords.length) {\r\n            if(nextLength > ArrayUtil.MAX_ARRAY_LENGTH) {\r\n                throw new IllegalStateException(\"too many ordinals (>= \" + nextLength + \") to cache\");\r\n            }\r\n            ords = ArrayUtil.grow(ords, (int) nextLength);\r\n        }\r\n        System.arraycopy(values.ints, 0, ords, (int) totOrds, values.length);\r\n        totOrds = nextLength;\r\n    } offsets[maxDoc] = (int) totOrds; if((double) totOrds / ords.length < 0.9) {\r\n        this.ordinals = new int[(int) totOrds];\r\n        System.arraycopy(ords, 0, this.ordinals, 0, (int) totOrds);\r\n    } else {\r\n        this.ordinals = ords;\r\n    }}", "public String getRawUserInfo() {\r\n    return userInfo;\r\n}", "@Override public Object[] toArray() {\r\n    return ObjectArrays.toArrayImpl(this);\r\n}", "public DescribeCompilationJobResult describeCompilationJob(DescribeCompilationJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCompilationJob(request);\r\n}", "public String getQuery() {\r\n    return decode(query);\r\n}", "public CreateEnvironmentResult createEnvironment(CreateEnvironmentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateEnvironment(request);\r\n}", "public ParseTreeMatch match(ParseTree tree) {\r\n    return matcher.match(tree, this);\r\n}", "public boolean contains(CharSequence cs) {\r\n    return map.containsKey(cs);\r\n}", "public QueryRequest(String tableName) {\r\n    setTableName(tableName);\r\n}", "public boolean isRowGroupHiddenByParent(int row) {\r\n    int endLevel;\r\n    boolean endHidden;\r\n    int endOfOutlineGroupIdx = findEndOfRowOutlineGroup(row);\r\n    if(getRow(endOfOutlineGroupIdx + 1) == null) {\r\n        endLevel = 0;\r\n        endHidden = false;\r\n    } else {\r\n        endLevel = getRow(endOfOutlineGroupIdx + 1).getOutlineLevel();\r\n        endHidden = getRow(endOfOutlineGroupIdx + 1).getZeroHeight();\r\n    }\r\n    int startLevel;\r\n    boolean startHidden;\r\n    int startOfOutlineGroupIdx = findStartOfRowOutlineGroup(row);\r\n    if(startOfOutlineGroupIdx - 1 < 0 || getRow(startOfOutlineGroupIdx - 1) == null) {\r\n        startLevel = 0;\r\n        startHidden = false;\r\n    } else {\r\n        startLevel = getRow(startOfOutlineGroupIdx - 1).getOutlineLevel();\r\n        startHidden = getRow(startOfOutlineGroupIdx - 1).getZeroHeight();\r\n    }\r\n    if(endLevel > startLevel) {\r\n        return endHidden;\r\n    }\r\n    return startHidden;\r\n}", "public boolean retryFailedLockFileCommit() {\r\n    return true;\r\n}", "public ValidateMatchmakingRuleSetResult validateMatchmakingRuleSet(ValidateMatchmakingRuleSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeValidateMatchmakingRuleSet(request);\r\n}", "public boolean get(String name, boolean dflt) {\r\n    boolean vals[] = (boolean[]) valByRound.get(name);\r\n    if(vals != null) {\r\n        return vals[roundNumber % vals.length];\r\n    }\r\n    String sval = props.getProperty(name, \"\" + dflt);\r\n    if(sval.indexOf(\":\") < 0) {\r\n        return Boolean.valueOf(sval).booleanValue();\r\n    }\r\n    int k = sval.indexOf(\":\");\r\n    String colName = sval.substring(0, k);\r\n    sval = sval.substring(k + 1);\r\n    colForValByRound.put(name, colName);\r\n    vals = propToBooleanArray(sval);\r\n    valByRound.put(name, vals);\r\n    return vals[roundNumber % vals.length];\r\n}", "public UpdateLinkAttributesResult updateLinkAttributes(UpdateLinkAttributesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateLinkAttributes(request);\r\n}", "public NumericPayloadTokenFilter(TokenStream input, float payload, String typeMatch) {\r\n    super(input);\r\n    if(typeMatch == null) {\r\n        throw new IllegalArgumentException(\"typeMatch must not be null\");\r\n    }\r\n    thePayload = new BytesRef(PayloadHelper.encodeFloat(payload));\r\n    this.typeMatch = typeMatch;\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[CALCCOUNT]\\n\");\r\n    buffer.append(\"    .iterations     = \").append(Integer.toHexString(getIterations())).append(\"\\n\");\r\n    buffer.append(\"[/CALCCOUNT]\\n\");\r\n    return buffer.toString();\r\n}", "public E push(E object) {\r\n    addElement(object);\r\n    return object;\r\n}", "public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) {\r\n    super(initialCapacity, loadFactor);\r\n    init();\r\n    this.accessOrder = accessOrder;\r\n}", "public TreeSet() {\r\n    backingMap = new TreeMap<E, Object>();\r\n}", "public long skip(long charCount) throws IOException {if(charCount < 0) {\r\n        throw new IllegalArgumentException(\"charCount < 0: \" + charCount);\r\n    } synchronized(lock) {\r\n        long skipped = 0;\r\n        int toRead = charCount < 512 ? (int) charCount : 512;\r\n        char[] charsSkipped = new char[toRead];\r\n        while(skipped < charCount) {\r\n            int read = read(charsSkipped, 0, toRead);\r\n            if(read == -1) {\r\n                return skipped;\r\n            }\r\n            skipped += read;\r\n            if(read < toRead) {\r\n                return skipped;\r\n            }\r\n            if(charCount - skipped < toRead) {\r\n                toRead = (int)(charCount - skipped);\r\n            }\r\n        }\r\n        return skipped;\r\n    }}", "public ValueEval getRef3DEval(Ref3DPxg rptg) {\r\n    SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());\r\n    return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);\r\n}", "public NewAnalyzerTask(PerfRunData runData) {\r\n    super(runData);\r\n    analyzerNames = new ArrayList<>();\r\n}", "public boolean equals(Object o) {\r\n    return o instanceof EnglishStemmer;\r\n}", "public void decode(long[] blocks, int blocksOffset, long[] values,int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long block = blocks[blocksOffset++];\r\n        valuesOffset = decode(block, values, valuesOffset);\r\n    }\r\n}", "public final void incRef() {\r\n    ensureOpen();\r\n    refCount.incrementAndGet();\r\n}", "public ReplicationGroup testFailover(TestFailoverRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTestFailover(request);\r\n}", "public RefWriter(Collection<Ref> refs) {\r\n    this.refs = RefComparator.sort(refs);\r\n}", "public ByteVector(int capacity) {\r\n    if(capacity > 0) {\r\n        blockSize = capacity;\r\n    } else {\r\n        blockSize = DEFAULT_BLOCK_SIZE;\r\n    }\r\n    array = new byte[blockSize];\r\n    n = 0;\r\n}", "public void endWorker() {\r\n    if(workers.decrementAndGet() == 0)process.release();\r\n}", "public DescribeVolumeStatusResult describeVolumeStatus(DescribeVolumeStatusRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeVolumeStatus(request);\r\n}", "public IntMapper(final int initialCapacity) {\r\n    elements = new ArrayList<>(initialCapacity);\r\n    valueKeyMap = new HashMap<>(initialCapacity);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_borderType);\r\n    out.writeShort(field_2_options);\r\n}", "public synchronized void copyInto(Object[] elements) {\r\n    System.arraycopy(elementData, 0, elements, 0, elementCount);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {\r\n    double s0;\r\n    String s1;\r\n    try {\r\n        s0 = evaluateDoubleArg(arg0, srcRowIndex, srcColumnIndex);\r\n        s1 = evaluateStringArg(arg1, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    try {\r\n        String formattedStr = formatter.formatRawCellContents(s0, -1, s1);\r\n        return new StringEval(formattedStr);\r\n    } catch(Exception e) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n}", "public CustomViewSettingsRecordAggregate(RecordStream rs) {\r\n    _begin = rs.getNext();\r\n    if(_begin.getSid() != UserSViewBegin.sid) {\r\n        throw new IllegalStateException(\"Bad begin record\");\r\n    }\r\n    List<RecordBase> temp = new ArrayList<>();\r\n    while(rs.peekNextSid() != UserSViewEnd.sid) {\r\n        if(PageSettingsBlock.isComponentRecord(rs.peekNextSid())) {\r\n            if(_psBlock != null) {\r\n                if(rs.peekNextSid() == HeaderFooterRecord.sid) {\r\n                    _psBlock.addLateHeaderFooter((HeaderFooterRecord)rs.getNext());\r\n                    continue;\r\n                }\r\n                throw new IllegalStateException(\"Found more than one PageSettingsBlock in chart sub-stream, had sid: \" + rs.peekNextSid());\r\n            }\r\n            _psBlock = new PageSettingsBlock(rs);\r\n            temp.add(_psBlock);\r\n            continue;\r\n        }\r\n        temp.add(rs.getNext());\r\n    }\r\n    _recs = temp;\r\n    _end = rs.getNext();\r\n    if(_end.getSid() != UserSViewEnd.sid) {\r\n        throw new IllegalStateException(\"Bad custom view settings end record\");\r\n    }\r\n}", "public DeleteSignalingChannelResult deleteSignalingChannel(DeleteSignalingChannelRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteSignalingChannel(request);\r\n}", "@Override public boolean remove(Object o) {\r\n    if(contains(o)) {\r\n        Entry<?> entry = (Entry<?>) o;\r\n        AtomicInteger frequency = backingMap.remove(entry.getElement());\r\n        int numberRemoved = frequency.getAndSet(0);\r\n        size -= numberRemoved;\r\n        return true;\r\n    }\r\n    return false;\r\n}", "public SnapshotDeletionPolicy(IndexDeletionPolicy primary) {\r\n    this.primary = primary;\r\n}", "public void throwException() throws BufferUnderflowException,BufferOverflowException, UnmappableCharacterException,MalformedInputException, CharacterCodingException {switch(this.type) {\r\n    case TYPE_UNDERFLOW:\r\n        throw new BufferUnderflowException();\r\n    case TYPE_OVERFLOW:\r\n        throw new BufferOverflowException();\r\n    case TYPE_UNMAPPABLE_CHAR:\r\n        throw new UnmappableCharacterException(this.length);\r\n    case TYPE_MALFORMED_INPUT:\r\n        throw new MalformedInputException(this.length);\r\n    default:\r\n        throw new CharacterCodingException();\r\n    }}", "public StringPtg(LittleEndianInput in)  {\r\n    int nChars = in.readUByte();\r\n    _is16bitUnicode = (in.readByte() & 0x01) != 0;\r\n    if(_is16bitUnicode) {\r\n        field_3_string = StringUtil.readUnicodeLE(in, nChars);\r\n    } else {\r\n        field_3_string = StringUtil.readCompressedUnicode(in, nChars);\r\n    }\r\n}", "public GetPublicAccessUrlsRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"GetPublicAccessUrls\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public CleanCommand clean() {\r\n    return new CleanCommand(repo);\r\n}", "public Collection<PackFile> getPacks() {\r\n    PackList list = packList.get();\r\n    if(list == NO_PACKS)list = scanPacks(list);\r\n    PackFile[] packs = list.packs;\r\n    return Collections.unmodifiableCollection(Arrays.asList(packs));\r\n}", "public DescribeStackDriftDetectionStatusResult describeStackDriftDetectionStatus(DescribeStackDriftDetectionStatusRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStackDriftDetectionStatus(request);\r\n}", "public ListCloudFrontOriginAccessIdentitiesResult listCloudFrontOriginAccessIdentities(ListCloudFrontOriginAccessIdentitiesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListCloudFrontOriginAccessIdentities(request);\r\n}", "public static SshSessionFactory getInstance() {\r\n    return INSTANCE;\r\n}", "public ListConferenceProvidersResult listConferenceProviders(ListConferenceProvidersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListConferenceProviders(request);\r\n}", "public UpdateReceiptRuleResult updateReceiptRule(UpdateReceiptRuleRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateReceiptRule(request);\r\n}", "public String toString() {\r\n    final StringBuilder r = new StringBuilder();\r\n    r.append(\"(\");\r\n    for(int i = 0; i < subfilters.length; i++) {\r\n        if(i > 0)r.append(\" OR \");\r\n        r.append(subfilters[i].toString());\r\n    }\r\n    r.append(\")\");\r\n    return r.toString();\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(sid);\r\n    out.writeShort(length);\r\n    out.writeShort(flags);\r\n}", "public UpdateHealthCheckResult updateHealthCheck(UpdateHealthCheckRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateHealthCheck(request);\r\n}", "public synchronized long ramBytesUsed() {\r\n    long bytes = 0;\r\n    for(CachedOrds ords : ordsCache.values()) {\r\n        bytes += ords.ramBytesUsed();\r\n    }\r\n    return bytes;\r\n}", "public UpdateWorkforceResult updateWorkforce(UpdateWorkforceRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateWorkforce(request);\r\n}", "public void setObjectId(AnyObjectId id) {\r\n    id.copyRawTo(idBuffer(), idOffset());\r\n}", "public void write(byte[] buffer, int byteOffset, int byteCount) throws IOException {IoBridge.write(fd, buffer, byteOffset, byteCount); if(syncMetadata) {\r\n        fd.sync();\r\n    }}", "public GetBlockResult getBlock(GetBlockRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetBlock(request);\r\n}", "public void exportDirectory(File dir) {\r\n    exportBase.add(dir);\r\n}", "public CreateReservedInstancesListingResult createReservedInstancesListing(CreateReservedInstancesListingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateReservedInstancesListing(request);\r\n}", "public ByteBuffer put(byte b) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\r\n    double result;\r\n    try {\r\n        List<Double> temp = new ArrayList<>();\r\n        for(ValueEval arg : args) {\r\n            collectValues(arg, temp);\r\n        }\r\n        double[] values = new double[temp.size()];\r\n        for(int i = 0; i < values.length; i++) {\r\n            values[i] = temp.get(i).doubleValue();\r\n        }\r\n        result = evaluate(values);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    return new NumberEval(result);\r\n}", "public static int getCharType(char ch) {\r\n    if(isSurrogate(ch))return CharType.SURROGATE;\r\n    if(ch >= 0x4E00 && ch <= 0x9FA5)return CharType.HANZI;\r\n    if((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))return CharType.LETTER;\r\n    if(ch >= 0x0030 && ch <= 0x0039)return CharType.DIGIT;\r\n    if(ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '\u3000')return CharType.SPACE_LIKE;\r\n    if((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)|| (ch >= 0x3001 && ch <= 0x301E))return CharType.DELIMITER;\r\n    if((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))return CharType.FULLWIDTH_LETTER;\r\n    if(ch >= 0xFF10 && ch <= 0xFF19)return CharType.FULLWIDTH_DIGIT;\r\n    if(ch >= 0xFE30 && ch <= 0xFF63)return CharType.DELIMITER;\r\n    return CharType.OTHER;\r\n}", "public StopJumpserverRequest() {\r\n    super(\"HPC\", \"2016-06-03\", \"StopJumpserver\", \"hpc\");\r\n    setMethod(MethodType.POST);\r\n}", "public CreateDirectoryConfigResult createDirectoryConfig(CreateDirectoryConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDirectoryConfig(request);\r\n}", "public DescribeExportTasksResult describeExportTasks() {\r\n    return describeExportTasks(new DescribeExportTasksRequest());\r\n}", "public ExportClientVpnClientCertificateRevocationListResult exportClientVpnClientCertificateRevocationList(ExportClientVpnClientCertificateRevocationListRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeExportClientVpnClientCertificateRevocationList(request);\r\n}", "public CompleteMultipartUploadResult completeMultipartUpload(CompleteMultipartUploadRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCompleteMultipartUpload(request);\r\n}", "public long ramBytesUsed() {\r\n    long sizeInBytes = 0;\r\n    sizeInBytes += RamUsageEstimator.sizeOf(minValues);\r\n    sizeInBytes += RamUsageEstimator.sizeOf(averages);\r\n    for(PackedInts.Reader reader: subReaders) {\r\n        sizeInBytes += reader.ramBytesUsed();\r\n    }\r\n    return sizeInBytes;\r\n}", "public static void fill(Object[] array, Object value) {\r\n    for(int i = 0; i < array.length; i++) {\r\n        array[i] = value;\r\n    }\r\n}", "public ByteBuffer putDouble(int index, double value) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public DescribeAdjustmentTypesResult describeAdjustmentTypes() {\r\n    return describeAdjustmentTypes(new DescribeAdjustmentTypesRequest());\r\n}", "public PersonIdent getSourceCommitter() {\r\n    RevCommit c = getSourceCommit();\r\n    return c != null ? c.getCommitterIdent() : null;\r\n}", "public Object[] toArray() {\r\n    int index = 0;\r\n    Object[] contents = new Object[size];\r\n    Link<E> link = voidLink.next;\r\n    while(link != voidLink) {\r\n        contents[index++] = link.data;\r\n        link = link.next;\r\n    }\r\n    return contents;\r\n}", "public String toString() {\r\n    return name + \" version \" + version;\r\n}", "public PushCommand setRefSpecs(RefSpec... specs) {\r\n    checkCallable();\r\n    this.refSpecs.clear();\r\n    Collections.addAll(refSpecs, specs);\r\n    return this;\r\n}", "public String toString(String field) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"spanFirst(\");\r\n    buffer.append(match.toString(field));\r\n    buffer.append(\", \");\r\n    buffer.append(end);\r\n    buffer.append(\")\");\r\n    return buffer.toString();\r\n}", "public X509Certificate[] getAcceptedIssuers() {\r\n    return null;\r\n}", "public int read() {\r\n    if(pos < size) {\r\n        return s.charAt(pos++);\r\n    } else {\r\n        s = null;\r\n        return -1;\r\n    }\r\n}", "public PersonIdent getRefLogIdent() {\r\n    return destination.getRefLogIdent();\r\n}", "@Override public int size() {\r\n    return size;\r\n}", "public GetRequestValidatorsResult getRequestValidators(GetRequestValidatorsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetRequestValidators(request);\r\n}", "public String toString() {\r\n    return \"I(F)\";\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj)return true;\r\n    if(obj == null)return false;\r\n    if(getClass() != obj.getClass())return false;\r\n    SegToken other = (SegToken) obj;\r\n    if(!Arrays.equals(charArray, other.charArray))return false;\r\n    if(endOffset != other.endOffset)return false;\r\n    if(index != other.index)return false;\r\n    if(startOffset != other.startOffset)return false;\r\n    if(weight != other.weight)return false;\r\n    if(wordType != other.wordType)return false;\r\n    return true;\r\n}", "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\r\n    readHeader(data, offset);\r\n    int pos            = offset + 8;\r\n    int size           = 0;\r\n    field_1_shapeId    =  LittleEndian.getInt(data, pos + size);\r\n    size += 4;\r\n    field_2_flags      =  LittleEndian.getInt(data, pos + size);\r\n    size += 4;\r\n    return getRecordSize();\r\n}", "public String getSignerName() {\r\n    return ALGORITHM_NAME;\r\n}", "public synchronized void clear() {\r\n    if(size != 0) {\r\n        Arrays.fill(table, null);\r\n        modCount++;\r\n        size = 0;\r\n    }\r\n}", "public CancelCapacityReservationResult cancelCapacityReservation(CancelCapacityReservationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCancelCapacityReservation(request);\r\n}", "public ImportDocumentationPartsResult importDocumentationParts(ImportDocumentationPartsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeImportDocumentationParts(request);\r\n}", "public SuggestResult suggest(SuggestRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSuggest(request);\r\n}", "public Explanation explain(int docId, String field, int numPayloadsSeen, float payloadScore) {\r\n    return Explanation.match(docScore(docId, field, numPayloadsSeen, payloadScore),getClass().getSimpleName() + \".docScore()\");\r\n}", "public int serialize(int offset, byte[] data) {\r\n    int result = 0;\r\n    for(org.apache.poi.hssf.record.Record rec : _list) {\r\n        result += rec.serialize(offset + result, data);\r\n    }\r\n    return result;\r\n}", "public String toString() {\r\n    return _string.toString();\r\n}", "public static long[] copyOfRange(long[] original, int start, int end) {\r\n    if(start > end) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    int originalLength = original.length;\r\n    if(start < 0 || start > originalLength) {\r\n        throw new ArrayIndexOutOfBoundsException();\r\n    }\r\n    int resultLength = end - start;\r\n    int copyLength = Math.min(resultLength, originalLength - start);\r\n    long[] result = new long[resultLength];\r\n    System.arraycopy(original, start, result, 0, copyLength);\r\n    return result;\r\n}", "public static byte[] toByteArray(ByteBuffer buffer, int length) {\r\n    if(buffer.hasArray() && buffer.arrayOffset() == 0) {\r\n        return buffer.array();\r\n    }\r\n    checkByteSizeLimit(length);\r\n    byte[] data = new byte[length];\r\n    buffer.get(data);\r\n    return data;\r\n}", "public synchronized void setProgress(int progress) {\r\n    setProgress(progress, false);\r\n}", "public void removeCell(CellValueRecordInterface cell) {\r\n    if(cell == null) {\r\n        throw new IllegalArgumentException(\"cell must not be null\");\r\n    }\r\n    int row = cell.getRow();\r\n    if(row >= records.length) {\r\n        throw new RuntimeException(\"cell row is out of range\");\r\n    }\r\n    CellValueRecordInterface[] rowCells = records[row];\r\n    if(rowCells == null) {\r\n        throw new RuntimeException(\"cell row is already empty\");\r\n    }\r\n    short column = cell.getColumn();\r\n    if(column >= rowCells.length) {\r\n        throw new RuntimeException(\"cell column is out of range\");\r\n    }\r\n    rowCells[column] = null;\r\n}", "public static String canonicalizePath(String path, boolean discardRelativePrefix) {\r\n    int segmentStart = 0;\r\n    int deletableSegments = 0;\r\n    for(int i = 0; i <= path.length();) {\r\n        int nextSegmentStart;\r\n        if(i == path.length()) {\r\n            nextSegmentStart = i;\r\n        } else if(path.charAt(i) == '/') {\r\n            nextSegmentStart = i + 1;\r\n        } else {\r\n            i++;\r\n            continue;\r\n        }\r\n        if(i == segmentStart + 1 && path.regionMatches(segmentStart, \".\", 0, 1)) {\r\n            path = path.substring(0, segmentStart) + path.substring(nextSegmentStart);\r\n            i = segmentStart;\r\n        } else if(i == segmentStart + 2 && path.regionMatches(segmentStart, \"..\", 0, 2)) {\r\n            if(deletableSegments > 0 || discardRelativePrefix) {\r\n                deletableSegments--;\r\n                int prevSegmentStart = path.lastIndexOf('/', segmentStart - 2) + 1;\r\n                path = path.substring(0, prevSegmentStart) + path.substring(nextSegmentStart);\r\n                i = segmentStart = prevSegmentStart;\r\n            } else {\r\n                i++;\r\n                segmentStart = i;\r\n            }\r\n        } else {\r\n            if(i > 0) {\r\n                deletableSegments++;\r\n            }\r\n            i++;\r\n            segmentStart = i;\r\n        }\r\n    }\r\n    return path;\r\n}", "public ApostropheFilterFactory(Map<String, String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameter(s): \" + args);\r\n    }\r\n}", "public Entry<String, Ref> peek() {\r\n    if(packedIdx < packed.size() && looseIdx < loose.size()) {\r\n        Ref p = packed.get(packedIdx);\r\n        Ref l = loose.get(looseIdx);\r\n        int cmp = RefComparator.compareTo(p, l);\r\n        if(cmp < 0) {\r\n            packedIdx++;\r\n            return toEntry(p);\r\n        }\r\n        if(cmp == 0)packedIdx++;\r\n        looseIdx++;\r\n        return toEntry(resolveLoose(l));\r\n    }\r\n    if(looseIdx < loose.size())return toEntry(resolveLoose(loose.get(looseIdx++)));\r\n    if(packedIdx < packed.size())return toEntry(packed.get(packedIdx++));\r\n    return null;\r\n}", "public DeleteEnvironmentResult deleteEnvironment(DeleteEnvironmentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteEnvironment(request);\r\n}", "public int stem(char s[], int len) {\r\n    for(int i = 0; i < len; i++)switch(s[i]) {\r\n        case '\u00e1':\r\n            s[i] = 'a';\r\n            break;\r\n        case '\u00eb':\r\n        case '\u00e9':\r\n            s[i] = 'e';\r\n            break;\r\n        case '\u00ed':\r\n            s[i] = 'i';\r\n            break;\r\n        case '\u00f3':\r\n        case '\u0151':\r\n        case '\u00f5':\r\n        case '\u00f6':\r\n            s[i] = 'o';\r\n            break;\r\n        case '\u00fa':\r\n        case '\u0171':\r\n        case '\u0169':\r\n        case '\u00fb':\r\n        case '\u00fc':\r\n            s[i] = 'u';\r\n            break;\r\n        }\r\n    len = removeCase(s, len);\r\n    len = removePossessive(s, len);\r\n    len = removePlural(s, len);\r\n    return normalize(s, len);\r\n}", "public void addChildBefore(EscherRecord record, int insertBeforeRecordId) {\r\n    int idx = 0;\r\n    for(EscherRecord rec : this) {\r\n        if(rec.getRecordId() == (short)insertBeforeRecordId) {\r\n            break;\r\n        }\r\n        idx++;\r\n    }\r\n    _childRecords.add(idx, record);\r\n}", "public ListAlbumsRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbums\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest() {\r\n    super(\"Domain-intl\", \"2017-12-18\", \"SaveTaskForUpdatingRegistrantInfoByIdentityCredential\", \"domain\");\r\n    setMethod(MethodType.POST);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    int result;\r\n    if(arg0 instanceof TwoDEval) {\r\n        result = ((TwoDEval) arg0).getHeight();\r\n    } else if(arg0 instanceof RefEval) {\r\n        result = 1;\r\n    } else {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new NumberEval(result);\r\n}", "public DescribeReservedInstancesResult describeReservedInstances() {\r\n    return describeReservedInstances(new DescribeReservedInstancesRequest());\r\n}", "public void setPackedGitMMAP(boolean usemmap) {\r\n    packedGitMMAP = usemmap;\r\n}", "public POIFSDocumentPath() {\r\n    this.components = new String[ 0 ];\r\n}", "public String toString() {\r\n    return key + \"/\" + value;\r\n}", "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final int byte0 = blocks[blocksOffset++] & 0xFF;\r\n        final int byte1 = blocks[blocksOffset++] & 0xFF;\r\n        final int byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | (byte2 >>> 4);\r\n        final int byte3 = blocks[blocksOffset++] & 0xFF;\r\n        final int byte4 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;\r\n    }\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(_extBookIndex);\r\n    out.writeShort(_firstSheetIndex);\r\n    out.writeShort(_lastSheetIndex);\r\n}", "public PatternParser(PatternConsumer consumer) {\r\n    this();\r\n    this.consumer = consumer;\r\n}", "public final String[] getValues(String name) {\r\n    List<String> result = new ArrayList<>();\r\n    for(IndexableField field : fields) {\r\n        if(field.name().equals(name) && field.stringValue() != null) {\r\n            result.add(field.stringValue());\r\n        }\r\n    }\r\n    if(result.size() == 0) {\r\n        return NO_STRINGS;\r\n    }\r\n    return result.toArray(new String[result.size()]);\r\n}", "public ListIdentityPoolUsageResult listIdentityPoolUsage(ListIdentityPoolUsageRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListIdentityPoolUsage(request);\r\n}", "public ValueEval evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\r\n    if(args.length < 1 || args.length > 5) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    try {\r\n        BaseRef baseRef = evaluateBaseRef(args[0]);\r\n        int rowOffset = (args[1] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[1], srcCellRow, srcCellCol);\r\n        int columnOffset = (args[2] instanceof MissingArgEval) ? 0 : evaluateIntArg(args[2], srcCellRow, srcCellCol);\r\n        int height = baseRef.getHeight();\r\n        int width = baseRef.getWidth();\r\n        switch(args.length) {\r\n        case 5:\r\n            if(!(args[4] instanceof MissingArgEval)) {\r\n                width = evaluateIntArg(args[4], srcCellRow, srcCellCol);\r\n            }\r\n        case 4:\r\n            if(!(args[3] instanceof MissingArgEval)) {\r\n                height = evaluateIntArg(args[3], srcCellRow, srcCellCol);\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n        if(height == 0 || width == 0) {\r\n            return ErrorEval.REF_INVALID;\r\n        }\r\n        LinearOffsetRange rowOffsetRange = new LinearOffsetRange(rowOffset, height);\r\n        LinearOffsetRange colOffsetRange = new LinearOffsetRange(columnOffset, width);\r\n        return createOffset(baseRef, rowOffsetRange, colOffsetRange);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n}", "public int[] getCountsByTime() {\r\n    return countsByTime;\r\n}", "public UpdateAccountResult updateAccount(UpdateAccountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateAccount(request);\r\n}", "public DescribeTrainingJobResult describeTrainingJob(DescribeTrainingJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTrainingJob(request);\r\n}", "public DeleteGroupResult deleteGroup(DeleteGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteGroup(request);\r\n}", "public int advance(int target) {\r\n    upto++;\r\n    if(upto == docIDs.length) {\r\n        return docID = NO_MORE_DOCS;\r\n    }\r\n    int inc = 10;\r\n    int nextUpto = upto+10;\r\n    int low;\r\n    int high;\r\n    while(true) {\r\n        if(nextUpto >= docIDs.length) {\r\n            low = nextUpto-inc;\r\n            high = docIDs.length-1;\r\n            break;\r\n        }\r\n        if(target <= docIDs[nextUpto]) {\r\n            low = nextUpto-inc;\r\n            high = nextUpto;\r\n            break;\r\n        }\r\n        inc *= 2;\r\n        nextUpto += inc;\r\n    }\r\n    while(true) {\r\n        if(low > high) {\r\n            upto = low;\r\n            break;\r\n        }\r\n        int mid = (low + high) >>> 1;\r\n        int cmp = docIDs[mid] - target;\r\n        if(cmp < 0) {\r\n            low = mid + 1;\r\n        } else if(cmp > 0) {\r\n            high = mid - 1;\r\n        } else {\r\n            upto = mid;\r\n            break;\r\n        }\r\n    }\r\n    if(upto == docIDs.length) {\r\n        return docID = NO_MORE_DOCS;\r\n    } else {\r\n        return docID = docIDs[upto];\r\n    }\r\n}", "public void registerListener(final POIFSReaderListener listener) {\r\n    if(listener == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if(registryClosed) {\r\n        throw new IllegalStateException();\r\n    }\r\n    registry.registerListener(listener);\r\n}", "public static int[] grow(int[] array, int minSize) {\r\nassert minSize >= 0: \"size must be positive (got \"\r\n    + minSize + \"): likely integer overflow?\";\r\n    if(array.length < minSize) {\r\n        return growExact(array, oversize(minSize, Integer.BYTES));\r\n    }\r\n    elsereturn array;\r\n}", "public void visitTerminal(TerminalNode node) {\r\n    System.out.println(\"consume \"+node.getSymbol()+\" rule \"+getRuleNames()[_ctx.getRuleIndex()]);\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new LatvianStemFilter(input);\r\n}", "public ReplicationGroup increaseReplicaCount(IncreaseReplicaCountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeIncreaseReplicaCount(request);\r\n}", "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = byte0 >>> 5;\r\n        values[valuesOffset++] = (byte0 >>> 2) & 7;\r\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte0 & 3) << 1) | (byte1 >>> 7);\r\n        values[valuesOffset++] = (byte1 >>> 4) & 7;\r\n        values[valuesOffset++] = (byte1 >>> 1) & 7;\r\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);\r\n        values[valuesOffset++] = (byte2 >>> 3) & 7;\r\n        values[valuesOffset++] = byte2 & 7;\r\n    }\r\n}", "public StopHyperParameterTuningJobResult stopHyperParameterTuningJob(StopHyperParameterTuningJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopHyperParameterTuningJob(request);\r\n}", "public ResetNetworkInterfaceAttributeResult resetNetworkInterfaceAttribute(ResetNetworkInterfaceAttributeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeResetNetworkInterfaceAttribute(request);\r\n}", "public RevBlob lookupBlob(AnyObjectId id) {\r\n    RevBlob c = (RevBlob) objects.get(id);\r\n    if(c == null) {\r\n        c = new RevBlob(id);\r\n        objects.add(c);\r\n    }\r\n    return c;\r\n}", "public ListGroupMembershipsResult listGroupMemberships(ListGroupMembershipsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListGroupMemberships(request);\r\n}", "public static void mkdir(File d, boolean skipExisting)throws IOException {if(!d.mkdir()) {\r\n        if(skipExisting && d.isDirectory())return;\r\n        throw new IOException(MessageFormat.format(JGitText.get().mkDirFailed, d.getAbsolutePath()));\r\n    }}", "public UpdateDetectorVersionMetadataResult updateDetectorVersionMetadata(UpdateDetectorVersionMetadataRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDetectorVersionMetadata(request);\r\n}", "public void write(String str, int offset, int count) throws IOException {if((offset | count) < 0 || offset > str.length() - count) {\r\n        throw new StringIndexOutOfBoundsException(str, offset, count);\r\n    } char[] buf = new char[count]; str.getChars(offset, offset + count, buf, 0); synchronized(lock) {\r\n        write(buf, 0, buf.length);\r\n    }}", "public synchronized void ensureCapacity(int min) {\r\n    super.ensureCapacity(min);\r\n}", "public DescribeRecipeResult describeRecipe(DescribeRecipeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeRecipe(request);\r\n}", "public DisassociateRouteTableResult disassociateRouteTable(DisassociateRouteTableRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociateRouteTable(request);\r\n}", "public SetTopicAttributesRequest(String topicArn, String attributeName, String attributeValue) {\r\n    setTopicArn(topicArn);\r\n    setAttributeName(attributeName);\r\n    setAttributeValue(attributeValue);\r\n}", "public static char[] grow(char[] array, int minSize) {\r\nassert minSize >= 0: \"size must be positive (got \"\r\n    + minSize + \"): likely integer overflow?\";\r\n    if(array.length < minSize) {\r\n        return growExact(array, oversize(minSize, Character.BYTES));\r\n    }\r\n    elsereturn array;\r\n}", "public StashCreateCommand setRef(String ref) {\r\n    this.ref = ref;\r\n    return this;\r\n}", "public FormulaRecord(RecordInputStream ris) {\r\n    super(ris);\r\n    long valueLongBits  = ris.readLong();\r\n    field_5_options = ris.readShort();\r\n    specialCachedValue = FormulaSpecialCachedValue.create(valueLongBits);\r\n    if(specialCachedValue == null) {\r\n        field_4_value = Double.longBitsToDouble(valueLongBits);\r\n    }\r\n    field_6_zero = ris.readInt();\r\n    int field_7_expression_len = ris.readShort();\r\n    int nBytesAvailable = ris.available();\r\n    field_8_parsed_expr = Formula.read(field_7_expression_len, ris, nBytesAvailable);\r\n}", "public SynonymQuery build() {\r\n    Collections.sort(terms, Comparator.comparing(a -> a.term));\r\n    return new SynonymQuery(terms.toArray(new TermAndBoost[0]), field);\r\n}", "public PasswordRev4Record(RecordInputStream in) {\r\n    field_1_password = in.readShort();\r\n}", "public boolean isReadOnly() {\r\n    return false;\r\n}", "public int preceding(int pos) {\r\n    if(pos < start || pos > end) {\r\n        throw new IllegalArgumentException(\"offset out of bounds\");\r\n    } else if(pos == start) {\r\n        current = start;\r\n        return DONE;\r\n    } else {\r\n        return first();\r\n    }\r\n}", "public CodepageRecord(RecordInputStream in) {\r\n    field_1_codepage = in.readShort();\r\n}", "public ApproveAssignmentResult approveAssignment(ApproveAssignmentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeApproveAssignment(request);\r\n}", "public DescribeVpnConnectionsResult describeVpnConnections() {\r\n    return describeVpnConnections(new DescribeVpnConnectionsRequest());\r\n}", "public final V next() {\r\n    return nextEntry().value;\r\n}", "public DescribeInstanceHealthResult describeInstanceHealth(DescribeInstanceHealthRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeInstanceHealth(request);\r\n}", "public static void register(TransportProtocol proto) {\r\n    protocols.add(0, new WeakReference<>(proto));\r\n}", "public static char[] copyOfRange(char[] original, int start, int end) {\r\n    if(start > end) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    int originalLength = original.length;\r\n    if(start < 0 || start > originalLength) {\r\n        throw new ArrayIndexOutOfBoundsException();\r\n    }\r\n    int resultLength = end - start;\r\n    int copyLength = Math.min(resultLength, originalLength - start);\r\n    char[] result = new char[resultLength];\r\n    System.arraycopy(original, start, result, 0, copyLength);\r\n    return result;\r\n}", "public static void fill(int[] array, int value) {\r\n    for(int i = 0; i < array.length; i++) {\r\n        array[i] = value;\r\n    }\r\n}", "public Class<? extends Record> peekNextClass() {\r\n    if(!hasNext()) {\r\n        return null;\r\n    }\r\n    return _list.get(_nextIndex).getClass();\r\n}", "public static char[] copyOf(char[] original, int newLength) {\r\n    if(newLength < 0) {\r\n        throw new NegativeArraySizeException();\r\n    }\r\n    return copyOfRange(original, 0, newLength);\r\n}", "public DeleteRelationalDatabaseResult deleteRelationalDatabase(DeleteRelationalDatabaseRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteRelationalDatabase(request);\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    WeightedPhraseInfo other = (WeightedPhraseInfo) obj;\r\n    if(getStartOffset() != other.getStartOffset()) {\r\n        return false;\r\n    }\r\n    if(getEndOffset() != other.getEndOffset()) {\r\n        return false;\r\n    }\r\n    if(getBoost() != other.getBoost()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public boolean hasNext() {\r\n    return nextBlock != POIFSConstants.END_OF_CHAIN;\r\n}", "public void write(char b) {\r\n    if(len >= buf.length) {\r\n        resize(len +1);\r\n    }\r\n    unsafeWrite(b);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    futureHeader.serialize(out);\r\n    out.writeShort(isf_sharedFeatureType);\r\n    out.writeByte(reserved);\r\n    out.writeInt((int)cbHdrData);\r\n    out.write(rgbHdrData);\r\n}", "public ListUserHierarchyGroupsResult listUserHierarchyGroups(ListUserHierarchyGroupsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListUserHierarchyGroups(request);\r\n}", "public GetTopicAttributesRequest(String topicArn) {\r\n    setTopicArn(topicArn);\r\n}", "public CreateTrafficPolicyVersionResult createTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateTrafficPolicyVersion(request);\r\n}", "@Override public boolean equals(Object object) {\r\n    if(this == object) {\r\n        return true;\r\n    }\r\n    if(object instanceof Map.Entry) {\r\n        Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;\r\n        return (key == null ? entry.getKey() == null : key.equals(entry.getKey()))&& (value == null ? entry.getValue() == null : value.equals(entry.getValue()));\r\n    }\r\n    return false;\r\n}", "public ListResourcesResult listResources(ListResourcesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListResources(request);\r\n}", "public final V getAndSet(V newValue) {\r\n    while(true) {\r\n        V x = get();\r\n        if(compareAndSet(x, newValue))return x;\r\n    }\r\n}", "public FeatHdrRecord() {\r\n    futureHeader = new FtrHeader();\r\n    futureHeader.setRecordType(sid);\r\n}", "public DisassociatePhoneNumbersFromVoiceConnectorResult disassociatePhoneNumbersFromVoiceConnector(DisassociatePhoneNumbersFromVoiceConnectorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociatePhoneNumbersFromVoiceConnector(request);\r\n}", "public ObjectId idFor(int type, byte[] data) {\r\n    return idFor(type, data, 0, data.length);\r\n}", "public void removeParseListener(ParseTreeListener listener) {\r\n    if(_parseListeners != null) {\r\n        if(_parseListeners.remove(listener)) {\r\n            if(_parseListeners.isEmpty()) {\r\n                _parseListeners = null;\r\n            }\r\n        }\r\n    }\r\n}", "public AxisRecord(RecordInputStream in) {\r\n    field_1_axisType  = in.readShort();\r\n    field_2_reserved1 = in.readInt();\r\n    field_3_reserved2 = in.readInt();\r\n    field_4_reserved3 = in.readInt();\r\n    field_5_reserved4 = in.readInt();\r\n}", "public static double evaluate(double[] v) throws EvaluationException {if(v.length < 2) {\r\n        throw new EvaluationException(ErrorEval.NA);\r\n    } int[] counts = new int[v.length]; Arrays.fill(counts, 1); for(int i = 0, iSize = v.length; i < iSize; i++) {\r\n        for(int j = i + 1, jSize = v.length; j < jSize; j++) {\r\n            if(v[i] == v[j])counts[i]++;\r\n        }\r\n    } double maxv = 0; int maxc = 0; for(int i = 0, iSize = counts.length; i < iSize; i++) {\r\n        if(counts[i] > maxc) {\r\n            maxv = v[i];\r\n            maxc = counts[i];\r\n        }\r\n    } if(maxc > 1) {\r\n        return maxv;\r\n    } throw new EvaluationException(ErrorEval.NA);}", "public void addFacetCount(BytesRef facetValue, int count) {\r\n    if(count < currentMin) {\r\n        return;\r\n    }\r\n    FacetEntry facetEntry = new FacetEntry(facetValue, count);\r\n    if(facetEntries.size() == maxSize) {\r\n        if(facetEntries.higher(facetEntry) == null) {\r\n            return;\r\n        }\r\n        facetEntries.pollLast();\r\n    }\r\n    facetEntries.add(facetEntry);\r\n    if(facetEntries.size() == maxSize) {\r\n        currentMin = facetEntries.last().count;\r\n    }\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    String nl = System.getProperty(\"line.separator\");\r\n    buffer.append(\"[ftGmo]\" + nl);\r\n    buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(nl);\r\n    buffer.append(\"[/ftGmo]\" + nl);\r\n    return buffer.toString();\r\n}", "public String toString() {\r\n    return getMode().toString() + \" \" + getName();\r\n}", "public CharVector(int capacity) {\r\n    if(capacity > 0) {\r\n        blockSize = capacity;\r\n    } else {\r\n        blockSize = DEFAULT_BLOCK_SIZE;\r\n    }\r\n    array = new char[blockSize];\r\n    n = 0;\r\n}", "public DescribeAccountLimitsResult describeAccountLimits(DescribeAccountLimitsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAccountLimits(request);\r\n}", "public void removeBuiltinRecord(byte name, int sheetIndex) {\r\n    linkTable.removeBuiltinRecord(name, sheetIndex);\r\n}", "public CreateSecurityGroupResult createSecurityGroup(CreateSecurityGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSecurityGroup(request);\r\n}", "public boolean equals(Object other) {\r\n    return sameClassAs(other) &&equalsTo(getClass().cast(other));\r\n}", "public GetObjectInformationResult getObjectInformation(GetObjectInformationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetObjectInformation(request);\r\n}", "public StringBuffer append(long l) {\r\n    IntegralToString.appendLong(this, l);\r\n    return this;\r\n}", "public GetIntegrationResponsesResult getIntegrationResponses(GetIntegrationResponsesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetIntegrationResponses(request);\r\n}", "public ListDeploymentConfigsResult listDeploymentConfigs() {\r\n    return listDeploymentConfigs(new ListDeploymentConfigsRequest());\r\n}", "public CellRangeAddress remove(int rangeIndex) {\r\n    if(_list.isEmpty()) {\r\n        throw new RuntimeException(\"List is empty\");\r\n    }\r\n    if(rangeIndex < 0 || rangeIndex >= _list.size()) {\r\n        throw new RuntimeException(\"Range index (\" + rangeIndex+ \") is outside allowable range (0..\" + (_list.size()-1) + \")\");\r\n    }\r\n    return _list.remove(rangeIndex);\r\n}", "public DimConfig getDimConfig(String dimName) {\r\n    DimConfig ft = fieldTypes.get(dimName);\r\n    if(ft == null) {\r\n        ft = getDefaultDimConfig();\r\n    }\r\n    return ft;\r\n}", "public DescribeStackResourceDriftsResult describeStackResourceDrifts(DescribeStackResourceDriftsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeStackResourceDrifts(request);\r\n}", "public void setParams(String params) {\r\n    if(!supportsParams()) {\r\n        throw new UnsupportedOperationException(getName()+\" does not support command line parameters.\");\r\n    }\r\n    this.params = params;\r\n}", "public DescribeRepositoryAssociationResult describeRepositoryAssociation(DescribeRepositoryAssociationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeRepositoryAssociation(request);\r\n}", "public synchronized Enumeration<V> elements() {\r\n    return new ValueEnumeration();\r\n}", "public void set(int index, long value) {\r\n    final int o = index >>> 4;\r\n    final int b = index & 15;\r\n    final int shift = b << 2;\r\n    blocks[o] = (blocks[o] & ~(15L << shift)) | (value << shift);\r\n}", "public HTMLStripCharFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    escapedTags = getSet(args, \"escapedTags\");\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public int getEntryPathLength() {\r\n    return pathLen;\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(field_1_option_flag);\r\n    out.writeShort(field_2_ixals);\r\n    out.writeShort(field_3_not_used);\r\n    out.writeByte(field_4_name.length());\r\n    StringUtil.writeUnicodeStringFlagAndData(out, field_4_name);\r\n    if(!isOLELink() && !isStdDocumentNameIdentifier()) {\r\n        if(isAutomaticLink()) {\r\n            if(_ddeValues != null) {\r\n                out.writeByte(_nColumns-1);\r\n                out.writeShort(_nRows-1);\r\n                ConstantValueParser.encode(out, _ddeValues);\r\n            }\r\n        } else {\r\n            field_5_name_definition.serialize(out);\r\n        }\r\n    }\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[REFRESHALL]\\n\");\r\n    buffer.append(\"    .options      = \").append(HexDump.shortToHex(_options)).append(\"\\n\");\r\n    buffer.append(\"[/REFRESHALL]\\n\");\r\n    return buffer.toString();\r\n}", "public ContinueDeploymentResult continueDeployment(ContinueDeploymentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeContinueDeployment(request);\r\n}", "public void set(int index, long value) {\r\n    final int o = index / 3;\r\n    final int b = index % 3;\r\n    final int shift = b * 21;\r\n    blocks[o] = (blocks[o] & ~(2097151L << shift)) | (value << shift);\r\n}", "public long next() throws IOException {if(ord == valueCount) {\r\n        throw new EOFException();\r\n    } if(off == blockSize) {\r\n        refill();\r\n    } final long value = values[off++]; ++ord; return value;}", "public static final RevFilter between(Date since, Date until) {\r\n    return between(since.getTime(), until.getTime());\r\n}", "public DeleteVaultResult deleteVault(DeleteVaultRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVault(request);\r\n}", "public final void reset() {\r\n    it = cachedStates.getStates();\r\n}", "public void setDetachingSymbolicRef() {\r\n    detachingSymbolicRef = true;\r\n}", "public ModifyIdentityIdFormatResult modifyIdentityIdFormat(ModifyIdentityIdFormatRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyIdentityIdFormat(request);\r\n}", "public void addException(String word, ArrayList<Object> hyphenatedword) {\r\n    stoplist.put(word, hyphenatedword);\r\n}", "public GreekStemFilterFactory(Map<String,String> args) {\r\n    super(args);\r\n    if(!args.isEmpty()) {\r\n        throw new IllegalArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public RegisterTypeResult registerType(RegisterTypeRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeRegisterType(request);\r\n}", "public GetAccessControlEffectResult getAccessControlEffect(GetAccessControlEffectRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetAccessControlEffect(request);\r\n}", "public HSSFShapeGroup createGroup(HSSFChildAnchor anchor) {\r\n    HSSFShapeGroup group = new HSSFShapeGroup(this, anchor);\r\n    group.setParent(this);\r\n    group.setAnchor(anchor);\r\n    shapes.add(group);\r\n    onCreate(group);\r\n    return group;\r\n}", "public String toExternalString() {\r\n    final StringBuilder r = new StringBuilder();\r\n    appendSanitized(r, getName());\r\n    r.append(\" <\");\r\n    appendSanitized(r, getEmailAddress());\r\n    r.append(\"> \");\r\n    r.append(when / 1000);\r\n    r.append(' ');\r\n    appendTimezone(r, tzOffset);\r\n    return r.toString();\r\n}", "public static FontCharset valueOf(int value) {\r\n    if(value >= _table.length)return null;\r\n    return _table[value];\r\n}", "public NLPSentenceDetectorOp() {\r\n    sentenceSplitter = null;\r\n}", "public String resource() {\r\n    return this.resource;\r\n}", "public QueryScorer(Query query, String field) {\r\n    init(query, field, null, true);\r\n}", "public ActiveTrustedSigners(java.util.List<Signer> items) {\r\n    setItems(items);\r\n}", "public final String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getClass().getName());\r\n    sb.append(\" [\");\r\n    sb.append(formatReferenceAsString());\r\n    sb.append(\"]\");\r\n    return sb.toString();\r\n}", "public UpdateNodegroupConfigResult updateNodegroupConfig(UpdateNodegroupConfigRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateNodegroupConfig(request);\r\n}", "public void fill(int fromIndex, int toIndex, long val) {\r\n    assert val <= maxValue(getBitsPerValue());\r\n    assert fromIndex <= toIndex;\r\n    for(int i = fromIndex; i < toIndex; ++i) {\r\n        set(i, val);\r\n    }\r\n}", "public ListTrainingJobsResult listTrainingJobs(ListTrainingJobsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListTrainingJobs(request);\r\n}", "public DescribeProfilingGroupResult describeProfilingGroup(DescribeProfilingGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeProfilingGroup(request);\r\n}", "public IgnoreNode(List<FastIgnoreRule> rules) {\r\n    this.rules = rules;\r\n}", "public static void fill(char[] array, char value) {\r\n    for(int i = 0; i < array.length; i++) {\r\n        array[i] = value;\r\n    }\r\n}", "public GetTransitGatewayMulticastDomainAssociationsResult getTransitGatewayMulticastDomainAssociations(GetTransitGatewayMulticastDomainAssociationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetTransitGatewayMulticastDomainAssociations(request);\r\n}", "public LongBuffer compact() {\r\n    System.arraycopy(backingArray, position + offset, backingArray, offset, remaining());\r\n    position = limit - position;\r\n    limit = capacity;\r\n    mark = UNSET_MARK;\r\n    return this;\r\n}", "public GetCelebrityInfoResult getCelebrityInfo(GetCelebrityInfoRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetCelebrityInfo(request);\r\n}", "public GetTranscriptResult getTranscript(GetTranscriptRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetTranscript(request);\r\n}", "public DeleteCacheParameterGroupResult deleteCacheParameterGroup(DeleteCacheParameterGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteCacheParameterGroup(request);\r\n}", "public DescribeTagsRequest(java.util.List<Filter> filters) {\r\n    setFilters(filters);\r\n}", "public CreateCustomMetadataResult createCustomMetadata(CreateCustomMetadataRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateCustomMetadata(request);\r\n}", "public Cluster resumeCluster(ResumeClusterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeResumeCluster(request);\r\n}", "public DescribeMovingAddressesResult describeMovingAddresses(DescribeMovingAddressesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeMovingAddresses(request);\r\n}", "public SearchAddressBooksResult searchAddressBooks(SearchAddressBooksRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeSearchAddressBooks(request);\r\n}", "public UpdateDomainToDomainGroupRequest() {\r\n    super(\"Domain\", \"2018-01-29\", \"UpdateDomainToDomainGroup\");\r\n    setMethod(MethodType.POST);\r\n}", "public void add(RevCommit c) {\r\n    Block b = tail;\r\n    if(b == null) {\r\n        b = free.newBlock();\r\n        b.add(c);\r\n        head = b;\r\n        tail = b;\r\n        return;\r\n    } else if(b.isFull()) {\r\n        b = free.newBlock();\r\n        tail.next = b;\r\n        tail = b;\r\n    }\r\n    b.add(c);\r\n}", "public FloatBuffer put(int index, float c) {\r\n    checkIndex(index);\r\n    byteBuffer.putFloat(index * SizeOf.FLOAT, c);\r\n    return this;\r\n}", "public void flush() throws IOException {try {\r\n        beginWrite();\r\n        dst.flush();\r\n    } catch(InterruptedIOException e) {\r\n        throw writeTimedOut(e);\r\n    } finally {endWrite();}}", "public Set<String> getModified() {\r\n    return Collections.unmodifiableSet(diff.getModified());\r\n}", "public LongsRef next(int count) throws IOException {assert count > 0; if(ord == valueCount) {\r\n        throw new EOFException();\r\n    } if(off == blockSize) {\r\n        refill();\r\n    } count = Math.min(count, blockSize - off); count = (int) Math.min(count, valueCount - ord); valuesRef.offset = off; valuesRef.length = count; off += count; ord += count; return valuesRef;}", "public ByteBuffer slice() {\r\n    return new ReadOnlyHeapByteBuffer(backingArray, remaining(), offset + position);\r\n}", "public final boolean isEmpty() {\r\n    return beginA == endA && beginB == endB;\r\n}", "public static final int commitMessage(byte[] b, int ptr) {\r\n    final int sz = b.length;\r\n    if(ptr == 0)ptr += 46;\r\n    while(ptr < sz && b[ptr] == 'p')ptr += 48;\r\n    return tagMessage(b, ptr);\r\n}", "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    if(args.length != 2) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    try {\r\n        double startDateAsNumber = getValue(args[0]);\r\n        int offsetInMonthAsNumber = (int) getValue(args[1]);\r\n        Date startDate = DateUtil.getJavaDate(startDateAsNumber);\r\n        if(startDate == null) {\r\n            return ErrorEval.VALUE_INVALID;\r\n        }\r\n        Calendar calendar = LocaleUtil.getLocaleCalendar();\r\n        calendar.setTime(startDate);\r\n        calendar.add(Calendar.MONTH, offsetInMonthAsNumber);\r\n        return new NumberEval(DateUtil.getExcelDate(calendar.getTime()));\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n}", "public DeleteSuggesterResult deleteSuggester(DeleteSuggesterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteSuggester(request);\r\n}", "public CreatePipelineResult createPipeline(CreatePipelineRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreatePipeline(request);\r\n}", "public StopDeliveryStreamEncryptionResult stopDeliveryStreamEncryption(StopDeliveryStreamEncryptionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopDeliveryStreamEncryption(request);\r\n}", "public DeleteApplicationSnapshotResult deleteApplicationSnapshot(DeleteApplicationSnapshotRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteApplicationSnapshot(request);\r\n}", "public ApplyCommand apply() {\r\n    return new ApplyCommand(repo);\r\n}", "public RebootCacheClusterRequest(String cacheClusterId, java.util.List<String> cacheNodeIdsToReboot) {\r\n    setCacheClusterId(cacheClusterId);\r\n    setCacheNodeIdsToReboot(cacheNodeIdsToReboot);\r\n}", "public ModifyCacheClusterRequest(String cacheClusterId) {\r\n    setCacheClusterId(cacheClusterId);\r\n}", "public boolean equals(Object obj) {\r\n    if(this == obj) return true;\r\n    if(obj == null) return false;\r\n    if(getClass() != obj.getClass()) return false;\r\n    ScoreTerm other = (ScoreTerm) obj;\r\n    if(term == null) {\r\n        if(other.term != null) return false;\r\n    } else if(!term.bytesEquals(other.term)) return false;\r\n    return true;\r\n}", "public AssociateTransitGatewayMulticastDomainResult associateTransitGatewayMulticastDomain(AssociateTransitGatewayMulticastDomainRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeAssociateTransitGatewayMulticastDomain(request);\r\n}", "public UpdateContactResult updateContact(UpdateContactRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateContact(request);\r\n}", "public TableRecord(CellRangeAddress8Bit range) {\r\n    super(range);\r\n    field_6_res = 0;\r\n}", "public CreateProcessingJobResult createProcessingJob(CreateProcessingJobRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateProcessingJob(request);\r\n}", "public CharSequence subSequence(int start, int end) {\r\n    checkStartEndRemaining(start, end);\r\n    CharSequenceAdapter result = copy(this);\r\n    result.position = position + start;\r\n    result.limit = position + end;\r\n    return result;\r\n}", "public GetCoipPoolUsageResult getCoipPoolUsage(GetCoipPoolUsageRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetCoipPoolUsage(request);\r\n}", "public UpdateResolverEndpointResult updateResolverEndpoint(UpdateResolverEndpointRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateResolverEndpoint(request);\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    ValueEval veText;\r\n    try {\r\n        veText = OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    String strText = OperandResolver.coerceValueToString(veText);\r\n    Double result = convertTextToNumber(strText);\r\n    if(result == null) result = parseDateTime(strText);\r\n    if(result == null) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new NumberEval(result.doubleValue());\r\n}", "public int addExternalName(ExternalNameRecord rec) {\r\n    ExternalNameRecord[] tmp = new ExternalNameRecord[_externalNameRecords.length + 1];\r\n    System.arraycopy(_externalNameRecords, 0, tmp, 0, _externalNameRecords.length);\r\n    tmp[tmp.length - 1] = rec;\r\n    _externalNameRecords = tmp;\r\n    return _externalNameRecords.length - 1;\r\n}", "public DescribePrincipalIdFormatResult describePrincipalIdFormat(DescribePrincipalIdFormatRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribePrincipalIdFormat(request);\r\n}", "public ListPartnerEventSourceAccountsResult listPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListPartnerEventSourceAccounts(request);\r\n}", "public File getFile() {\r\n    return file;\r\n}", "public void onChanged() {\r\n    if(mSelectedIds.size() > 0) {\r\n        return;\r\n    }\r\n    chooseListToShow();\r\n    ensureSomeGroupIsExpanded();\r\n}", "public String getTextAsString() {\r\n    if(this.text == null)return null;\r\n    elsereturn this.text.toString();\r\n}", "public LongBuffer put(long[] src, int srcOffset, int longCount) {\r\n    Arrays.checkOffsetAndCount(src.length, srcOffset, longCount);\r\n    if(longCount > remaining()) {\r\n        throw new BufferOverflowException();\r\n    }\r\n    for(int i = srcOffset; i < srcOffset + longCount; ++i) {\r\n        put(src[i]);\r\n    }\r\n    return this;\r\n}", "@Override public boolean remove(Object object) {\r\n    synchronized(CopyOnWriteArrayList.this) {\r\n        int index = indexOf(object);\r\n        if(index == -1) {\r\n            return false;\r\n        }\r\n        remove(index);\r\n        return true;\r\n    }\r\n}", "public long length() {\r\n    if(onDiskFile == null) {\r\n        return super.length();\r\n    }\r\n    return onDiskFile.length();\r\n}", "public FieldBoostMapFCListener(QueryConfigHandler config) {\r\n    this.config = config;\r\n}", "public StartActivityStreamResult startActivityStream(StartActivityStreamRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStartActivityStream(request);\r\n}", "public Hyphenation hyphenate(String word, int remainCharCount,int pushCharCount) {\r\n    char[] w = word.toCharArray();\r\n    return hyphenate(w, 0, w.length, remainCharCount, pushCharCount);\r\n}", "public CreateSmsTemplateResult createSmsTemplate(CreateSmsTemplateRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateSmsTemplate(request);\r\n}", "public void clear() {\r\n    int n = mSize;\r\n    Object[] values = mValues;\r\n    for(int i = 0; i < n; i++) {\r\n        values[i] = null;\r\n    }\r\n    mSize = 0;\r\n    mGarbage = false;\r\n}", "public String toStringTree(Parser parser) {\r\n    return toString();\r\n}", "public long get(int index) {\r\n    final int o = index >>> 2;\r\n    final int b = index & 3;\r\n    final int shift = b << 4;\r\n    return (blocks[o] >>> shift) & 65535L;\r\n}", "public String toString() {\r\n    return getType().name() + \": \" + getOldId().name() + \" \"+ getNewId().name() + \" \" + getRefName();\r\n}", "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval text, ValueEval number_times) {\r\n    ValueEval veText1;\r\n    try {\r\n        veText1 = OperandResolver.getSingleValue(text, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.getErrorEval();\r\n    }\r\n    String strText1 = OperandResolver.coerceValueToString(veText1);\r\n    double numberOfTime = 0;\r\n    try {\r\n        numberOfTime = OperandResolver.coerceValueToDouble(number_times);\r\n    } catch(EvaluationException e) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    int numberOfTimeInt = (int)numberOfTime;\r\n    StringBuilder strb = new StringBuilder(strText1.length() * numberOfTimeInt);\r\n    for(int i = 0; i < numberOfTimeInt; i++) {\r\n        strb.append(strText1);\r\n    }\r\n    if(strb.toString().length() > 32767) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new StringEval(strb.toString());\r\n}", "public Entry<K, V> lastEntry() {\r\n    return immutableCopy(endpoint(false));\r\n}", "public DeleteEvaluationResult deleteEvaluation(DeleteEvaluationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteEvaluation(request);\r\n}", "public ContinueRecord(RecordInputStream in) {\r\n    _data = in.readRemainder();\r\n}", "public CreateFilterResult createFilter(CreateFilterRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateFilter(request);\r\n}", "public CharSequence subSequence(int start, int end) {\r\n    checkStartEndRemaining(start, end);\r\n    CharBuffer result = duplicate();\r\n    result.limit(position + end);\r\n    result.position(position + start);\r\n    return result;\r\n}", "public CreateTrafficMirrorSessionResult createTrafficMirrorSession(CreateTrafficMirrorSessionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateTrafficMirrorSession(request);\r\n}", "public CreateNodegroupResult createNodegroup(CreateNodegroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateNodegroup(request);\r\n}", "public SoraniStemFilter create(TokenStream input) {\r\n    return new SoraniStemFilter(input);\r\n}", "public UpdateCustomVerificationEmailTemplateResult updateCustomVerificationEmailTemplate(UpdateCustomVerificationEmailTemplateRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateCustomVerificationEmailTemplate(request);\r\n}", "public static FormulaError forInt(int type) throws IllegalArgumentException {FormulaError err = imap.get(type); if(err == null) err = bmap.get((byte)type); if(err == null) throw new IllegalArgumentException(\"Unknown error type: \" + type); return err;}", "public DeleteSubnetGroupResult deleteSubnetGroup(DeleteSubnetGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteSubnetGroup(request);\r\n}", "public String toString() {\r\n    return getClass().getName() + \" [\" +_error.getString() +\"]\";\r\n}", "public Object toObject() {\r\n    assert exists || 0.0D == value;\r\n    return exists ? value : null;\r\n}", "public void destroy() {\r\n    super.destroy();\r\n    if(onDiskFile != null) {\r\n        try {\r\n            if(!onDiskFile.delete())onDiskFile.deleteOnExit();\r\n        }\r\n        finally {onDiskFile = null;}\r\n    }\r\n}", "public DecreaseReplicationFactorResult decreaseReplicationFactor(DecreaseReplicationFactorRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDecreaseReplicationFactor(request);\r\n}", "public Counta() {\r\n    _predicate = defaultPredicate;\r\n}", "public EvaluationWorkbook getWorkbook() {\r\n    return _workbook;\r\n}", "public DescribeRouteTablesResult describeRouteTables() {\r\n    return describeRouteTables(new DescribeRouteTablesRequest());\r\n}", "public CreateAssessmentTemplateResult createAssessmentTemplate(CreateAssessmentTemplateRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateAssessmentTemplate(request);\r\n}", "public DeleteProjectResult deleteProject(DeleteProjectRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteProject(request);\r\n}", "public DeleteUserPolicyRequest(String userName, String policyName) {\r\n    setUserName(userName);\r\n    setPolicyName(policyName);\r\n}", "public TermVectorsReader clone() {\r\n    return new CompressingTermVectorsReader(this);\r\n}", "public void close() {\r\n    if(sock != null) {\r\n        try {\r\n            sch.releaseSession(sock);\r\n        }\r\n        finally {sock = null;}\r\n    }\r\n}", "public LongBuffer put(long c) {\r\n    throw new ReadOnlyBufferException();\r\n}", "public int serialize(int offset, byte[] data) {\r\n    LOG.log(DEBUG, \"Serializing Workbook with offsets\");\r\n    int pos = 0;\r\n    SSTRecord lSST = null;\r\n    int sstPos = 0;\r\n    boolean wroteBoundSheets = false;\r\n    for(org.apache.poi.hssf.record.Record record : records.getRecords()) {\r\n        int len = 0;\r\n        if(record instanceof SSTRecord) {\r\n            lSST = (SSTRecord)record;\r\n            sstPos = pos;\r\n        }\r\n        if(record.getSid() == ExtSSTRecord.sid && lSST != null) {\r\n            record = lSST.createExtSSTRecord(sstPos + offset);\r\n        }\r\n        if(record instanceof BoundSheetRecord) {\r\n            if(!wroteBoundSheets) {\r\n                for(BoundSheetRecord bsr : boundsheets) {\r\n                    len += bsr.serialize(pos+offset+len, data);\r\n                }\r\n                wroteBoundSheets = true;\r\n            }\r\n        } else {\r\n            len = record.serialize(pos + offset, data);\r\n        }\r\n        pos += len;\r\n    }\r\n    LOG.log(DEBUG, \"Exiting serialize workbook\");\r\n    return pos;\r\n}", "public DescribeClusterSecurityGroupsResult describeClusterSecurityGroups() {\r\n    return describeClusterSecurityGroups(new DescribeClusterSecurityGroupsRequest());\r\n}", "public Explanation explain(Explanation freq, long norm) {\r\n    return Explanation.match(score(freq.getValue().floatValue(), norm),\"score(freq=\" + freq.getValue() +\"), with freq of:\",Collections.singleton(freq));\r\n}", "public DisassociatePhoneNumberFromUserResult disassociatePhoneNumberFromUser(DisassociatePhoneNumberFromUserRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisassociatePhoneNumberFromUser(request);\r\n}", "public boolean has(AnyObjectId objectId, int typeHint) throws IOException {try {\r\n        open(objectId, typeHint);\r\n        return true;\r\n    } catch(MissingObjectException notFound) {\r\n        return false;\r\n    }}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[ATTACHEDLABEL]\\n\");\r\n    buffer.append(\"    .formatFlags          = \").append(\"0x\").append(HexDump.toHex(getFormatFlags())).append(\" (\").append(getFormatFlags()).append(\" )\");\r\n    buffer.append(System.getProperty(\"line.separator\"));\r\n    buffer.append(\"         .showActual               = \").append(isShowActual()).append('\\n');\r\n    buffer.append(\"         .showPercent              = \").append(isShowPercent()).append('\\n');\r\n    buffer.append(\"         .labelAsPercentage        = \").append(isLabelAsPercentage()).append('\\n');\r\n    buffer.append(\"         .smoothedLine             = \").append(isSmoothedLine()).append('\\n');\r\n    buffer.append(\"         .showLabel                = \").append(isShowLabel()).append('\\n');\r\n    buffer.append(\"         .showBubbleSizes          = \").append(isShowBubbleSizes()).append('\\n');\r\n    buffer.append(\"[/ATTACHEDLABEL]\\n\");\r\n    return buffer.toString();\r\n}", "public String toString(String field) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"spanOr([\");\r\n    Iterator<SpanQuery> i = clauses.iterator();\r\n    while(i.hasNext()) {\r\n        SpanQuery clause = i.next();\r\n        buffer.append(clause.toString(field));\r\n        if(i.hasNext()) {\r\n            buffer.append(\", \");\r\n        }\r\n    }\r\n    buffer.append(\"])\");\r\n    return buffer.toString();\r\n}", "public DisableInsightRulesResult disableInsightRules(DisableInsightRulesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisableInsightRules(request);\r\n}", "public BootstrapActionConfig newRunIf(String condition, BootstrapActionConfig config) {\r\n    List<String> args = config.getScriptBootstrapAction().getArgs();\r\n    args.add(0, condition);\r\n    args.add(1, config.getScriptBootstrapAction().getPath());\r\n    return new BootstrapActionConfig().withName(\"Run If, \" + config.getName()).withScriptBootstrapAction(new ScriptBootstrapActionConfig().withPath(\"s3:.withArgs(args));}", "public final CharBuffer get(char[] dst, int dstOffset, int charCount) {\r\n    Arrays.checkOffsetAndCount(dst.length, dstOffset, charCount);\r\n    if(charCount > remaining()) {\r\n        throw new BufferUnderflowException();\r\n    }\r\n    int newPosition = position + charCount;\r\n    sequence.toString().getChars(position, newPosition, dst, dstOffset);\r\n    position = newPosition;\r\n    return this;\r\n}", "public Set<String> getNames(String section, String subsection) {\r\n    return getState().getNames(section, subsection);\r\n}", "public CreateBrokerResult createBroker(CreateBrokerRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateBroker(request);\r\n}", "public void onAbsorb(int velocity) {\r\n    mState = STATE_ABSORB;\r\n    velocity = Math.max(MIN_VELOCITY, Math.abs(velocity));\r\n    mStartTime = AnimationUtils.currentAnimationTimeMillis();\r\n    mDuration = 0.1f + (velocity * 0.03f);\r\n    mEdgeAlphaStart = 0.f;\r\n    mEdgeScaleY = mEdgeScaleYStart = 0.f;\r\n    mGlowAlphaStart = 0.5f;\r\n    mGlowScaleYStart = 0.f;\r\n    mEdgeAlphaFinish = Math.max(0, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1));\r\n    mEdgeScaleYFinish = Math.max(HELD_EDGE_SCALE_Y, Math.min(velocity * VELOCITY_EDGE_FACTOR, 1.f));\r\n    mGlowScaleYFinish = Math.min(0.025f + (velocity * (velocity / 100) * 0.00015f), 1.75f);\r\n    mGlowAlphaFinish = Math.max(mGlowAlphaStart, Math.min(velocity * VELOCITY_GLOW_FACTOR * .00001f, MAX_ALPHA));\r\n}", "public ListSuppressedDestinationsResult listSuppressedDestinations(ListSuppressedDestinationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListSuppressedDestinations(request);\r\n}", "public List<Pair<K,V>> getPairs() {\r\n    List<Pair<K,V>> pairs = new ArrayList<Pair<K,V>>();\r\n    for(K key : keySet()) {\r\n        for(V value : get(key)) {\r\n            pairs.add(new Pair<K,V>(key, value));\r\n        }\r\n    }\r\n    return pairs;\r\n}", "public void setParams(String params) {\r\n    super.setParams(params);\r\n    int k = params.indexOf(\",\");\r\n    name = params.substring(0,k).trim();\r\n    value = params.substring(k+1).trim();\r\n}", "@Override public V put(K key, V value) {\r\n    if(!isInBounds(key)) {\r\n        throw outOfBounds(key, fromBound, toBound);\r\n    }\r\n    return putInternal(key, value);\r\n}", "public DeregisterImageRequest(String imageId) {\r\n    setImageId(imageId);\r\n}", "public GetApplicationResult getApplication(GetApplicationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetApplication(request);\r\n}", "public DescribeProblemObservationsResult describeProblemObservations(DescribeProblemObservationsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeProblemObservations(request);\r\n}", "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {\r\n    int bytesAfterHeader = readHeader(data, offset);\r\n    int pos = offset + HEADER_SIZE;\r\n    System.arraycopy(data, pos, field_1_UID, 0, 16);\r\n    pos += 16;\r\n    field_2_marker = data[pos];\r\n    pos++;\r\n    setPictureData(data, pos, bytesAfterHeader - 17);\r\n    return bytesAfterHeader + HEADER_SIZE;\r\n}", "public static boolean endsWith(BytesRef ref, BytesRef suffix) {\r\n    int startAt = ref.length - suffix.length;\r\n    if(startAt < 0) {\r\n        return false;\r\n    }\r\n    return Arrays.equals(ref.bytes, ref.offset + startAt, ref.offset + startAt + suffix.length,suffix.bytes, suffix.offset, suffix.offset + suffix.length);\r\n}", "public DeleteOptionGroupResult deleteOptionGroup(DeleteOptionGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteOptionGroup(request);\r\n}", "public static String getFromUnicodeLE(byte[] string) {\r\n    if(string.length == 0) {\r\n        return \"\";\r\n    }\r\n    return getFromUnicodeLE(string, 0, string.length / 2);\r\n}", "public CellRangeAddressList() {\r\n    _list = new ArrayList<>();\r\n}", "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    throw new NotImplementedFunctionException(_functionName);\r\n}", "public DescribeOptionGroupsResult describeOptionGroups() {\r\n    return describeOptionGroups(new DescribeOptionGroupsRequest());\r\n}", "public DisableVpcClassicLinkResult disableVpcClassicLink(DisableVpcClassicLinkRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDisableVpcClassicLink(request);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[SXIDSTM]\\n\");\r\n    buffer.append(\"    .idstm      =\").append(HexDump.shortToHex(idstm)).append('\\n');\r\n    buffer.append(\"[/SXIDSTM]\\n\");\r\n    return buffer.toString();\r\n}", "public ListStackInstancesResult listStackInstances(ListStackInstancesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListStackInstances(request);\r\n}", "public DescribeCompanyNetworkConfigurationResult describeCompanyNetworkConfiguration(DescribeCompanyNetworkConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCompanyNetworkConfiguration(request);\r\n}", "public final CoderResult flush(CharBuffer out) {\r\n    if(status != END && status != INIT) {\r\n        throw new IllegalStateException();\r\n    }\r\n    CoderResult result = implFlush(out);\r\n    if(result == CoderResult.UNDERFLOW) {\r\n        status = FLUSH;\r\n    }\r\n    return result;\r\n}", "public DescribeDBClustersResult describeDBClusters(DescribeDBClustersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDBClusters(request);\r\n}", "public GetDocumentVersionResult getDocumentVersion(GetDocumentVersionRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetDocumentVersion(request);\r\n}", "public TermData subtract(TermData t1, TermData t2) {\r\n    if(t2 == NO_OUTPUT) {\r\n        return t1;\r\n    }\r\n    TermData ret;\r\n    if(statsEqual(t1, t2) && bytesEqual(t1, t2)) {\r\n        ret = NO_OUTPUT;\r\n    } else {\r\n        ret = new TermData(t1.bytes, t1.docFreq, t1.totalTermFreq);\r\n    }\r\n    return ret;\r\n}", "public ModifyCapacityReservationResult modifyCapacityReservation(ModifyCapacityReservationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeModifyCapacityReservation(request);\r\n}", "@Override public int size() {\r\n    synchronized(mutex) {\r\n        return c.size();\r\n    }\r\n}", "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;\r\n    }\r\n}", "public int length() throws UnsupportedOperationException {if(this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {\r\n        return this.length;\r\n    } throw new UnsupportedOperationException(\"length meaningless for \" + toString());}", "public String toFormulaString() {\r\n    throw invalid();\r\n}", "public E next() {\r\n    if(iterator.nextIndex() < end) {\r\n        return iterator.next();\r\n    }\r\n    throw new NoSuchElementException();\r\n}", "public static String toHex(long value) {\r\n    StringBuilder sb = new StringBuilder(16);\r\n    writeHex(sb, value, 16, \"\");\r\n    return sb.toString();\r\n}", "public long get(int index) {\r\n    final int o = index >>> 6;\r\n    final int b = index & 63;\r\n    final int shift = b << 0;\r\n    return (blocks[o] >>> shift) & 1L;\r\n}", "public int[] clear() {\r\n    start = end = null;\r\n    return super.clear();\r\n}", "public TokenStream init(TokenStream tokenStream) {\r\n    termAtt = tokenStream.addAttribute(CharTermAttribute.class);\r\n    return null;\r\n}", "public UpdateGameServerGroupResult updateGameServerGroup(UpdateGameServerGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateGameServerGroup(request);\r\n}", "public UnmappableCharacterException(int length) {\r\n    this.inputLength = length;\r\n}", "public UpdateIdentityProviderConfigurationResult updateIdentityProviderConfiguration(UpdateIdentityProviderConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateIdentityProviderConfiguration(request);\r\n}", "@Override public int lastIndexOf(Object object) {\r\n    Object[] a = array;\r\n    if(object != null) {\r\n        for(int i = size - 1; i >= 0; i--) {\r\n            if(object.equals(a[i])) {\r\n                return i;\r\n            }\r\n        }\r\n    } else {\r\n        for(int i = size - 1; i >= 0; i--) {\r\n            if(a[i] == null) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}", "public ConstantScoreQueryBuilder(QueryBuilderFactory queryFactory) {\r\n    this.queryFactory = queryFactory;\r\n}", "public int getNumberOfOnChannelTokens() {\r\n    int n = 0;\r\n    fill();\r\n    for(int i = 0; i < tokens.size(); i++) {\r\n        Token t = tokens.get(i);\r\n        if(t.getChannel()==channel) n++;\r\n        if(t.getType()==Token.EOF) break;\r\n    }\r\n    return n;\r\n}", "public POIFSDocumentPath(final String [] components)throws IllegalArgumentException{if(components == null) {\r\n        this.components = new String[ 0 ];\r\n    } else {\r\n        this.components = new String[ components.length ];\r\n        for(int j = 0; j < components.length; j++) {\r\n            if((components[ j ] == null)|| (components[ j ].length() == 0)) {\r\n                throw new IllegalArgumentException(\"components cannot contain null or empty strings\");\r\n            }\r\n            this.components[ j ] = components[ j ];\r\n        }\r\n    }}", "public SQLException(String theReason) {\r\n    this(theReason, null, 0);\r\n}", "public ListFragmentsResult listFragments(ListFragmentsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeListFragments(request);\r\n}", "public QueryBuilder getQueryBuilder(String nodeName) {\r\n    return builders.get(nodeName);\r\n}", "public CreateDirectoryResult createDirectory(CreateDirectoryRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDirectory(request);\r\n}", "public int getExternalSheetIndex(String workbookName, String sheetName) {\r\n    return getOrCreateLinkTable().getExternalSheetIndex(workbookName, sheetName, sheetName);\r\n}", "public V getValue() {\r\n    return value;\r\n}", "public K getKey() {\r\n    return key;\r\n}", "public boolean hasTransparentBounds() {\r\n    return transparentBounds;\r\n}", "public void setKeepEmpty(boolean empty) {\r\n    keepEmpty = empty;\r\n}", "public XPathRuleAnywhereElement(String ruleName, int ruleIndex) {\r\n    super(ruleName);\r\n    this.ruleIndex = ruleIndex;\r\n}", "public int getHeight() {\r\n    return _height;\r\n}", "public final void write(OpenStringBuilder arr) {\r\n    write(arr.buf, 0, len);\r\n}", "public void jumpDrawablesToCurrentState() {\r\n    super.jumpDrawablesToCurrentState();\r\n    if(mThumb != null) mThumb.jumpToCurrentState();\r\n}", "public void setParams(String params) {\r\n    super.setParams(params);\r\n    final StreamTokenizer stok = new StreamTokenizer(new StringReader(params));\r\n    stok.quoteChar('\"');\r\n    stok.quoteChar('\\'');\r\n    stok.eolIsSignificant(false);\r\n    stok.ordinaryChar(',');\r\n    try {\r\n        while(stok.nextToken() != StreamTokenizer.TT_EOF) {\r\n            switch(stok.ttype) {\r\n            case ',': {\r\n                break;\r\n            }\r\n            case '\\'':\r\n            case '\\\"':\r\n            case StreamTokenizer.TT_WORD: {\r\n                analyzerNames.add(stok.sval);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new RuntimeException(\"Unexpected token: \" + stok.toString());\r\n            }\r\n            }\r\n        }\r\n    } catch(RuntimeException e) {\r\n        if(e.getMessage().startsWith(\"Line #\")) {\r\n            throw e;\r\n        } else {\r\n            throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", e);\r\n        }\r\n    } catch(Throwable t) {\r\n        throw new RuntimeException(\"Line #\" + (stok.lineno() + getAlgLineNum()) + \": \", t);\r\n    }\r\n}", "public DescribeVolumesResult describeVolumes(DescribeVolumesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeVolumes(request);\r\n}", "public DescribeFlowLogsResult describeFlowLogs(DescribeFlowLogsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeFlowLogs(request);\r\n}", "public UpdateMethodResult updateMethod(UpdateMethodRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateMethod(request);\r\n}", "public GetAuthorizationTokenRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"GetAuthorizationToken\", \"cr\");\r\n    setUriPattern(\"/tokens\");\r\n    setMethod(MethodType.GET);\r\n}", "public StopContactResult stopContact(StopContactRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeStopContact(request);\r\n}", "public CreateDataSetResult createDataSet(CreateDataSetRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDataSet(request);\r\n}", "public ObjectDatabase newCachedDatabase() {\r\n    return this;\r\n}", "public CreateJourneyResult createJourney(CreateJourneyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateJourney(request);\r\n}", "public DeleteDashboardsResult deleteDashboards(DeleteDashboardsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteDashboards(request);\r\n}", "public UpgradeIndexMergePolicy(MergePolicy in) {\r\n    super(in);\r\n}", "public GetHealthCheckCountResult getHealthCheckCount(GetHealthCheckCountRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetHealthCheckCount(request);\r\n}", "public ChartStartBlockRecord(RecordInputStream in) {\r\n    rt = in.readShort();\r\n    grbitFrt = in.readShort();\r\n    iObjectKind = in.readShort();\r\n    iObjectContext = in.readShort();\r\n    iObjectInstance1 = in.readShort();\r\n    iObjectInstance2 = in.readShort();\r\n}", "public SeriesRecord(RecordInputStream in) {\r\n    field_1_categoryDataType = in.readShort();\r\n    field_2_valuesDataType   = in.readShort();\r\n    field_3_numCategories    = in.readShort();\r\n    field_4_numValues        = in.readShort();\r\n    field_5_bubbleSeriesType = in.readShort();\r\n    field_6_numBubbleValues  = in.readShort();\r\n}", "public static Class<? extends CharFilterFactory> lookupClass(String name) {\r\n    return loader.lookupClass(name);\r\n}", "public GetPublicKeyResult getPublicKey(GetPublicKeyRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetPublicKey(request);\r\n}", "public CreateLocalGatewayRouteTableVpcAssociationResult createLocalGatewayRouteTableVpcAssociation(CreateLocalGatewayRouteTableVpcAssociationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateLocalGatewayRouteTableVpcAssociation(request);\r\n}", "public static boolean toBoolean(String stringValue) {\r\n    if(stringValue == null)throw new NullPointerException(JGitText.get().expectedBooleanStringValue);\r\n    final Boolean bool = toBooleanOrNull(stringValue);\r\n    if(bool == null)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().notABoolean, stringValue));\r\n    return bool.booleanValue();\r\n}", "public Set<String> getAdded() {\r\n    return Collections.unmodifiableSet(diff.getAdded());\r\n}", "public Set<String> getNames(String section) {\r\n    return getNames(section, null);\r\n}", "public DescribeCacheClustersResult describeCacheClusters(DescribeCacheClustersRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeCacheClusters(request);\r\n}", "public List<String> getUnmergedPaths() {\r\n    return unmergedPaths;\r\n}", "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    if(args.length != 2) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return evaluate(ec.getRowIndex(), ec.getColumnIndex(), args[0], args[1]);\r\n}", "public int addString(UnicodeString string) {\r\n    field_1_num_strings++;\r\n    UnicodeString ucs = (string == null) ? EMPTY_STRING: string;\r\n    int rval;\r\n    int index = field_3_strings.getIndex(ucs);\r\n    if(index != -1) {\r\n        rval = index;\r\n    } else {\r\n        rval = field_3_strings.size();\r\n        field_2_num_unique_strings++;\r\n        SSTDeserializer.addToStringTable(field_3_strings, ucs);\r\n    }\r\n    return rval;\r\n}", "public long getDeltaSearchMemoryLimit() {\r\n    return deltaSearchMemoryLimit;\r\n}", "public String toString() {\r\n    return \"Token(\\\"\" + new String(surfaceForm, offset, length) + \"\\\" pos=\" + position + \" length=\" + length +\" posLen=\" + positionLength + \" type=\" + type + \" wordId=\" + wordId +\" leftID=\" + dictionary.getLeftId(wordId) + \")\";\r\n}", "public String toFormulaString(FormulaRenderingWorkbook book) {\r\n    return ExternSheetNameResolver.prependSheetName(book, field_1_index_extern_sheet, formatReferenceAsString());\r\n}", "public E get(int index) {\r\n    return (E) elements[index];\r\n}", "public byte[] getCachedBytes() {\r\n    return data;\r\n}", "public DescribeConnectionsResult describeConnections() {\r\n    return describeConnections(new DescribeConnectionsRequest());\r\n}", "public void ensureCapacity(int minimumCapacity) {\r\n    Object[] a = array;\r\n    if(a.length < minimumCapacity) {\r\n        Object[] newArray = new Object[minimumCapacity];\r\n        System.arraycopy(a, 0, newArray, 0, size);\r\n        array = newArray;\r\n        modCount++;\r\n    }\r\n}", "public DeleteLifecycleHookResult deleteLifecycleHook(DeleteLifecycleHookRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteLifecycleHook(request);\r\n}", "public final float maxBytesPerChar() {\r\n    return maxBytesPerChar;\r\n}", "public BlankCellRectangleGroup(int firstRowIndex, int firstColumnIndex, int lastColumnIndex) {\r\n    _firstRowIndex = firstRowIndex;\r\n    _firstColumnIndex = firstColumnIndex;\r\n    _lastColumnIndex = lastColumnIndex;\r\n    _lastRowIndex = firstRowIndex;\r\n}", "public int findEndOfRowOutlineGroup(int row) {\r\n    int level = getRow(row).getOutlineLevel();\r\n    int currentRow;\r\n    for(currentRow = row; currentRow < getLastRowNum(); currentRow++) {\r\n        if(getRow(currentRow) == null || getRow(currentRow).getOutlineLevel() < level) {\r\n            break;\r\n        }\r\n    }\r\n    return currentRow-1;\r\n}", "public String getEncoding() {\r\n    if(encoder == null) {\r\n        return null;\r\n    }\r\n    return HistoricalCharsetNames.get(encoder.charset());\r\n}", "public void clearAllCachedResultValues() {\r\n    _cache.clear();\r\n    _sheetIndexesBySheet.clear();\r\n    _workbook.clearAllCachedResultValues();\r\n}", "public final String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    String recordName = getRecordName();\r\n    sb.append(\"[\").append(recordName).append(\"]\\n\");\r\n    sb.append(\"    .row    = \").append(HexDump.shortToHex(getRow())).append(\"\\n\");\r\n    sb.append(\"    .col    = \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");\r\n    if(isBiff2()) {\r\n        sb.append(\"    .cellattrs = \").append(HexDump.shortToHex(getCellAttrs())).append(\"\\n\");\r\n    } else {\r\n        sb.append(\"    .xfindex   = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");\r\n    }\r\n    appendValueText(sb);\r\n    sb.append(\"\\n\");\r\n    sb.append(\"[/\").append(recordName).append(\"]\\n\");\r\n    return sb.toString();\r\n}", "public DescribeDBClusterEndpointsResult describeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeDBClusterEndpoints(request);\r\n}", "public boolean renameTo(final String newName) {\r\n    boolean rval = false;\r\n    if(!isRoot()) {\r\n        rval = _parent.changeName(getName(), newName);\r\n    }\r\n    return rval;\r\n}", "public Explanation explain(Explanation freq, long norm) {\r\n    List<Explanation> subs = new ArrayList<>();\r\n    for(SimScorer subScorer : subScorers) {\r\n        subs.add(subScorer.explain(freq, norm));\r\n    }\r\n    return Explanation.match(score(freq.getValue().floatValue(), norm), \"sum of:\", subs);\r\n}", "public DocTermsIndexDocValues(ValueSource vs, LeafReaderContext context, String field) throws IOException {this(vs, open(context, field));}", "public static int compareTo(Ref o1, Ref o2) {\r\n    return o1.getName().compareTo(o2.getName());\r\n}", "public Dimension getImageDimension() {\r\n    InternalWorkbook iwb = getPatriarch().getSheet().getWorkbook().getWorkbook();\r\n    EscherBSERecord bse = iwb.getBSERecord(getPictureIndex());\r\n    byte[] data = bse.getBlipRecord().getPicturedata();\r\n    int type = bse.getBlipTypeWin32();\r\n    return ImageUtils.getImageDimension(new ByteArrayInputStream(data), type);\r\n}", "public static double var(double[] v) {\r\n    double r = Double.NaN;\r\n    if(v!=null && v.length > 1) {\r\n        r = devsq(v) / (v.length - 1);\r\n    }\r\n    return r;\r\n}", "public UpdateCloudFrontOriginAccessIdentityRequest(CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig, String id, String ifMatch) {\r\n    setCloudFrontOriginAccessIdentityConfig(cloudFrontOriginAccessIdentityConfig);\r\n    setId(id);\r\n    setIfMatch(ifMatch);\r\n}", "public DiffCommand setDestinationPrefix(String destinationPrefix) {\r\n    this.destinationPrefix = destinationPrefix;\r\n    return this;\r\n}", "public int available() throws IOException {return IoBridge.available(fd);}", "final public SrndQuery NotQuery() throws ParseException {SrndQuery q; ArrayList<SrndQuery> queries = null; Token oprt = null; q = NQuery(); label_4:while(true) {\r\n        switch((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n        case NOT:\r\n            ;\r\n            break;\r\n        default:\r\n            jj_la1[2] = jj_gen;\r\n            break label_4;\r\n        }\r\n        oprt = jj_consume_token(NOT);\r\n        if(queries == null) {\r\n            queries = new ArrayList<SrndQuery>();\r\n            queries.add(q);\r\n        }\r\n        q = NQuery();\r\n        queries.add(q);\r\n    }{if(true) return (queries == null) ? q : getNotQuery(queries, oprt);} throw new Error(\"Missing return statement in function\");}", "public String toString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append('[').append(\"USERSVIEWEND\").append(\"] (0x\");\r\n    sb.append(Integer.toHexString(sid).toUpperCase(Locale.ROOT)).append(\")\\n\");\r\n    sb.append(\"  rawData=\").append(HexDump.toHex(_rawData)).append(\"\\n\");\r\n    sb.append(\"[/\").append(\"USERSVIEWEND\").append(\"]\\n\");\r\n    return sb.toString();\r\n}", "public FloatBuffer asReadOnlyBuffer() {\r\n    FloatToByteBufferAdapter buf = new FloatToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\r\n    buf.limit = limit;\r\n    buf.position = position;\r\n    buf.mark = mark;\r\n    buf.byteBuffer.order = byteBuffer.order;\r\n    return buf;\r\n}", "public LogCommand log() {\r\n    return new LogCommand(repo);\r\n}", "public CreateDomainResult createDomain(CreateDomainRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeCreateDomain(request);\r\n}", "public int getWeight() {\r\n    return WEIGHT_UNKNOWN;\r\n}", "public ChartStartObjectRecord(RecordInputStream in) {\r\n    rt = in.readShort();\r\n    grbitFrt = in.readShort();\r\n    iObjectKind = in.readShort();\r\n    iObjectContext = in.readShort();\r\n    iObjectInstance1 = in.readShort();\r\n    iObjectInstance2 = in.readShort();\r\n}", "public void remove() {\r\n    if(lastReturned == null)throw new IllegalStateException();\r\n    ConcurrentHashMap.this.remove(lastReturned.key);\r\n    lastReturned = null;\r\n}", "public DescribeMetricCollectionTypesResult describeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeMetricCollectionTypes(request);\r\n}", "public UpdateFieldLevelEncryptionProfileResult updateFieldLevelEncryptionProfile(UpdateFieldLevelEncryptionProfileRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateFieldLevelEncryptionProfile(request);\r\n}", "public Ref getLeaf() {\r\n    return this;\r\n}", "public int lastIndexOf(Object object) {\r\n    if(object != null) {\r\n        for(int i = a.length - 1; i >= 0; i--) {\r\n            if(object.equals(a[i])) {\r\n                return i;\r\n            }\r\n        }\r\n    } else {\r\n        for(int i = a.length - 1; i >= 0; i--) {\r\n            if(a[i] == null) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}", "public DefaultBulkScorer(Scorer scorer) {\r\n    if(scorer == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    this.scorer = scorer;\r\n    this.iterator = scorer.iterator();\r\n    this.twoPhase = scorer.twoPhaseIterator();\r\n}", "public CreateRepoAuthorizationRequest() {\r\n    super(\"cr\", \"2016-06-07\", \"CreateRepoAuthorization\", \"cr\");\r\n    setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/authorizations\");\r\n    setMethod(MethodType.PUT);\r\n}", "public TokenStream create(TokenStream input) {\r\n    return new PortugueseLightStemFilter(input);\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[TABLESTYLES]\\n\");\r\n    buffer.append(\"    .rt      =\").append(HexDump.shortToHex(rt)).append('\\n');\r\n    buffer.append(\"    .grbitFrt=\").append(HexDump.shortToHex(grbitFrt)).append('\\n');\r\n    buffer.append(\"    .unused  =\").append(HexDump.toHex(unused)).append('\\n');\r\n    buffer.append(\"    .cts=\").append(HexDump.intToHex(cts)).append('\\n');\r\n    buffer.append(\"    .rgchDefListStyle=\").append(rgchDefListStyle).append('\\n');\r\n    buffer.append(\"    .rgchDefPivotStyle=\").append(rgchDefPivotStyle).append('\\n');\r\n    buffer.append(\"[/TABLESTYLES]\\n\");\r\n    return buffer.toString();\r\n}", "public synchronized Enumeration<K> keys() {\r\n    return new KeyEnumeration();\r\n}", "public DescribeInstanceTypesResult describeInstanceTypes(DescribeInstanceTypesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeInstanceTypes(request);\r\n}", "public RefUpdate.Result getResult() {\r\n    return rc;\r\n}", "public UpdateBasePathMappingResult updateBasePathMapping(UpdateBasePathMappingRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateBasePathMapping(request);\r\n}", "public UpdateDocumentResult updateDocument(UpdateDocumentRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeUpdateDocument(request);\r\n}", "public void setStreamFileThreshold(int newLimit) {\r\n    streamFileThreshold = newLimit;\r\n}", "public String toString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(\"[EXTSST]\\n\");\r\n    buffer.append(\"    .dsst           = \").append(Integer.toHexString(_stringsPerBucket)).append(\"\\n\");\r\n    buffer.append(\"    .numInfoRecords = \").append(_sstInfos.length).append(\"\\n\");\r\n    for(int k = 0; k < _sstInfos.length; k++) {\r\n        buffer.append(\"    .inforecord     = \").append(k).append(\"\\n\");\r\n        buffer.append(\"    .streampos      = \").append(Integer.toHexString(_sstInfos[k].getStreamPos())).append(\"\\n\");\r\n        buffer.append(\"    .sstoffset      = \").append(Integer.toHexString(_sstInfos[k].getBucketSSTOffset())).append(\"\\n\");\r\n    }\r\n    buffer.append(\"[/EXTSST]\\n\");\r\n    return buffer.toString();\r\n}", "public void setCRC(int crc) {\r\n    this.crc = crc;\r\n}", "public RevFilter getRevFilter() {\r\n    return filter;\r\n}", "public SrndPrefixQuery(String prefix, boolean quoted, char truncator) {\r\n    super(quoted);\r\n    this.prefix = prefix;\r\n    prefixRef = new BytesRef(prefix);\r\n    this.truncator = truncator;\r\n}", "public byte readByte() throws IOException {int v = is.read(); if(v == -1) throw new EOFException(); return (byte) v;}", "public GetWorkGroupResult getWorkGroup(GetWorkGroupRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeGetWorkGroup(request);\r\n}", "public PutBlockPublicAccessConfigurationResult putBlockPublicAccessConfiguration(PutBlockPublicAccessConfigurationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executePutBlockPublicAccessConfiguration(request);\r\n}", "public String toString() {\r\n    final StringBuilder r = new StringBuilder();\r\n    r.append('[');\r\n    for(int i = 0; i < count; i++) {\r\n        if(i > 0)r.append(\", \");\r\n        r.append(entries[i]);\r\n    }\r\n    r.append(']');\r\n    return r.toString();\r\n}", "public int get(int index) {\r\n    checkIndex(index);\r\n    return byteBuffer.getInt(index * SizeOf.INT);\r\n}", "public CreateAlbumRequest() {\r\n    super(\"CloudPhoto\", \"2017-07-11\", \"CreateAlbum\", \"cloudphoto\");\r\n    setProtocol(ProtocolType.HTTPS);\r\n}", "public FileTreeIterator(File root, FS fs, WorkingTreeOptions options) {\r\n    this(root, fs, options, DefaultFileModeStrategy.INSTANCE);\r\n}", "public int byteAt(int idx) {\r\n    return bytes[idx].value;\r\n}", "public DescribeTypeRegistrationResult describeTypeRegistration(DescribeTypeRegistrationRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeTypeRegistration(request);\r\n}", "public TerminateInstancesResult terminateInstances(TerminateInstancesRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeTerminateInstances(request);\r\n}", "public DoubleBuffer duplicate() {\r\n    ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());\r\n    DoubleToByteBufferAdapter buf = new DoubleToByteBufferAdapter(bb);\r\n    buf.limit = limit;\r\n    buf.position = position;\r\n    buf.mark = mark;\r\n    return buf;\r\n}", "public OR(SemanticContext a, SemanticContext b) {\r\n    Set<SemanticContext> operands = new HashSet<SemanticContext>();\r\n    if(a instanceof OR) operands.addAll(Arrays.asList(((OR)a).opnds));\r\n    else operands.add(a);\r\n    if(b instanceof OR) operands.addAll(Arrays.asList(((OR)b).opnds));\r\n    else operands.add(b);\r\n    List<PrecedencePredicate> precedencePredicates = filterPrecedencePredicates(operands);\r\n    if(!precedencePredicates.isEmpty()) {\r\n        PrecedencePredicate reduced = Collections.max(precedencePredicates);\r\n        operands.add(reduced);\r\n    }\r\n    this.opnds = operands.toArray(new SemanticContext[operands.size()]);\r\n}", "public void serialize(LittleEndianOutput out) {\r\n    out.writeShort(_formats.length);\r\n    for(int i=0; i<_formats.length; i++) {\r\n        _formats[i].serialize(out);\r\n    }\r\n}", "public DescribeAvailabilityOptionsResult describeAvailabilityOptions(DescribeAvailabilityOptionsRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDescribeAvailabilityOptions(request);\r\n}", "public int getOffset() {\r\n    return offset;\r\n}", "public static float[] grow(float[] array) {\r\n    return grow(array, 1 + array.length);\r\n}", "public ListMetricsResult listMetrics() {\r\n    return listMetrics(new ListMetricsRequest());\r\n}", "public int findFirstRecordLocBySid(short sid) {\r\n    int index = 0;\r\n    for(org.apache.poi.hssf.record.Record record : records.getRecords()) {\r\n        if(record.getSid() == sid) {\r\n            return index;\r\n        }\r\n        index ++;\r\n    }\r\n    return -1;\r\n}", "public DeleteVpnConnectionRouteResult deleteVpnConnectionRoute(DeleteVpnConnectionRouteRequest request) {\r\n    request = beforeClientExecution(request);\r\n    return executeDeleteVpnConnectionRoute(request);\r\n}"], "cs": ["public DVRecord(RecordInputStream in1) {\r\n    _option_flags = in1.ReadInt();\r\n    _promptTitle = ReadUnicodeString(in1);\r\n    _errorTitle = ReadUnicodeString(in1);\r\n    _promptText = ReadUnicodeString(in1);\r\n    _errorText = ReadUnicodeString(in1);\r\n    int field_size_first_formula = in1.ReadUShort();\r\n    _not_used_1 = in1.ReadShort();\r\n    _formula1 = NPOI.SS.Formula.Formula.Read(field_size_first_formula, in1);\r\n    int field_size_sec_formula = in1.ReadUShort();\r\n    _not_used_2 = in1.ReadShort();\r\n    _formula2 = NPOI.SS.Formula.Formula.Read(field_size_sec_formula, in1);\r\n    _regions = new CellRangeAddressList(in1);\r\n}", "public override string ToString() {\r\n    return Pattern();\r\n}", "public InsertInstanceRequest(): base(\"Ots\", \"2016-06-20\", \"InsertInstance\", \"ots\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public virtual bool contains(object o) {\r\n    return indexOf(o) != -1;\r\n}", "public java.nio.ByteBuffer encode(string s) {\r\n    return encode(java.nio.CharBuffer.wrap(java.lang.CharSequenceProxy.Wrap(s)));\r\n}", "public override bool RequiresCommitBody() {\r\n    return false;\r\n}", "public string GetKey() {\r\n    return RawParseUtils.Decode(enc, buffer, keyStart, keyEnd);\r\n}", "public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1,ValueEval arg2, ValueEval arg3, ValueEval arg4) {\r\n    double result;\r\n    try {\r\n        double d0 = NumericFunction.SingleOperandEvaluate(arg0, srcRowIndex, srcColumnIndex);\r\n        double d1 = NumericFunction.SingleOperandEvaluate(arg1, srcRowIndex, srcColumnIndex);\r\n        double d2 = NumericFunction.SingleOperandEvaluate(arg2, srcRowIndex, srcColumnIndex);\r\n        double d3 = NumericFunction.SingleOperandEvaluate(arg3, srcRowIndex, srcColumnIndex);\r\n        double d4 = NumericFunction.SingleOperandEvaluate(arg4, srcRowIndex, srcColumnIndex);\r\n        result = Evaluate(d0, d1, d2, d3, d4 != 0.0);\r\n        NumericFunction.CheckValue(result);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    return new NumberEval(result);\r\n}", "public virtual DeleteClientVpnEndpointResponse DeleteClientVpnEndpoint(DeleteClientVpnEndpointRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteClientVpnEndpointRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteClientVpnEndpointResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteClientVpnEndpointResponse>(request, options);\r\n}", "public virtual object Get(string key) {\r\n    IList<TernaryTreeNode> list = autocomplete.PrefixCompletion(root, key, 0);\r\n    if(list == null || list.Count == 0) {\r\n        return null;\r\n    }\r\n    foreach(TernaryTreeNode n in list) {\r\n        if(CharSeqEquals(n.token, key)) {\r\n            return n.val;\r\n        }\r\n    }\r\n    return null;\r\n}", "public virtual StartFleetActionsResponse StartFleetActions(StartFleetActionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartFleetActionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartFleetActionsResponseUnmarshaller.Instance;\r\n    return Invoke<StartFleetActionsResponse>(request, options);\r\n}", "public CellRangeAddress GetCellRangeAddress(int index) {\r\n    return (CellRangeAddress)_list[index];\r\n}", "public static XmlDocument LoadXML(TextReader input) {\r\n    XmlDocument result = new XmlDocument();\r\n    try {\r\n        result.Load(input);\r\n    } catch(Exception se) {\r\n        throw new Exception(\"Error parsing file:\" + se, se);\r\n    }\r\n    return result;\r\n}", "public virtual int Get(string name, int dflt) {\r\n    int[] vals;\r\n    object temp;\r\n    if(valByRound.TryGetValue(name, out temp) && temp != null) {\r\n        vals = (int[])temp;\r\n        return vals[roundNumber % vals.Length];\r\n    }\r\n    string sval;\r\n    if(!props.TryGetValue(name, out sval)) {\r\n        sval = dflt.ToString(CultureInfo.InvariantCulture);\r\n    }\r\n    if(sval.IndexOf(':') < 0) {\r\n        return int.Parse(sval, CultureInfo.InvariantCulture);\r\n    }\r\n    int k = sval.IndexOf(':');\r\n    string colName = sval.Substring(0, k - 0);\r\n    sval = sval.Substring(k + 1);\r\n    colForValByRound[name] = colName;\r\n    vals = PropToInt32Array(sval);\r\n    valByRound[name] = vals;\r\n    return vals[roundNumber % vals.Length];\r\n}", "public int GetBackgroundImageId() {\r\n    EscherSimpleProperty property = (EscherSimpleProperty)GetOptRecord().Lookup(EscherProperties.FILL__PATTERNTEXTURE);\r\n    return property == null ? 0 : property.PropertyValue;\r\n}", "public virtual TreeFilter GetTreeFilter() {\r\n    return treeFilter;\r\n}", "public virtual GetMemberResponse GetMember(GetMemberRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetMemberRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetMemberResponseUnmarshaller.Instance;\r\n    return Invoke<GetMemberResponse>(request, options);\r\n}", "public virtual bool canEncode() {\r\n    return true;\r\n}", "public virtual ReplaceRouteResponse ReplaceRoute(ReplaceRouteRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ReplaceRouteRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ReplaceRouteResponseUnmarshaller.Instance;\r\n    return Invoke<ReplaceRouteResponse>(request, options);\r\n}", "public override ObjectId GetResultTreeId() {\r\n    return (resultTree == null) ? null : resultTree.ToObjectId();\r\n}", "public override bool Equals(Object o) {\r\n    bool rval = this == o;\r\n    if(!rval && (o != null) && (o.GetType() == this.GetType())) {\r\n        IntList other = (IntList)o;\r\n        if(other._limit == _limit) {\r\n            rval = true;\r\n            for(int j = 0; rval && (j < _limit); j++) {\r\n                rval = _array[j] == other._array[j];\r\n            }\r\n        }\r\n    }\r\n    return rval;\r\n}", "public virtual ListReusableDelegationSetsResponse ListReusableDelegationSets(ListReusableDelegationSetsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListReusableDelegationSetsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListReusableDelegationSetsResponseUnmarshaller.Instance;\r\n    return Invoke<ListReusableDelegationSetsResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return \"(\" + a.ToString() + \" OR \" + b.ToString() + \")\";\r\n}", "public virtual InitiateLayerUploadResponse InitiateLayerUpload(InitiateLayerUploadRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = InitiateLayerUploadRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = InitiateLayerUploadResponseUnmarshaller.Instance;\r\n    return Invoke<InitiateLayerUploadResponse>(request, options);\r\n}", "public UpdateRepoRequest(): base(\"cr\", \"2016-06-07\", \"UpdateRepo\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]\";\r\n    Method = MethodType.POST;\r\n}", "public PhoneticFilterFactory(IDictionary<string, string> args): base(args) {\r\n    inject = GetBoolean(args, INJECT, true);\r\n    name = Require(args, ENCODER);\r\n    string v = Get(args, MAX_CODE_LENGTH);\r\n    if(v != null) {\r\n        maxCodeLength = int.Parse(v, CultureInfo.InvariantCulture);\r\n    } else {\r\n        maxCodeLength = null;\r\n    }\r\n    if(!(args.Count == 0)) {\r\n        throw new ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual FetchCommand Fetch() {\r\n    return new FetchCommand(repo);\r\n}", "public virtual QueryPhraseMap SearchPhrase(string fieldName, IList<TermInfo> phraseCandidate) {\r\n    QueryPhraseMap root = GetRootMap(fieldName);\r\n    if(root == null) return null;\r\n    return root.SearchPhrase(phraseCandidate);\r\n}", "public override java.util.Iterator<java.util.MapClass.Entry<K, V>> iterator() {\r\n    return new java.util.Hashtable<K, V>.EntryIterator(this._enclosing);\r\n}", "public virtual DeleteDBSnapshotResponse DeleteDBSnapshot(DeleteDBSnapshotRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDBSnapshotRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDBSnapshotResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDBSnapshotResponse>(request, options);\r\n}", "public virtual void SetOutput() {\r\n    output = true;\r\n}", "public override java.nio.ByteBuffer compact() {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual org.xmlpull.v1.XmlPullParser newPullParser() {\r\n    if(parserClasses == null) {\r\n        throw new org.xmlpull.v1.XmlPullParserException(\"Factory initialization was incomplete - has not tried \"+ classNamesLocation);\r\n    }\r\n    if(parserClasses.size() == 0) {\r\n        throw new org.xmlpull.v1.XmlPullParserException(\"No valid parser classes found in \"+ classNamesLocation);\r\n    }\r\n    java.lang.StringBuilder issues = new java.lang.StringBuilder();\r\n    {\r\n        for(int i = 0; i < parserClasses.size(); i++) {\r\n            System.Type ppClass = (System.Type)parserClasses.get(i);\r\n            try {\r\n                org.xmlpull.v1.XmlPullParser pp = (org.xmlpull.v1.XmlPullParser)System.Activator.CreateInstance(ppClass);\r\n                {\r\n                    for(java.util.Iterator<object> iter = features.keySet().iterator(); iter.hasNext();) {\r\n                        string key = (string)iter.next();\r\n                        bool value = (bool)features.get(key);\r\n                        if(value != null && value) {\r\n                            pp.setFeature(key, true);\r\n                        }\r\n                    }\r\n                }\r\n                return pp;\r\n            } catch(System.Exception ex) {\r\n                issues.append(ppClass.FullName + \": \" + ex.ToString() + \"; \");\r\n            }\r\n        }\r\n    }\r\n    throw new org.xmlpull.v1.XmlPullParserException(\"could not create parser: \" + issues);\r\n}", "public virtual DeleteAnalysisSchemeResponse DeleteAnalysisScheme(DeleteAnalysisSchemeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteAnalysisSchemeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteAnalysisSchemeResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteAnalysisSchemeResponse>(request, options);\r\n}", "public ExcelExtractor(HSSFWorkbook wb): base(wb) {\r\n    this.wb = wb;\r\n    _formatter = new HSSFDataFormatter();\r\n}", "public override java.nio.IntBuffer put(int index, int c) {\r\n    checkIndex(index);\r\n    byteBuffer.putInt(index * libcore.io.SizeOf.INT, c);\r\n    return this;\r\n}", "public byte GetParameterClass(int index) {\r\n    if(index >= paramClass.Length) {\r\n        return paramClass[paramClass.Length - 1];\r\n    }\r\n    return paramClass[index];\r\n}", "public virtual ListEndpointsResponse ListEndpoints(ListEndpointsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListEndpointsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListEndpointsResponseUnmarshaller.Instance;\r\n    return Invoke<ListEndpointsResponse>(request, options);\r\n}", "public static CharsRef Join(string[] words, CharsRef reuse) {\r\n    int upto = 0;\r\n    char[] buffer = reuse.Chars;\r\n    foreach(string word in words) {\r\n        int wordLen = word.Length;\r\n        int needed = (0 == upto ? wordLen : 1 + upto + wordLen);\r\n        if(needed > buffer.Length) {\r\n            reuse.Grow(needed);\r\n            buffer = reuse.Chars;\r\n        }\r\n        if(upto > 0) {\r\n            buffer[upto++] = SynonymMap.WORD_SEPARATOR;\r\n        }\r\n        word.CopyTo(0, buffer, upto, wordLen - 0);\r\n        upto += wordLen;\r\n    }\r\n    reuse.Length = upto;\r\n    return reuse;\r\n}", "public java.lang.StringBuffer insert(int index, float f) {\r\n    return insert(index, System.Convert.ToString(f));\r\n}", "public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) {\r\n    if(shortCount > remaining()) {\r\n        throw new java.nio.BufferOverflowException();\r\n    }\r\n    System.Array.Copy(src, srcOffset, backingArray, offset + _position, shortCount);\r\n    _position += shortCount;\r\n    return this;\r\n}", "public virtual DisassociateResolverEndpointIpAddressResponse DisassociateResolverEndpointIpAddress(DisassociateResolverEndpointIpAddressRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisassociateResolverEndpointIpAddressRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisassociateResolverEndpointIpAddressResponseUnmarshaller.Instance;\r\n    return Invoke<DisassociateResolverEndpointIpAddressResponse>(request, options);\r\n}", "public virtual AcceptDirectConnectGatewayAssociationProposalResponse AcceptDirectConnectGatewayAssociationProposal(AcceptDirectConnectGatewayAssociationProposalRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AcceptDirectConnectGatewayAssociationProposalRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AcceptDirectConnectGatewayAssociationProposalResponseUnmarshaller.Instance;\r\n    return Invoke<AcceptDirectConnectGatewayAssociationProposalResponse>(request, options);\r\n}", "public virtual StopStackSetOperationResponse StopStackSetOperation(StopStackSetOperationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopStackSetOperationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopStackSetOperationResponseUnmarshaller.Instance;\r\n    return Invoke<StopStackSetOperationResponse>(request, options);\r\n}", "public virtual CreateCacheSubnetGroupResponse CreateCacheSubnetGroup(CreateCacheSubnetGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateCacheSubnetGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateCacheSubnetGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateCacheSubnetGroupResponse>(request, options);\r\n}", "public CachedOrds(OrdinalsSegmentReader source, int maxDoc) {\r\n    Offsets = new int[maxDoc + 1];\r\n    int[] ords = new int[maxDoc];\r\n    long totOrds = 0;\r\n    Int32sRef values = new Int32sRef(32);\r\n    for(int docID = 0; docID < maxDoc; docID++) {\r\n        Offsets[docID] = (int)totOrds;\r\n        source.Get(docID, values);\r\n        long nextLength = totOrds + values.Length;\r\n        if(nextLength > ords.Length) {\r\n            if(nextLength > ArrayUtil.MAX_ARRAY_LENGTH) {\r\n                throw new ThreadStateException(\"too many ordinals (>= \" + nextLength + \") to cache\");\r\n            }\r\n            ords = ArrayUtil.Grow(ords, (int)nextLength);\r\n        }\r\n        Array.Copy(values.Int32s, 0, ords, (int)totOrds, values.Length);\r\n        totOrds = nextLength;\r\n    }\r\n    Offsets[maxDoc] = (int)totOrds;\r\n    if((double)totOrds / ords.Length < 0.9) {\r\n        this.Ordinals = new int[(int)totOrds];\r\n        Array.Copy(ords, 0, this.Ordinals, 0, (int)totOrds);\r\n    } else {\r\n        this.Ordinals = ords;\r\n    }\r\n}", "public string getRawUserInfo() {\r\n    return userInfo;\r\n}", "public override object[] toArray() {\r\n    lock(this._enclosing) {\r\n        return base.toArray();\r\n    }\r\n}", "public virtual DescribeCompilationJobResponse DescribeCompilationJob(DescribeCompilationJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCompilationJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCompilationJobResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCompilationJobResponse>(request, options);\r\n}", "public string getQuery() {\r\n    return decode(query);\r\n}", "public virtual CreateEnvironmentResponse CreateEnvironment(CreateEnvironmentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateEnvironmentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateEnvironmentResponseUnmarshaller.Instance;\r\n    return Invoke<CreateEnvironmentResponse>(request, options);\r\n}", "public virtual ParseTreeMatch Match(IParseTree tree) {\r\n    return matcher.Match(tree, this);\r\n}", "public virtual bool Contains(char[] text) {\r\n    return map.ContainsKey(text, 0, text.Length);\r\n}", "public QueryRequest(string tableName) {\r\n    _tableName = tableName;\r\n}", "public bool IsRowGroupHiddenByParent(int row) {\r\n    int endLevel;\r\n    bool endHidden;\r\n    int endOfOutlineGroupIdx = FindEndOfRowOutlineGroup(row);\r\n    if(GetRow(endOfOutlineGroupIdx + 1) == null) {\r\n        endLevel = 0;\r\n        endHidden = false;\r\n    } else {\r\n        endLevel = GetRow(endOfOutlineGroupIdx + 1).OutlineLevel;\r\n        endHidden = GetRow(endOfOutlineGroupIdx + 1).ZeroHeight;\r\n    }\r\n    int startLevel;\r\n    bool startHidden;\r\n    int startOfOutlineGroupIdx = FindStartOfRowOutlineGroup(row);\r\n    if(startOfOutlineGroupIdx - 1 < 0 || GetRow(startOfOutlineGroupIdx - 1) == null) {\r\n        startLevel = 0;\r\n        startHidden = false;\r\n    } else {\r\n        startLevel = GetRow(startOfOutlineGroupIdx - 1).OutlineLevel;\r\n        startHidden = GetRow(startOfOutlineGroupIdx - 1).ZeroHeight;\r\n    }\r\n    if(endLevel > startLevel) {\r\n        return endHidden;\r\n    } else {\r\n        return startHidden;\r\n    }\r\n}", "public override bool RetryFailedLockFileCommit() {\r\n    return true;\r\n}", "public virtual ValidateMatchmakingRuleSetResponse ValidateMatchmakingRuleSet(ValidateMatchmakingRuleSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ValidateMatchmakingRuleSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ValidateMatchmakingRuleSetResponseUnmarshaller.Instance;\r\n    return Invoke<ValidateMatchmakingRuleSetResponse>(request, options);\r\n}", "public virtual bool Get(string name, bool dflt) {\r\n    bool[] vals;\r\n    object temp;\r\n    if(valByRound.TryGetValue(name, out temp) && temp != null) {\r\n        vals = (bool[])temp;\r\n        return vals[roundNumber % vals.Length];\r\n    }\r\n    string sval;\r\n    if(!props.TryGetValue(name, out sval)) {\r\n        sval = dflt.ToString();\r\n    }\r\n    if(sval.IndexOf(':') < 0) {\r\n        return bool.Parse(sval);\r\n    }\r\n    int k = sval.IndexOf(':');\r\n    string colName = sval.Substring(0, k - 0);\r\n    sval = sval.Substring(k + 1);\r\n    colForValByRound[name] = colName;\r\n    vals = PropToBooleanArray(sval);\r\n    valByRound[name] = vals;\r\n    return vals[roundNumber % vals.Length];\r\n}", "public virtual UpdateLinkAttributesResponse UpdateLinkAttributes(UpdateLinkAttributesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateLinkAttributesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateLinkAttributesResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateLinkAttributesResponse>(request, options);\r\n}", "public NumericPayloadTokenFilter(TokenStream input, float payload, string typeMatch): base(input) {\r\n    if(typeMatch == null) {\r\n        throw new ArgumentException(\"typeMatch cannot be null\");\r\n    }\r\n    thePayload = new BytesRef(PayloadHelper.EncodeSingle(payload));\r\n    this.typeMatch = typeMatch;\r\n    this.payloadAtt = AddAttribute<IPayloadAttribute>();\r\n    this.typeAtt = AddAttribute<ITypeAttribute>();\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[CALCCOUNT]\\n\");\r\n    buffer.Append(\"    .iterations     = \").Append(StringUtil.ToHexString(Iterations)).Append(\"\\n\");\r\n    buffer.Append(\"[/CALCCOUNT]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual E push(E @object) {\r\n    addElement(@object);\r\n    return @object;\r\n}", "public LinkedHashMap(int initialCapacity, float loadFactor, bool accessOrder) : base(initialCapacity, loadFactor) {\r\n    init();\r\n    this.accessOrder = accessOrder;\r\n}", "public TreeSet() {\r\n    backingMap = new java.util.TreeMap<E, object>();\r\n}", "public virtual long skip(long charCount) {\r\n    if(charCount < 0) {\r\n        throw new System.ArgumentException(\"charCount < 0: \" + charCount);\r\n    }\r\n    lock(@lock) {\r\n        long skipped = 0;\r\n        int toRead = charCount < 512 ? (int)charCount : 512;\r\n        char[] charsSkipped = new char[toRead];\r\n        while(skipped < charCount) {\r\n            int read_1 = read(charsSkipped, 0, toRead);\r\n            if(read_1 == -1) {\r\n                return skipped;\r\n            }\r\n            skipped += read_1;\r\n            if(read_1 < toRead) {\r\n                return skipped;\r\n            }\r\n            if(charCount - skipped < toRead) {\r\n                toRead = (int)(charCount - skipped);\r\n            }\r\n        }\r\n        return skipped;\r\n    }\r\n}", "public ValueEval GetRef3DEval(Ref3DPxg rptg) {\r\n    SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.SheetName, rptg.LastSheetName, rptg.ExternalWorkbookNumber);\r\n    return new LazyRefEval(rptg.Row, rptg.Column, sre);\r\n}", "public NewAnalyzerTask(PerfRunData runData): base(runData) {\r\n    analyzerNames = new List<string>();\r\n}", "public override bool Equals(object o) {\r\n    return o is EnglishStemmer;\r\n}", "public override void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        long block = blocks[blocksOffset++];\r\n        valuesOffset = Decode(block, values, valuesOffset);\r\n    }\r\n}", "public void IncRef() {\r\n    EnsureOpen();\r\n    refCount.IncrementAndGet();\r\n}", "public virtual TestFailoverResponse TestFailover(TestFailoverRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TestFailoverRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TestFailoverResponseUnmarshaller.Instance;\r\n    return Invoke<TestFailoverResponse>(request, options);\r\n}", "public RefWriter(ICollection<Ref> refs) {\r\n    this.refs = RefComparator.Sort(refs);\r\n}", "public ByteVector(int capacity) {\r\n    if(capacity > 0) {\r\n        blockSize = capacity;\r\n    } else {\r\n        blockSize = DEFAULT_BLOCK_SIZE;\r\n    }\r\n    array = new byte[blockSize];\r\n    n = 0;\r\n}", "public virtual void EndWorker() {\r\n    if(workers.DecrementAndGet() == 0) {\r\n        process.Release();\r\n    }\r\n}", "public virtual DescribeVolumeStatusResponse DescribeVolumeStatus(DescribeVolumeStatusRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeVolumeStatusRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeVolumeStatusResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeVolumeStatusResponse>(request, options);\r\n}", "public IntMapper(int InitialCapacity) {\r\n    elements = new List<T>(InitialCapacity);\r\n    valueKeyMap = new Dictionary<T, int>(InitialCapacity);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_borderType);\r\n    out1.WriteShort(field_2_options);\r\n}", "public virtual void copyInto(object[] elements_1) {\r\n    lock(this) {\r\n        System.Array.Copy(elementData, 0, elements_1, 0, elementCount);\r\n    }\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0,ValueEval arg1) {\r\n    String arg;\r\n    int index;\r\n    try {\r\n        arg = TextFunction.EvaluateStringArg(arg0, srcRowIndex, srcColumnIndex);\r\n        index = TextFunction.EvaluateIntArg(arg1, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    if(index < 0) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    String result;\r\n    if(_isLeft) {\r\n        result = arg.Substring(0, Math.Min(arg.Length, index));\r\n    } else {\r\n        result = arg.Substring(Math.Max(0, arg.Length - index));\r\n    }\r\n    return new StringEval(result);\r\n}", "public CustomViewSettingsRecordAggregate(RecordStream rs) {\r\n    _begin = rs.GetNext();\r\n    if(_begin.Sid != UserSViewBegin.sid) {\r\n        throw new InvalidOperationException(\"Bad begin record\");\r\n    }\r\n    List<RecordBase> temp = new List<RecordBase>();\r\n    while(rs.PeekNextSid() != UserSViewEnd.sid) {\r\n        if(PageSettingsBlock.IsComponentRecord(rs.PeekNextSid())) {\r\n            if(_psBlock != null) {\r\n                throw new InvalidOperationException(\"Found more than one PageSettingsBlock in custom view Settings sub-stream\");\r\n            }\r\n            _psBlock = new PageSettingsBlock(rs);\r\n            temp.Add(_psBlock);\r\n            continue;\r\n        }\r\n        temp.Add(rs.GetNext());\r\n    }\r\n    _recs = temp;\r\n    _end = rs.GetNext();\r\n    if(_end.Sid != UserSViewEnd.sid) {\r\n        throw new InvalidOperationException(\"Bad custom view Settings end record\");\r\n    }\r\n}", "public virtual DeleteSignalingChannelResponse DeleteSignalingChannel(DeleteSignalingChannelRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteSignalingChannelRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteSignalingChannelResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteSignalingChannelResponse>(request, options);\r\n}", "public override bool remove(object o) {\r\n    if(!(o is java.util.MapClass.Entry<K, V>)) {\r\n        return false;\r\n    }\r\n    java.util.MapClass.Entry<object, object> e = (java.util.MapClass.Entry<object, object>)o;\r\n    return this._enclosing.removeMapping(e.getKey(), e.getValue());\r\n}", "public SnapshotDeletionPolicy(IndexDeletionPolicy primary) {\r\n    this.primary = primary;\r\n}", "public virtual void throwException() {\r\n    switch(this.type) {\r\n    case TYPE_UNDERFLOW: {\r\n        throw new java.nio.BufferUnderflowException();\r\n    }\r\n    case TYPE_OVERFLOW: {\r\n        throw new java.nio.BufferOverflowException();\r\n    }\r\n    case TYPE_UNMAPPABLE_CHAR: {\r\n        throw new java.nio.charset.UnmappableCharacterException(this._length);\r\n    }\r\n    case TYPE_MALFORMED_INPUT: {\r\n        throw new java.nio.charset.MalformedInputException(this._length);\r\n    }\r\n    default: {\r\n        throw new java.nio.charset.CharacterCodingException();\r\n    }\r\n    }\r\n}", "public StringPtg(ILittleEndianInput in1) {\r\n    int field_1_length = in1.ReadUByte();\r\n    field_2_options = (byte)in1.ReadByte();\r\n    _is16bitUnicode = (field_2_options & 0x01) != 0;\r\n    if(_is16bitUnicode) {\r\n        field_3_string = StringUtil.ReadUnicodeLE(in1, field_1_length);\r\n    } else {\r\n        field_3_string = StringUtil.ReadCompressedUnicode(in1, field_1_length);\r\n    }\r\n}", "public GetPublicAccessUrlsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"GetPublicAccessUrls\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public virtual CleanCommand Clean() {\r\n    return new CleanCommand(repo);\r\n}", "public virtual ICollection<PackFile> GetPacks() {\r\n    ObjectDirectory.PackList list = packList.Get();\r\n    if(list == NO_PACKS) {\r\n        list = ScanPacks(list);\r\n    }\r\n    PackFile[] packs = list.packs;\r\n    return Sharpen.Collections.UnmodifiableCollection(Arrays.AsList(packs));\r\n}", "public virtual DescribeStackDriftDetectionStatusResponse DescribeStackDriftDetectionStatus(DescribeStackDriftDetectionStatusRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeStackDriftDetectionStatusRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeStackDriftDetectionStatusResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeStackDriftDetectionStatusResponse>(request, options);\r\n}", "public virtual ListCloudFrontOriginAccessIdentitiesResponse ListCloudFrontOriginAccessIdentities(ListCloudFrontOriginAccessIdentitiesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListCloudFrontOriginAccessIdentitiesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListCloudFrontOriginAccessIdentitiesResponseUnmarshaller.Instance;\r\n    return Invoke<ListCloudFrontOriginAccessIdentitiesResponse>(request, options);\r\n}", "public static SshSessionFactory GetInstance() {\r\n    return INSTANCE;\r\n}", "public virtual ListConferenceProvidersResponse ListConferenceProviders(ListConferenceProvidersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListConferenceProvidersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListConferenceProvidersResponseUnmarshaller.Instance;\r\n    return Invoke<ListConferenceProvidersResponse>(request, options);\r\n}", "public virtual UpdateReceiptRuleResponse UpdateReceiptRule(UpdateReceiptRuleRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateReceiptRuleRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateReceiptRuleResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateReceiptRuleResponse>(request, options);\r\n}", "public override string ToString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.Append(\"(\");\r\n    for(int i = 0; i < subfilters.Length; i++) {\r\n        if(i > 0) {\r\n            r.Append(\" OR \");\r\n        }\r\n        r.Append(subfilters[i].ToString());\r\n    }\r\n    r.Append(\")\");\r\n    return r.ToString();\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(sid);\r\n    out1.WriteShort(length);\r\n    out1.WriteShort(flags);\r\n}", "public virtual UpdateHealthCheckResponse UpdateHealthCheck(UpdateHealthCheckRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateHealthCheckRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateHealthCheckResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateHealthCheckResponse>(request, options);\r\n}", "public long RamBytesUsed() {\r\n    long mem = RamUsageEstimator.ShallowSizeOf(this) + RamUsageEstimator.SizeOf(Offsets);\r\n    if(Offsets != Ordinals) {\r\n        mem += RamUsageEstimator.SizeOf(Ordinals);\r\n    }\r\n    return mem;\r\n}", "public virtual UpdateWorkforceResponse UpdateWorkforce(UpdateWorkforceRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateWorkforceRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateWorkforceResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateWorkforceResponse>(request, options);\r\n}", "public virtual void SetObjectId(AnyObjectId id) {\r\n    id.CopyRawTo(IdBuffer, IdOffset);\r\n}", "public virtual void write(byte[] buffer, int byteOffset, int byteCount) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual GetBlockResponse GetBlock(GetBlockRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetBlockRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetBlockResponseUnmarshaller.Instance;\r\n    return Invoke<GetBlockResponse>(request, options);\r\n}", "public virtual void ExportDirectory(FilePath dir) {\r\n    exportBase.AddItem(dir);\r\n}", "public virtual CreateReservedInstancesListingResponse CreateReservedInstancesListing(CreateReservedInstancesListingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateReservedInstancesListingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateReservedInstancesListingResponseUnmarshaller.Instance;\r\n    return Invoke<CreateReservedInstancesListingResponse>(request, options);\r\n}", "public override java.nio.ByteBuffer put(byte b) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public ValueEval Evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\r\n    double result;\r\n    try {\r\n        IList temp = new ArrayList();\r\n        for(int i = 0; i < args.Length; i++) {\r\n            CollectValues(args[i], temp);\r\n        }\r\n        double[] values = new double[temp.Count];\r\n        for(int i = 0; i < values.Length; i++) {\r\n            values[i] = (Double)temp[i];\r\n        }\r\n        result = Evaluate(values);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    return new NumberEval(result);\r\n}", "public static CharType GetCharType(char ch) {\r\n    if(ch >= 0x4E00 && ch <= 0x9FA5)return CharType.HANZI;\r\n    if((ch >= 0x0041 && ch <= 0x005A) || (ch >= 0x0061 && ch <= 0x007A))return CharType.LETTER;\r\n    if(ch >= 0x0030 && ch <= 0x0039)return CharType.DIGIT;\r\n    if(ch == ' ' || ch == '\\t' || ch == '\\r' || ch == '\\n' || ch == '\u3000')return CharType.SPACE_LIKE;\r\n    if((ch >= 0x0021 && ch <= 0x00BB) || (ch >= 0x2010 && ch <= 0x2642)|| (ch >= 0x3001 && ch <= 0x301E))return CharType.DELIMITER;\r\n    if((ch >= 0xFF21 && ch <= 0xFF3A) || (ch >= 0xFF41 && ch <= 0xFF5A))return CharType.FULLWIDTH_LETTER;\r\n    if(ch >= 0xFF10 && ch <= 0xFF19)return CharType.FULLWIDTH_DIGIT;\r\n    if(ch >= 0xFE30 && ch <= 0xFF63)return CharType.DELIMITER;\r\n    return CharType.OTHER;\r\n}", "public StopJumpserverRequest(): base(\"HPC\", \"2016-06-03\", \"StopJumpserver\") {\r\n    Method = MethodType.POST;\r\n}", "public virtual CreateDirectoryConfigResponse CreateDirectoryConfig(CreateDirectoryConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDirectoryConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDirectoryConfigResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDirectoryConfigResponse>(request, options);\r\n}", "public virtual DescribeExportTasksResponse DescribeExportTasks() {\r\n    return DescribeExportTasks(new DescribeExportTasksRequest());\r\n}", "public virtual ExportClientVpnClientCertificateRevocationListResponse ExportClientVpnClientCertificateRevocationList(ExportClientVpnClientCertificateRevocationListRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ExportClientVpnClientCertificateRevocationListRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ExportClientVpnClientCertificateRevocationListResponseUnmarshaller.Instance;\r\n    return Invoke<ExportClientVpnClientCertificateRevocationListResponse>(request, options);\r\n}", "public virtual CompleteMultipartUploadResponse CompleteMultipartUpload(CompleteMultipartUploadRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CompleteMultipartUploadRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CompleteMultipartUploadResponseUnmarshaller.Instance;\r\n    return Invoke<CompleteMultipartUploadResponse>(request, options);\r\n}", "public long RamBytesUsed() {\r\n    long sizeInBytes = 0;\r\n    sizeInBytes += RamUsageEstimator.SizeOf(minValues);\r\n    sizeInBytes += RamUsageEstimator.SizeOf(averages);\r\n    foreach(PackedInt32s.Reader reader in subReaders) {\r\n        sizeInBytes += reader.RamBytesUsed();\r\n    }\r\n    return sizeInBytes;\r\n}", "public static void fill(object[] array, object value) {\r\n    {\r\n        for(int i = 0; i < array.Length; i++) {\r\n            array[i] = value;\r\n        }\r\n    }\r\n}", "public override java.nio.ByteBuffer putDouble(int index, double value) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual DescribeAdjustmentTypesResponse DescribeAdjustmentTypes() {\r\n    return DescribeAdjustmentTypes(new DescribeAdjustmentTypesRequest());\r\n}", "public virtual PersonIdent GetSourceCommitter() {\r\n    RevCommit c = GetSourceCommit();\r\n    return c != null ? c.GetCommitterIdent() : null;\r\n}", "public override object[] toArray() {\r\n    int index = 0;\r\n    object[] contents = new object[_size];\r\n    java.util.LinkedList.Link<E> link = voidLink.next;\r\n    while(link != voidLink) {\r\n        contents[index++] = link.data;\r\n        link = link.next;\r\n    }\r\n    return contents;\r\n}", "public override string ToString() {\r\n    return \"Provider{\" + Sharpen.Util.IntToHexString(Sharpen.Util.IdentityHashCode(this)) + \" \" + info.name + \"}\";\r\n}", "public virtual NGit.Api.PushCommand SetRefSpecs(params RefSpec[] specs) {\r\n    CheckCallable();\r\n    this.refSpecs.Clear();\r\n    Sharpen.Collections.AddAll(refSpecs, specs);\r\n    return this;\r\n}", "public override string ToString(string field) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"spanFirst(\");\r\n    buffer.Append(m_match.ToString(field));\r\n    buffer.Append(\", \");\r\n    buffer.Append(m_end);\r\n    buffer.Append(\")\");\r\n    buffer.Append(ToStringUtils.Boost(Boost));\r\n    return buffer.ToString();\r\n}", "public virtual X509Certificate[] GetAcceptedIssuers() {\r\n    return null;\r\n}", "public override int Read() {\r\n    if(pos < size) {\r\n        return s[pos++];\r\n    } else {\r\n        s = null;\r\n        return -1;\r\n    }\r\n}", "public virtual PersonIdent GetRefLogIdent() {\r\n    return destination.GetRefLogIdent();\r\n}", "public override int size() {\r\n    return _size;\r\n}", "public virtual GetRequestValidatorsResponse GetRequestValidators(GetRequestValidatorsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetRequestValidatorsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetRequestValidatorsResponseUnmarshaller.Instance;\r\n    return Invoke<GetRequestValidatorsResponse>(request, options);\r\n}", "public override string ToString() {\r\n    return \"I(F)\";\r\n}", "public override bool Equals(object obj) {\r\n    if(this == obj)return true;\r\n    if(obj == null)return false;\r\n    if(GetType() != obj.GetType())return false;\r\n    SegToken other = (SegToken)obj;\r\n    if(!Arrays.Equals(CharArray, other.CharArray))return false;\r\n    if(EndOffset != other.EndOffset)return false;\r\n    if(Index != other.Index)return false;\r\n    if(StartOffset != other.StartOffset)return false;\r\n    if(Weight != other.Weight)return false;\r\n    if(WordType != other.WordType)return false;\r\n    return true;\r\n}", "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {\r\n    int bytesRemaining = ReadHeader(data, offset);\r\n    int pos = offset + 8;\r\n    int size = 0;\r\n    field_1_shapeId = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    field_2_flags = LittleEndian.GetInt(data, pos + size);\r\n    size += 4;\r\n    return RecordSize;\r\n}", "public override string GetSignerName() {\r\n    return ALGORITHM_NAME;\r\n}", "public virtual void clear() {\r\n    lock(this) {\r\n        if(_size != 0) {\r\n            java.util.Arrays.fill(table, null);\r\n            modCount++;\r\n            _size = 0;\r\n        }\r\n    }\r\n}", "public virtual CancelCapacityReservationResponse CancelCapacityReservation(CancelCapacityReservationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CancelCapacityReservationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CancelCapacityReservationResponseUnmarshaller.Instance;\r\n    return Invoke<CancelCapacityReservationResponse>(request, options);\r\n}", "public virtual ImportDocumentationPartsResponse ImportDocumentationParts(ImportDocumentationPartsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ImportDocumentationPartsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ImportDocumentationPartsResponseUnmarshaller.Instance;\r\n    return Invoke<ImportDocumentationPartsResponse>(request, options);\r\n}", "public virtual SuggestResponse Suggest(SuggestRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SuggestRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SuggestResponseUnmarshaller.Instance;\r\n    return Invoke<SuggestResponse>(request, options);\r\n}", "public virtual Explanation Explain(int docId, string field, int numPayloadsSeen, float payloadScore) {\r\n    Explanation result = new Explanation();\r\n    result.Description = this.GetType().Name + \".docScore()\";\r\n    result.Value = DocScore(docId, field, numPayloadsSeen, payloadScore);\r\n    return result;\r\n}", "public int Serialize(int offset, byte[] data) {\r\n    int result = 0;\r\n    int nRecs = _list.Count;\r\n    for(int i = 0; i < nRecs; i++) {\r\n        Record rec = (Record)_list[i];\r\n        result += rec.Serialize(offset + result, data);\r\n    }\r\n    return result;\r\n}", "public override String ToString() {\r\n    return _string.ToString();\r\n}", "public static long[] copyOfRange(long[] original, int start, int end) {\r\n    if(start > end) {\r\n        throw new System.ArgumentException();\r\n    }\r\n    int originalLength = original.Length;\r\n    if(start < 0 || start > originalLength) {\r\n        throw new System.IndexOutOfRangeException();\r\n    }\r\n    int resultLength = end - start;\r\n    int copyLength = System.Math.Min(resultLength, originalLength - start);\r\n    long[] result = new long[resultLength];\r\n    System.Array.Copy(original, start, result, 0, copyLength);\r\n    return result;\r\n}", "public static byte[] ToByteArray(ByteBuffer buffer, int length) {\r\n    if(buffer.HasBuffer && buffer.Offset == 0) {\r\n        return buffer.Buffer;\r\n    }\r\n    byte[] data = new byte[length];\r\n    buffer.Read(data);\r\n    return data;\r\n}", "public virtual void setProgress(int progress) {\r\n    lock(this) {\r\n        setProgress(progress, false);\r\n    }\r\n}", "public void RemoveCell(CellValueRecordInterface cell) {\r\n    if(cell == null) {\r\n        throw new ArgumentException(\"cell must not be null\");\r\n    }\r\n    int row = cell.Row;\r\n    if(row >= records.Length) {\r\n        throw new Exception(\"cell row is out of range\");\r\n    }\r\n    CellValueRecordInterface[] rowCells = records[row];\r\n    if(rowCells == null) {\r\n        throw new Exception(\"cell row is already empty\");\r\n    }\r\n    int column = cell.Column;\r\n    if(column >= rowCells.Length) {\r\n        throw new Exception(\"cell column is out of range\");\r\n    }\r\n    rowCells[column] = null;\r\n}", "public static string canonicalizePath(string path, bool discardRelativePrefix) {\r\n    int segmentStart = 0;\r\n    int deletableSegments = 0;\r\n    {\r\n        for(int i = 0; i <= path.Length;) {\r\n            int nextSegmentStart;\r\n            if(i == path.Length) {\r\n                nextSegmentStart = i;\r\n            } else {\r\n                if(path[i] == '/') {\r\n                    nextSegmentStart = i + 1;\r\n                } else {\r\n                    i++;\r\n                    continue;\r\n                }\r\n            }\r\n            if(i == segmentStart + 1 && Sharpen.StringHelper.RegionMatches(path, segmentStart, \".\", 0, 1)) {\r\n                path = Sharpen.StringHelper.Substring(path, 0, segmentStart) + Sharpen.StringHelper.Substring(path, nextSegmentStart);\r\n                i = segmentStart;\r\n            } else {\r\n                if(i == segmentStart + 2 && Sharpen.StringHelper.RegionMatches(path, segmentStart, \"..\", 0, 2)) {\r\n                    if(deletableSegments > 0 || discardRelativePrefix) {\r\n                        deletableSegments--;\r\n                        int prevSegmentStart = path.LastIndexOf('/', segmentStart - 2) + 1;\r\n                        path = Sharpen.StringHelper.Substring(path, 0, prevSegmentStart) + Sharpen.StringHelper.Substring(path, nextSegmentStart);\r\n                        i = segmentStart = prevSegmentStart;\r\n                    } else {\r\n                        i++;\r\n                        segmentStart = i;\r\n                    }\r\n                } else {\r\n                    if(i > 0) {\r\n                        deletableSegments++;\r\n                    }\r\n                    i++;\r\n                    segmentStart = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n}", "public ApostropheFilterFactory(IDictionary<string, string> args): base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameter(s): \" + args);\r\n    }\r\n}", "public virtual Ent Peek() {\r\n    if(this.packedIdx < this._enclosing.packed.Size() && this.looseIdx < this._enclosing.loose.Size()) {\r\n        Ref p = this._enclosing.packed.Get(this.packedIdx);\r\n        Ref l = this._enclosing.loose.Get(this.looseIdx);\r\n        int cmp = RefComparator.CompareTo(p, l);\r\n        if(cmp < 0) {\r\n            this.packedIdx++;\r\n            return this.ToEntry(p);\r\n        }\r\n        if(cmp == 0) {\r\n            this.packedIdx++;\r\n        }\r\n        this.looseIdx++;\r\n        return this.ToEntry(this.ResolveLoose(l));\r\n    }\r\n    if(this.looseIdx < this._enclosing.loose.Size()) {\r\n        return this.ToEntry(this.ResolveLoose(this._enclosing.loose.Get(this.looseIdx++)));\r\n    }\r\n    if(this.packedIdx < this._enclosing.packed.Size()) {\r\n        return this.ToEntry(this._enclosing.packed.Get(this.packedIdx++));\r\n    }\r\n    return null;\r\n}", "public virtual DeleteEnvironmentResponse DeleteEnvironment(DeleteEnvironmentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteEnvironmentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteEnvironmentResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteEnvironmentResponse>(request, options);\r\n}", "public virtual int Stem(char[] s, int len) {\r\n    for(int i = 0; i < len; i++) {\r\n        switch(s[i]) {\r\n        case '\u00e1':\r\n            s[i] = 'a';\r\n            break;\r\n        case '\u00eb':\r\n        case '\u00e9':\r\n            s[i] = 'e';\r\n            break;\r\n        case '\u00ed':\r\n            s[i] = 'i';\r\n            break;\r\n        case '\u00f3':\r\n        case '\u0151':\r\n        case '\u00f5':\r\n        case '\u00f6':\r\n            s[i] = 'o';\r\n            break;\r\n        case '\u00fa':\r\n        case '\u0171':\r\n        case '\u0169':\r\n        case '\u00fb':\r\n        case '\u00fc':\r\n            s[i] = 'u';\r\n            break;\r\n        }\r\n    }\r\n    len = RemoveCase(s, len);\r\n    len = RemovePossessive(s, len);\r\n    len = RemovePlural(s, len);\r\n    return Normalize(s, len);\r\n}", "public void AddChildBefore(EscherRecord record, int insertBeforeRecordId) {\r\n    for(int i = 0; i < _childRecords.Count; i++) {\r\n        EscherRecord rec = _childRecords[(i)];\r\n        if(rec.RecordId == insertBeforeRecordId) {\r\n            _childRecords.Insert(i++, record);\r\n        }\r\n    }\r\n}", "public ListAlbumsRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"ListAlbums\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public SaveTaskForUpdatingRegistrantInfoByIdentityCredentialRequest(): base(\"Domain-intl\", \"2017-12-18\", \"SaveTaskForUpdatingRegistrantInfoByIdentityCredential\", \"domain\", \"openAPI\") {\r\n    Method = MethodType.POST;\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    int result;\r\n    if(arg0 is TwoDEval) {\r\n        result = ((TwoDEval)arg0).Height;\r\n    } else if(arg0 is RefEval) {\r\n        result = 1;\r\n    } else {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new NumberEval(result);\r\n}", "public virtual DescribeReservedInstancesResponse DescribeReservedInstances() {\r\n    return DescribeReservedInstances(new DescribeReservedInstancesRequest());\r\n}", "public virtual void SetPackedGitMMAP(bool usemmap) {\r\n    packedGitMMAP = usemmap;\r\n}", "public POIFSDocumentPath() {\r\n    this.components = new string[0];\r\n}", "public override string ToString() {\r\n    return Key + \"/\" + Value;\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        int byte0 = blocks[blocksOffset++] & 0xFF;\r\n        int byte1 = blocks[blocksOffset++] & 0xFF;\r\n        int byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (byte0 << 12) | (byte1 << 4) | ((int)((uint)byte2 >> 4));\r\n        int byte3 = blocks[blocksOffset++] & 0xFF;\r\n        int byte4 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;\r\n    }\r\n}", "public void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(_extBookIndex);\r\n    out1.WriteShort(_firstSheetIndex);\r\n    out1.WriteShort(_lastSheetIndex);\r\n}", "public PatternParser(IPatternConsumer consumer): this() {\r\n    this.consumer = consumer;\r\n}", "public string[] GetValues(string name) {\r\n    var result = new List<string>();\r\n    foreach(IIndexableField field in fields) {\r\n        if(field.Name.Equals(name, StringComparison.Ordinal) && field.GetStringValue() != null) {\r\n            result.Add(field.GetStringValue());\r\n        }\r\n    }\r\n    if(result.Count == 0) {\r\n        return NO_STRINGS;\r\n    }\r\n    return result.ToArray();\r\n}", "public virtual ListIdentityPoolUsageResponse ListIdentityPoolUsage(ListIdentityPoolUsageRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListIdentityPoolUsageRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListIdentityPoolUsageResponseUnmarshaller.Instance;\r\n    return Invoke<ListIdentityPoolUsageResponse>(request, options);\r\n}", "public ValueEval Evaluate(ValueEval[] args, int srcCellRow, int srcCellCol) {\r\n    if(args.Length < 3 || args.Length > 5) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    try {\r\n        BaseRef baseRef = EvaluateBaseRef(args[0]);\r\n        int rowOffset = EvaluateIntArg(args[1], srcCellRow, srcCellCol);\r\n        int columnOffset = EvaluateIntArg(args[2], srcCellRow, srcCellCol);\r\n        int height = baseRef.Height;\r\n        int width = baseRef.Width;\r\n        switch(args.Length) {\r\n        case 5:\r\n            width = EvaluateIntArg(args[4], srcCellRow, srcCellCol);\r\n            break;\r\n        case 4:\r\n            height = EvaluateIntArg(args[3], srcCellRow, srcCellCol);\r\n            break;\r\n        }\r\n        if(height == 0 || width == 0) {\r\n            return ErrorEval.REF_INVALID;\r\n        }\r\n        LinearOffsetRange rowOffsetRange = new LinearOffsetRange(rowOffset, height);\r\n        LinearOffsetRange colOffsetRange = new LinearOffsetRange(columnOffset, width);\r\n        return CreateOffset(baseRef, rowOffsetRange, colOffsetRange);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n}", "public virtual int[] GetCountsByTime() {\r\n    return countsByTime;\r\n}", "public virtual UpdateAccountResponse UpdateAccount(UpdateAccountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateAccountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateAccountResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateAccountResponse>(request, options);\r\n}", "public virtual DescribeTrainingJobResponse DescribeTrainingJob(DescribeTrainingJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeTrainingJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeTrainingJobResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeTrainingJobResponse>(request, options);\r\n}", "public virtual DeleteGroupResponse DeleteGroup(DeleteGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteGroupResponse>(request, options);\r\n}", "public override int Advance(int target) {\r\n    upto++;\r\n    if(upto == docIDs.Length) {\r\n        return docID_Renamed = NO_MORE_DOCS;\r\n    }\r\n    int inc = 10;\r\n    int nextUpto = upto + 10;\r\n    int low;\r\n    int high;\r\n    while(true) {\r\n        if(nextUpto >= docIDs.Length) {\r\n            low = nextUpto - inc;\r\n            high = docIDs.Length - 1;\r\n            break;\r\n        }\r\n        if(target <= docIDs[nextUpto]) {\r\n            low = nextUpto - inc;\r\n            high = nextUpto;\r\n            break;\r\n        }\r\n        inc *= 2;\r\n        nextUpto += inc;\r\n    }\r\n    while(true) {\r\n        if(low > high) {\r\n            upto = low;\r\n            break;\r\n        }\r\n        int mid = (int)((uint)(low + high) >> 1);\r\n        int cmp = docIDs[mid] - target;\r\n        if(cmp < 0) {\r\n            low = mid + 1;\r\n        } else if(cmp > 0) {\r\n            high = mid - 1;\r\n        } else {\r\n            upto = mid;\r\n            break;\r\n        }\r\n    }\r\n    if(liveDocs != null) {\r\n        while(upto < docIDs.Length) {\r\n            if(liveDocs.Get(docIDs[upto])) {\r\n                break;\r\n            }\r\n            upto++;\r\n        }\r\n    }\r\n    if(upto == docIDs.Length) {\r\n        return docID_Renamed = NO_MORE_DOCS;\r\n    } else {\r\n        return docID_Renamed = docIDs[upto];\r\n    }\r\n}", "public void RegisterListener(POIFSReaderListener listener) {\r\n    if(listener == null) {\r\n        throw new NullReferenceException();\r\n    }\r\n    if(registryClosed) {\r\n        throw new InvalidOperationException();\r\n    }\r\n    registry.RegisterListener(listener);\r\n}", "public static int[] Grow(int[] array, int minSize) {\r\n    Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");\r\n    if(array.Length < minSize) {\r\n        int[] newArray = new int[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT32)];\r\n        Array.Copy(array, 0, newArray, 0, array.Length);\r\n        return newArray;\r\n    } else {\r\n        return array;\r\n    }\r\n}", "public virtual void VisitTerminal(ITerminalNode node) {\r\n    ParserRuleContext parent = (ParserRuleContext)((IRuleNode)node.Parent).RuleContext;\r\n    IToken token = node.Symbol;\r\n    Output.WriteLine(\"consume \" + token + \" rule \" + this._enclosing.RuleNames[parent.RuleIndex]);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new LatvianStemFilter(input);\r\n}", "public virtual IncreaseReplicaCountResponse IncreaseReplicaCount(IncreaseReplicaCountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = IncreaseReplicaCountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = IncreaseReplicaCountResponseUnmarshaller.Instance;\r\n    return Invoke<IncreaseReplicaCountResponse>(request, options);\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int i = 0; i < iterations; ++i) {\r\n        int byte0 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = (int)((uint)byte0 >> 5);\r\n        values[valuesOffset++] = ((int)((uint)byte0 >> 2)) & 7;\r\n        int byte1 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte0 & 3) << 1) | ((int)((uint)byte1 >> 7));\r\n        values[valuesOffset++] = ((int)((uint)byte1 >> 4)) & 7;\r\n        values[valuesOffset++] = ((int)((uint)byte1 >> 1)) & 7;\r\n        int byte2 = blocks[blocksOffset++] & 0xFF;\r\n        values[valuesOffset++] = ((byte1 & 1) << 2) | ((int)((uint)byte2 >> 6));\r\n        values[valuesOffset++] = ((int)((uint)byte2 >> 3)) & 7;\r\n        values[valuesOffset++] = byte2 & 7;\r\n    }\r\n}", "public virtual StopHyperParameterTuningJobResponse StopHyperParameterTuningJob(StopHyperParameterTuningJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopHyperParameterTuningJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopHyperParameterTuningJobResponseUnmarshaller.Instance;\r\n    return Invoke<StopHyperParameterTuningJobResponse>(request, options);\r\n}", "public virtual ResetNetworkInterfaceAttributeResponse ResetNetworkInterfaceAttribute(ResetNetworkInterfaceAttributeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ResetNetworkInterfaceAttributeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ResetNetworkInterfaceAttributeResponseUnmarshaller.Instance;\r\n    return Invoke<ResetNetworkInterfaceAttributeResponse>(request, options);\r\n}", "public virtual RevBlob LookupBlob(AnyObjectId id) {\r\n    RevBlob c = (RevBlob)objects.Get(id);\r\n    if(c == null) {\r\n        c = new RevBlob(id);\r\n        objects.Add(c);\r\n    }\r\n    return c;\r\n}", "public virtual ListGroupMembershipsResponse ListGroupMemberships(ListGroupMembershipsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListGroupMembershipsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListGroupMembershipsResponseUnmarshaller.Instance;\r\n    return Invoke<ListGroupMembershipsResponse>(request, options);\r\n}", "public static void Mkdir(FilePath d, bool skipExisting) {\r\n    if(!d.Mkdir()) {\r\n        if(skipExisting && d.IsDirectory()) {\r\n            return;\r\n        }\r\n        throw new IOException(MessageFormat.Format(JGitText.Get().mkDirFailed, d.GetAbsolutePath()));\r\n    }\r\n}", "public virtual UpdateDetectorVersionMetadataResponse UpdateDetectorVersionMetadata(UpdateDetectorVersionMetadataRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateDetectorVersionMetadataRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateDetectorVersionMetadataResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateDetectorVersionMetadataResponse>(request, options);\r\n}", "public virtual void write(string str, int offset, int count) {\r\n    if((offset | count) < 0 || offset > str.Length - count) {\r\n        throw new java.lang.StringIndexOutOfBoundsException(str, offset, count);\r\n    }\r\n    char[] buf = new char[count];\r\n    Sharpen.StringHelper.GetCharsForString(str, offset, offset + count, buf, 0);\r\n    lock(@lock) {\r\n        write(buf, 0, buf.Length);\r\n    }\r\n}", "public override void ensureCapacity(int min) {\r\n    lock(this) {\r\n        base.ensureCapacity(min);\r\n    }\r\n}", "public virtual DescribeRecipeResponse DescribeRecipe(DescribeRecipeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeRecipeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeRecipeResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeRecipeResponse>(request, options);\r\n}", "public virtual DisassociateRouteTableResponse DisassociateRouteTable(DisassociateRouteTableRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisassociateRouteTableRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisassociateRouteTableResponseUnmarshaller.Instance;\r\n    return Invoke<DisassociateRouteTableResponse>(request, options);\r\n}", "public SetTopicAttributesRequest(string topicArn, string attributeName, string attributeValue) {\r\n    _topicArn = topicArn;\r\n    _attributeName = attributeName;\r\n    _attributeValue = attributeValue;\r\n}", "public static float[] Grow(float[] array, int minSize) {\r\n    Debug.Assert(minSize >= 0, \"size must be positive (got \" + minSize + \"): likely integer overflow?\");\r\n    if(array.Length < minSize) {\r\n        float[] newArray = new float[Oversize(minSize, RamUsageEstimator.NUM_BYTES_SINGLE)];\r\n        Array.Copy(array, 0, newArray, 0, array.Length);\r\n        return newArray;\r\n    } else {\r\n        return array;\r\n    }\r\n}", "public virtual NGit.Api.StashCreateCommand SetRef(string @ref) {\r\n    this.@ref = @ref;\r\n    return this;\r\n}", "public FormulaRecord(RecordInputStream in1):base(in1) {\r\n    long valueLongBits  = in1.ReadLong();\r\n    field_5_options = in1.ReadShort();\r\n    specialCachedValue = SpecialCachedValue.Create(valueLongBits);\r\n    if(specialCachedValue == null) {\r\n        field_4_value = BitConverter.Int64BitsToDouble(valueLongBits);\r\n    }\r\n    field_6_zero = in1.ReadInt();\r\n    int field_7_expression_len = in1.ReadShort();\r\n    field_8_parsed_expr = NPOI.SS.Formula.Formula.Read(field_7_expression_len, in1,in1.Available());\r\n}", "public override WAH8DocIdSet Build() {\r\n    if(this.wordNum != -1) {\r\n        AddWord(wordNum, (byte)word);\r\n    }\r\n    return base.Build();\r\n}", "public PasswordRev4Record(RecordInputStream in1) {\r\n    field_1_password = in1.ReadShort();\r\n}", "public override bool isReadOnly() {\r\n    return false;\r\n}", "public override int Preceding(int pos) {\r\n    if(pos < start || pos > end) {\r\n        throw new ArgumentException(\"offset out of bounds\");\r\n    } else if(pos == start) {\r\n        current = start;\r\n        return Done;\r\n    } else {\r\n        return First();\r\n    }\r\n}", "public CodepageRecord(RecordInputStream in1) {\r\n    field_1_codepage = in1.ReadShort();\r\n}", "public virtual ApproveAssignmentResponse ApproveAssignment(ApproveAssignmentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ApproveAssignmentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ApproveAssignmentResponseUnmarshaller.Instance;\r\n    return Invoke<ApproveAssignmentResponse>(request, options);\r\n}", "public virtual DescribeVpnConnectionsResponse DescribeVpnConnections() {\r\n    return DescribeVpnConnections(new DescribeVpnConnectionsRequest());\r\n}", "public override V next() {\r\n    return this.nextEntry().value;\r\n}", "public virtual DescribeInstanceHealthResponse DescribeInstanceHealth(DescribeInstanceHealthRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeInstanceHealthRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeInstanceHealthResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeInstanceHealthResponse>(request, options);\r\n}", "public static void Register(TransportProtocol proto) {\r\n    protocols.Add(0, new JavaWeakReference<TransportProtocol>(proto));\r\n}", "public static char[] copyOfRange(char[] original, int start, int end) {\r\n    if(start > end) {\r\n        throw new System.ArgumentException();\r\n    }\r\n    int originalLength = original.Length;\r\n    if(start < 0 || start > originalLength) {\r\n        throw new System.IndexOutOfRangeException();\r\n    }\r\n    int resultLength = end - start;\r\n    int copyLength = System.Math.Min(resultLength, originalLength - start);\r\n    char[] result = new char[resultLength];\r\n    System.Array.Copy(original, start, result, 0, copyLength);\r\n    return result;\r\n}", "public static void fill(int[] array, int value) {\r\n    {\r\n        for(int i = 0; i < array.Length; i++) {\r\n            array[i] = value;\r\n        }\r\n    }\r\n}", "public Type PeekNextClass() {\r\n    if(_nextIndex >= _list.Count) {\r\n        return null;\r\n    }\r\n    return _list[_nextIndex].GetType();\r\n}", "public static char[] copyOf(char[] original, int newLength) {\r\n    if(newLength < 0) {\r\n        throw new java.lang.NegativeArraySizeException();\r\n    }\r\n    return copyOfRange(original, 0, newLength);\r\n}", "public virtual DeleteRelationalDatabaseResponse DeleteRelationalDatabase(DeleteRelationalDatabaseRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteRelationalDatabaseRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteRelationalDatabaseResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteRelationalDatabaseResponse>(request, options);\r\n}", "public override bool Equals(object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(GetType() != obj.GetType()) {\r\n        return false;\r\n    }\r\n    WeightedPhraseInfo other = (WeightedPhraseInfo)obj;\r\n    if(StartOffset != other.StartOffset) {\r\n        return false;\r\n    }\r\n    if(EndOffset != other.EndOffset) {\r\n        return false;\r\n    }\r\n    if(Boost != other.Boost) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public bool HasNext() {\r\n    if(nextBlock == POIFSConstants.END_OF_CHAIN) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public virtual void Write(char b) {\r\n    if(m_len >= m_buf.Length) {\r\n        Resize(m_len + 1);\r\n    }\r\n    UnsafeWrite(b);\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    futureHeader.Serialize(out1);\r\n    out1.WriteShort(isf_sharedFeatureType);\r\n    out1.WriteByte(reserved);\r\n    out1.WriteInt((int)cbHdrData);\r\n    out1.Write(rgbHdrData);\r\n}", "public virtual ListUserHierarchyGroupsResponse ListUserHierarchyGroups(ListUserHierarchyGroupsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListUserHierarchyGroupsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListUserHierarchyGroupsResponseUnmarshaller.Instance;\r\n    return Invoke<ListUserHierarchyGroupsResponse>(request, options);\r\n}", "public GetTopicAttributesRequest(string topicArn) {\r\n    _topicArn = topicArn;\r\n}", "public virtual CreateTrafficPolicyVersionResponse CreateTrafficPolicyVersion(CreateTrafficPolicyVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateTrafficPolicyVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateTrafficPolicyVersionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateTrafficPolicyVersionResponse>(request, options);\r\n}", "public override bool Equals(object @object) {\r\n    if(this == @object) {\r\n        return true;\r\n    }\r\n    if(@object is java.util.MapClass.Entry<K, V>) {\r\n        java.util.MapClass.Entry<object, object> entry = (java.util.MapClass.Entry<object, object>)@object;\r\n        return ((object)key == null ? entry.getKey() == null : key.Equals(entry.getKey())) && ((object)value == null ? entry.getValue() == null : value.Equals(entry.getValue()));\r\n    }\r\n    return false;\r\n}", "public virtual ListResourcesResponse ListResources(ListResourcesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListResourcesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListResourcesResponseUnmarshaller.Instance;\r\n    return Invoke<ListResourcesResponse>(request, options);\r\n}", "public V getAndSet(V newValue) {\r\n    while(true) {\r\n        V x = get();\r\n        if(compareAndSet(x, newValue))return x;\r\n    }\r\n}", "public FeatHdrRecord() {\r\n    futureHeader = new FtrHeader();\r\n    futureHeader.RecordType = (sid);\r\n}", "public virtual DisassociatePhoneNumbersFromVoiceConnectorResponse DisassociatePhoneNumbersFromVoiceConnector(DisassociatePhoneNumbersFromVoiceConnectorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisassociatePhoneNumbersFromVoiceConnectorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisassociatePhoneNumbersFromVoiceConnectorResponseUnmarshaller.Instance;\r\n    return Invoke<DisassociatePhoneNumbersFromVoiceConnectorResponse>(request, options);\r\n}", "public virtual ObjectId IdFor(int type, byte[] data) {\r\n    return IdFor(type, data, 0, data.Length);\r\n}", "public virtual void RemoveParseListener(IParseTreeListener listener) {\r\n    if(_parseListeners != null) {\r\n        if(_parseListeners.Remove(listener)) {\r\n            if(_parseListeners.Count == 0) {\r\n                _parseListeners = null;\r\n            }\r\n        }\r\n    }\r\n}", "public AxisRecord(RecordInputStream in1) {\r\n    field_1_axisType = in1.ReadShort();\r\n    field_2_reserved1 = in1.ReadInt();\r\n    field_3_reserved2 = in1.ReadInt();\r\n    field_4_reserved3 = in1.ReadInt();\r\n    field_5_reserved4 = in1.ReadInt();\r\n}", "public static double Evaluate(double[] v) {\r\n    if(v.Length < 2) {\r\n        throw new EvaluationException(ErrorEval.NA);\r\n    }\r\n    int[] counts = new int[v.Length];\r\n    Arrays.Fill(counts, 1);\r\n    for(int i = 0, iSize = v.Length; i < iSize; i++) {\r\n        for(int j = i + 1, jSize = v.Length; j < jSize; j++) {\r\n            if(v[i] == v[j])counts[i]++;\r\n        }\r\n    }\r\n    double maxv = 0;\r\n    int maxc = 0;\r\n    for(int i = 0, iSize = counts.Length; i < iSize; i++) {\r\n        if(counts[i] > maxc) {\r\n            maxv = v[i];\r\n            maxc = counts[i];\r\n        }\r\n    }\r\n    if(maxc > 1) {\r\n        return maxv;\r\n    }\r\n    throw new EvaluationException(ErrorEval.NA);\r\n}", "public virtual void AddFacetCount(BytesRef facetValue, int count) {\r\n    if(count < currentMin) {\r\n        return;\r\n    }\r\n    FacetEntry facetEntry = new FacetEntry(facetValue, count);\r\n    if(facetEntries.Count == maxSize) {\r\n        if(!facetEntries.TryGetSuccessor(facetEntry, out FacetEntry _)) {\r\n            return;\r\n        }\r\n        var max = facetEntries.Max;\r\n        if(max != null)facetEntries.Remove(max);\r\n    }\r\n    facetEntries.Add(facetEntry);\r\n    if(facetEntries.Count == maxSize) {\r\n        var max = facetEntries.Max;\r\n        currentMin =  max != null ? max.Count : 0;\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    String nl = Environment.NewLine;\r\n    buffer.Append(\"[ftGmo]\" + nl);\r\n    buffer.Append(\"  reserved = \").Append(HexDump.ToHex(reserved)).Append(nl);\r\n    buffer.Append(\"[/ftGmo]\" + nl);\r\n    return buffer.ToString();\r\n}", "public override string ToString() {\r\n    return GetMode().ToString() + \" \" + GetName();\r\n}", "public CharVector(int capacity) {\r\n    if(capacity > 0) {\r\n        blockSize = capacity;\r\n    } else {\r\n        blockSize = DEFAULT_BLOCK_SIZE;\r\n    }\r\n    array = new char[blockSize];\r\n    n = 0;\r\n}", "public virtual DescribeAccountLimitsResponse DescribeAccountLimits(DescribeAccountLimitsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeAccountLimitsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeAccountLimitsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeAccountLimitsResponse>(request, options);\r\n}", "public void RemoveBuiltinRecord(byte name, int sheetIndex) {\r\n    linkTable.RemoveBuiltinRecord(name, sheetIndex);\r\n}", "public virtual CreateSecurityGroupResponse CreateSecurityGroup(CreateSecurityGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateSecurityGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateSecurityGroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateSecurityGroupResponse>(request, options);\r\n}", "public override bool Equals(object o) {\r\n    if(!(o is DisjunctionMaxQuery)) {\r\n        return false;\r\n    }\r\n    DisjunctionMaxQuery other = (DisjunctionMaxQuery)o;\r\n    return this.Boost == other.Boost&& this.tieBreakerMultiplier == other.tieBreakerMultiplier&& this.disjuncts.Equals(other.disjuncts);\r\n}", "public virtual GetObjectInformationResponse GetObjectInformation(GetObjectInformationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetObjectInformationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetObjectInformationResponseUnmarshaller.Instance;\r\n    return Invoke<GetObjectInformationResponse>(request, options);\r\n}", "public java.lang.StringBuffer append(bool b) {\r\n    return append(b ? \"true\" : \"false\");\r\n}", "public virtual GetIntegrationResponsesResponse GetIntegrationResponses(GetIntegrationResponsesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetIntegrationResponsesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetIntegrationResponsesResponseUnmarshaller.Instance;\r\n    return Invoke<GetIntegrationResponsesResponse>(request, options);\r\n}", "public virtual ListDeploymentConfigsResponse ListDeploymentConfigs() {\r\n    return ListDeploymentConfigs(new ListDeploymentConfigsRequest());\r\n}", "public CellRangeAddress Remove(int rangeIndex) {\r\n    if(_list.Count == 0) {\r\n        throw new Exception(\"List is empty\");\r\n    }\r\n    if(rangeIndex < 0 || rangeIndex >= _list.Count) {\r\n        throw new Exception(\"Range index (\" + rangeIndex+ \") is outside allowable range (0..\" + (_list.Count - 1) + \")\");\r\n    }\r\n    CellRangeAddress cra = (CellRangeAddress)_list[rangeIndex];\r\n    _list.Remove(rangeIndex);\r\n    return cra;\r\n}", "public virtual DimConfig GetDimConfig(string dimName) {\r\n    lock(this) {\r\n        DimConfig ft;\r\n        if(!fieldTypes.TryGetValue(dimName, out ft)) {\r\n            ft = DefaultDimConfig;\r\n        }\r\n        return ft;\r\n    }\r\n}", "public virtual DescribeStackResourceDriftsResponse DescribeStackResourceDrifts(DescribeStackResourceDriftsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeStackResourceDriftsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeStackResourceDriftsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeStackResourceDriftsResponse>(request, options);\r\n}", "public virtual void SetParams(string @params) {\r\n    if(!SupportsParams) {\r\n        throw new NotSupportedException(GetName() + \" does not support command line parameters.\");\r\n    }\r\n    this.m_params = @params;\r\n}", "public virtual DescribeRepositoryAssociationResponse DescribeRepositoryAssociation(DescribeRepositoryAssociationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeRepositoryAssociationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeRepositoryAssociationResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeRepositoryAssociationResponse>(request, options);\r\n}", "public override java.util.Enumeration<V> elements() {\r\n    lock(this) {\r\n        return new java.util.Hashtable<K, V>.ValueEnumeration(this);\r\n    }\r\n}", "public override void Set(int index, long value) {\r\n    int o = (int)((uint)index >> 4);\r\n    int b = index & 15;\r\n    int shift = b << 2;\r\n    blocks[o] = (blocks[o] & ~(15L << shift)) | (value << shift);\r\n}", "public HTMLStripCharFilterFactory(IDictionary<string, string> args) : base(args) {\r\n    escapedTags = GetSet(args, \"escapedTags\");\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual int GetEntryPathLength() {\r\n    return pathLen;\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(field_1_option_flag);\r\n    out1.WriteShort(field_2_ixals);\r\n    out1.WriteShort(field_3_not_used);\r\n    out1.WriteByte(field_4_name.Length);\r\n    StringUtil.WriteUnicodeStringFlagAndData(out1, field_4_name);\r\n    if(!IsOLELink && !IsStdDocumentNameIdentifier) {\r\n        if(IsAutomaticLink) {\r\n            if(_ddeValues != null) {\r\n                out1.WriteByte(_nColumns - 1);\r\n                out1.WriteShort(_nRows - 1);\r\n                ConstantValueParser.Encode(out1, _ddeValues);\r\n            }\r\n        } else {\r\n            field_5_name_definition.Serialize(out1);\r\n        }\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[REFRESHALL]\\n\");\r\n    buffer.Append(\"    .refreshall      = \").Append(RefreshAll).Append(\"\\n\");\r\n    buffer.Append(\"[/REFRESHALL]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual ContinueDeploymentResponse ContinueDeployment(ContinueDeploymentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ContinueDeploymentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ContinueDeploymentResponseUnmarshaller.Instance;\r\n    return Invoke<ContinueDeploymentResponse>(request, options);\r\n}", "public override void Set(int index, long value) {\r\n    int o = index / 3;\r\n    int b = index % 3;\r\n    int shift = b * 21;\r\n    blocks[o] = (blocks[o] & ~(2097151L << shift)) | (value << shift);\r\n}", "public long Next() {\r\n    if(ord == valueCount) {\r\n        throw new System.IO.EndOfStreamException();\r\n    }\r\n    if(off == blockSize) {\r\n        Refill();\r\n    }\r\n    long value = values[off++];\r\n    ++ord;\r\n    return value;\r\n}", "public static RevFilter Between(DateTime since, DateTime until) {\r\n    return Between(since.GetTime(), until.GetTime());\r\n}", "public virtual DeleteVaultResponse DeleteVault(DeleteVaultRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteVaultRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteVaultResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteVaultResponse>(request, options);\r\n}", "public override sealed void Reset() {\r\n    it = cachedStates.GetEnumerator();\r\n}", "public virtual void SetDetachingSymbolicRef() {\r\n    detachingSymbolicRef = true;\r\n}", "public virtual ModifyIdentityIdFormatResponse ModifyIdentityIdFormat(ModifyIdentityIdFormatRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyIdentityIdFormatRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyIdentityIdFormatResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyIdentityIdFormatResponse>(request, options);\r\n}", "public virtual void AddException(string word, IList<object> hyphenatedword) {\r\n    m_stoplist[word] = hyphenatedword;\r\n}", "public GreekStemFilterFactory(IDictionary<string, string> args): base(args) {\r\n    if(args.Count > 0) {\r\n        throw new System.ArgumentException(\"Unknown parameters: \" + args);\r\n    }\r\n}", "public virtual RegisterTypeResponse RegisterType(RegisterTypeRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = RegisterTypeRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = RegisterTypeResponseUnmarshaller.Instance;\r\n    return Invoke<RegisterTypeResponse>(request, options);\r\n}", "public virtual GetAccessControlEffectResponse GetAccessControlEffect(GetAccessControlEffectRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetAccessControlEffectRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetAccessControlEffectResponseUnmarshaller.Instance;\r\n    return Invoke<GetAccessControlEffectResponse>(request, options);\r\n}", "public HSSFShapeGroup CreateGroup(HSSFChildAnchor anchor) {\r\n    HSSFShapeGroup group = new HSSFShapeGroup(this, anchor);\r\n    group.Parent = this;\r\n    group.Anchor = anchor;\r\n    shapes.Add(group);\r\n    OnCreate(group);\r\n    return group;\r\n}", "public virtual string ToExternalString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.Append(GetName());\r\n    r.Append(\" <\");\r\n    r.Append(GetEmailAddress());\r\n    r.Append(\"> \");\r\n    r.Append(when / 1000);\r\n    r.Append(' ');\r\n    AppendTimezone(r);\r\n    return r.ToString();\r\n}", "public static FontCharset ValueOf(int value) {\r\n    if(value>=0&&value<=255)return _table[value];\r\n    return null;\r\n}", "public NLPSentenceDetectorOp() {\r\n    sentenceSplitter = null;\r\n}", "public override void Validate() {\r\n    base.Validate();\r\n}", "public QueryScorer(Query query, string field) {\r\n    Init(query, field, null, true);\r\n}", "public ActiveTrustedSigners(List<Signer> items) {\r\n    _items = items;\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(GetType().Name);\r\n    sb.Append(\" [\");\r\n    sb.Append(FormatReferenceAsString());\r\n    sb.Append(\"]\");\r\n    return sb.ToString();\r\n}", "public virtual UpdateNodegroupConfigResponse UpdateNodegroupConfig(UpdateNodegroupConfigRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateNodegroupConfigRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateNodegroupConfigResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateNodegroupConfigResponse>(request, options);\r\n}", "public virtual void Fill(int fromIndex, int toIndex, long val) {\r\n    Debug.Assert(val <= MaxValue(BitsPerValue));\r\n    Debug.Assert(fromIndex <= toIndex);\r\n    for(int i = fromIndex; i < toIndex; ++i) {\r\n        Set(i, val);\r\n    }\r\n}", "public virtual ListTrainingJobsResponse ListTrainingJobs(ListTrainingJobsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListTrainingJobsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListTrainingJobsResponseUnmarshaller.Instance;\r\n    return Invoke<ListTrainingJobsResponse>(request, options);\r\n}", "public virtual DescribeProfilingGroupResponse DescribeProfilingGroup(DescribeProfilingGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeProfilingGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeProfilingGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeProfilingGroupResponse>(request, options);\r\n}", "public IgnoreNode(IList<IgnoreRule> rules) {\r\n    this.rules = rules;\r\n}", "public static void fill(char[] array, char value) {\r\n    {\r\n        for(int i = 0; i < array.Length; i++) {\r\n            array[i] = value;\r\n        }\r\n    }\r\n}", "public virtual GetTransitGatewayMulticastDomainAssociationsResponse GetTransitGatewayMulticastDomainAssociations(GetTransitGatewayMulticastDomainAssociationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetTransitGatewayMulticastDomainAssociationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetTransitGatewayMulticastDomainAssociationsResponseUnmarshaller.Instance;\r\n    return Invoke<GetTransitGatewayMulticastDomainAssociationsResponse>(request, options);\r\n}", "public override java.nio.LongBuffer compact() {\r\n    System.Array.Copy(backingArray, _position + offset, backingArray, offset, remaining());\r\n    _position = _limit - _position;\r\n    _limit = _capacity;\r\n    _mark = UNSET_MARK;\r\n    return this;\r\n}", "public virtual GetCelebrityInfoResponse GetCelebrityInfo(GetCelebrityInfoRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetCelebrityInfoRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetCelebrityInfoResponseUnmarshaller.Instance;\r\n    return Invoke<GetCelebrityInfoResponse>(request, options);\r\n}", "public virtual GetTranscriptResponse GetTranscript(GetTranscriptRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetTranscriptRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetTranscriptResponseUnmarshaller.Instance;\r\n    return Invoke<GetTranscriptResponse>(request, options);\r\n}", "public virtual DeleteCacheParameterGroupResponse DeleteCacheParameterGroup(DeleteCacheParameterGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteCacheParameterGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteCacheParameterGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteCacheParameterGroupResponse>(request, options);\r\n}", "public DescribeTagsRequest(List<Filter> filters) {\r\n    _filters = filters;\r\n}", "public virtual CreateCustomMetadataResponse CreateCustomMetadata(CreateCustomMetadataRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateCustomMetadataRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateCustomMetadataResponseUnmarshaller.Instance;\r\n    return Invoke<CreateCustomMetadataResponse>(request, options);\r\n}", "public virtual ResumeClusterResponse ResumeCluster(ResumeClusterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ResumeClusterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ResumeClusterResponseUnmarshaller.Instance;\r\n    return Invoke<ResumeClusterResponse>(request, options);\r\n}", "public virtual DescribeMovingAddressesResponse DescribeMovingAddresses(DescribeMovingAddressesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeMovingAddressesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeMovingAddressesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeMovingAddressesResponse>(request, options);\r\n}", "public virtual SearchAddressBooksResponse SearchAddressBooks(SearchAddressBooksRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = SearchAddressBooksRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = SearchAddressBooksResponseUnmarshaller.Instance;\r\n    return Invoke<SearchAddressBooksResponse>(request, options);\r\n}", "public UpdateDomainToDomainGroupRequest(): base(\"Domain\", \"2018-01-29\", \"UpdateDomainToDomainGroup\") {\r\n    Method = MethodType.POST;\r\n}", "public override void Add(RevCommit c) {\r\n    BlockRevQueue.Block b = tail;\r\n    if(b == null) {\r\n        b = free.NewBlock();\r\n        b.Add(c);\r\n        head = b;\r\n        tail = b;\r\n        return;\r\n    } else {\r\n        if(b.IsFull()) {\r\n            b = free.NewBlock();\r\n            tail.next = b;\r\n            tail = b;\r\n        }\r\n    }\r\n    b.Add(c);\r\n}", "public override java.nio.FloatBuffer put(int index, float c) {\r\n    checkIndex(index);\r\n    byteBuffer.putFloat(index * libcore.io.SizeOf.FLOAT, c);\r\n    return this;\r\n}", "public override void Flush() {\r\n    try {\r\n        BeginWrite();\r\n        dst.Flush();\r\n    } catch(ThreadInterruptedException) {\r\n        throw WriteTimedOut();\r\n    }\r\n    finally{EndWrite();}\r\n}", "public virtual ICollection<string> GetModified() {\r\n    return Sharpen.Collections.UnmodifiableSet(diff.GetModified());\r\n}", "public Int64sRef Next(int count) {\r\n    Debug.Assert(count > 0);\r\n    if(ord == valueCount) {\r\n        throw new System.IO.EndOfStreamException();\r\n    }\r\n    if(off == blockSize) {\r\n        Refill();\r\n    }\r\n    count = Math.Min(count, blockSize - off);\r\n    count = (int)Math.Min(count, valueCount - ord);\r\n    valuesRef.Offset = off;\r\n    valuesRef.Length = count;\r\n    off += count;\r\n    ord += count;\r\n    return valuesRef;\r\n}", "public override java.nio.ByteBuffer slice() {\r\n    return new java.nio.ReadOnlyHeapByteBuffer(backingArray, remaining(), offset + _position);\r\n}", "public bool IsEmpty() {\r\n    return beginA == endA && beginB == endB;\r\n}", "public static int CommitMessage(byte[] b, int ptr) {\r\n    int sz = b.Length;\r\n    if(ptr == 0) {\r\n        ptr += 46;\r\n    }\r\n    while(ptr < sz && b[ptr] == 'p') {\r\n        ptr += 48;\r\n    }\r\n    return TagMessage(b, ptr);\r\n}", "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    double result;\r\n    if(args.Length != 2) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    try {\r\n        double startDateAsNumber = GetValue(args[0]);\r\n        int offsetInMonthAsNumber = (int)GetValue(args[1]);\r\n        DateTime startDate = DateUtil.GetJavaDate(startDateAsNumber);\r\n        DateTime resultDate = startDate.AddMonths(offsetInMonthAsNumber);\r\n        result = DateUtil.GetExcelDate(resultDate);\r\n        NumericFunction.CheckValue(result);\r\n        return new NumberEval(result);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n}", "public virtual DeleteSuggesterResponse DeleteSuggester(DeleteSuggesterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteSuggesterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteSuggesterResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteSuggesterResponse>(request, options);\r\n}", "public virtual CreatePipelineResponse CreatePipeline(CreatePipelineRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreatePipelineRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreatePipelineResponseUnmarshaller.Instance;\r\n    return Invoke<CreatePipelineResponse>(request, options);\r\n}", "public virtual StopDeliveryStreamEncryptionResponse StopDeliveryStreamEncryption(StopDeliveryStreamEncryptionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopDeliveryStreamEncryptionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopDeliveryStreamEncryptionResponseUnmarshaller.Instance;\r\n    return Invoke<StopDeliveryStreamEncryptionResponse>(request, options);\r\n}", "public virtual DeleteApplicationSnapshotResponse DeleteApplicationSnapshot(DeleteApplicationSnapshotRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteApplicationSnapshotRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteApplicationSnapshotResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteApplicationSnapshotResponse>(request, options);\r\n}", "public virtual ApplyCommand Apply() {\r\n    return new ApplyCommand(repo);\r\n}", "public RebootCacheClusterRequest(string cacheClusterId, List<string> cacheNodeIdsToReboot) {\r\n    _cacheClusterId = cacheClusterId;\r\n    _cacheNodeIdsToReboot = cacheNodeIdsToReboot;\r\n}", "public ModifyCacheClusterRequest(string cacheClusterId) {\r\n    _cacheClusterId = cacheClusterId;\r\n}", "public override bool Equals(object obj) {\r\n    if(this == obj) {\r\n        return true;\r\n    }\r\n    if(obj == null) {\r\n        return false;\r\n    }\r\n    if(this.GetType() != obj.GetType()) {\r\n        return false;\r\n    }\r\n    ScoreTerm other = (ScoreTerm)obj;\r\n    if(Term == null) {\r\n        if(other.Term != null) {\r\n            return false;\r\n        }\r\n    } else if(!Term.BytesEquals(other.Term)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "public virtual AssociateTransitGatewayMulticastDomainResponse AssociateTransitGatewayMulticastDomain(AssociateTransitGatewayMulticastDomainRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = AssociateTransitGatewayMulticastDomainRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = AssociateTransitGatewayMulticastDomainResponseUnmarshaller.Instance;\r\n    return Invoke<AssociateTransitGatewayMulticastDomainResponse>(request, options);\r\n}", "public virtual UpdateContactResponse UpdateContact(UpdateContactRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateContactRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateContactResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateContactResponse>(request, options);\r\n}", "public TableRecord(CellRangeAddress8Bit range): base(range) {\r\n    field_6_res = 0;\r\n}", "public virtual CreateProcessingJobResponse CreateProcessingJob(CreateProcessingJobRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateProcessingJobRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateProcessingJobResponseUnmarshaller.Instance;\r\n    return Invoke<CreateProcessingJobResponse>(request, options);\r\n}", "public override java.lang.CharSequence SubSequence(int start, int end) {\r\n    checkStartEndRemaining(start, end);\r\n    java.nio.CharSequenceAdapter result = copy(this);\r\n    result._position = _position + start;\r\n    result._limit = _position + end;\r\n    return result;\r\n}", "public virtual GetCoipPoolUsageResponse GetCoipPoolUsage(GetCoipPoolUsageRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetCoipPoolUsageRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetCoipPoolUsageResponseUnmarshaller.Instance;\r\n    return Invoke<GetCoipPoolUsageResponse>(request, options);\r\n}", "public virtual UpdateResolverEndpointResponse UpdateResolverEndpoint(UpdateResolverEndpointRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateResolverEndpointRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateResolverEndpointResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateResolverEndpointResponse>(request, options);\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {\r\n    ValueEval veText;\r\n    try {\r\n        veText = OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    String strText = OperandResolver.CoerceValueToString(veText);\r\n    Double result = ConvertTextToNumber(strText);\r\n    if(Double.IsNaN(result)) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new NumberEval(result);\r\n}", "public int AddExternalName(ExternalNameRecord rec) {\r\n    ExternalNameRecord[] tmp = new ExternalNameRecord[_externalNameRecords.Length + 1];\r\n    Array.Copy(_externalNameRecords, 0, tmp, 0, _externalNameRecords.Length);\r\n    tmp[tmp.Length - 1] = rec;\r\n    _externalNameRecords = tmp;\r\n    return _externalNameRecords.Length - 1;\r\n}", "public virtual DescribePrincipalIdFormatResponse DescribePrincipalIdFormat(DescribePrincipalIdFormatRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribePrincipalIdFormatRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribePrincipalIdFormatResponseUnmarshaller.Instance;\r\n    return Invoke<DescribePrincipalIdFormatResponse>(request, options);\r\n}", "public virtual ListPartnerEventSourceAccountsResponse ListPartnerEventSourceAccounts(ListPartnerEventSourceAccountsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListPartnerEventSourceAccountsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListPartnerEventSourceAccountsResponseUnmarshaller.Instance;\r\n    return Invoke<ListPartnerEventSourceAccountsResponse>(request, options);\r\n}", "public virtual FilePath GetFile() {\r\n    return file;\r\n}", "public override void onChanged() {\r\n    this._enclosing.refreshExpGroupMetadataList(true, true);\r\n    this._enclosing.notifyDataSetChanged();\r\n}", "public virtual string GetTextAsString() {\r\n    if(this.m_text == null)return null;\r\n    elsereturn this.m_text.ToString();\r\n}", "public virtual java.nio.LongBuffer put(long[] src, int srcOffset, int longCount) {\r\n    java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, longCount);\r\n    if(longCount > remaining()) {\r\n        throw new java.nio.BufferOverflowException();\r\n    }{\r\n        for(int i = srcOffset; i < srcOffset + longCount; ++i) {\r\n            put(src[i]);\r\n        }\r\n    }\r\n    return this;\r\n}", "public virtual bool remove(object o) {\r\n    lock(this) {\r\n        int index = indexOf(o);\r\n        if(index == -1) {\r\n            return false;\r\n        }\r\n        remove(index);\r\n        return true;\r\n    }\r\n}", "public override long Length() {\r\n    if(onDiskFile == null) {\r\n        return base.Length();\r\n    }\r\n    return onDiskFile.Length();\r\n}", "public FieldBoostMapFCListener(QueryConfigHandler config) {\r\n    this.config = config;\r\n}", "public virtual StartActivityStreamResponse StartActivityStream(StartActivityStreamRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StartActivityStreamRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StartActivityStreamResponseUnmarshaller.Instance;\r\n    return Invoke<StartActivityStreamResponse>(request, options);\r\n}", "public virtual Hyphenation Hyphenate(string word, int remainCharCount, int pushCharCount) {\r\n    char[] w = word.ToCharArray();\r\n    return Hyphenate(w, 0, w.Length, remainCharCount, pushCharCount);\r\n}", "public virtual CreateSmsTemplateResponse CreateSmsTemplate(CreateSmsTemplateRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateSmsTemplateRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateSmsTemplateResponseUnmarshaller.Instance;\r\n    return Invoke<CreateSmsTemplateResponse>(request, options);\r\n}", "public virtual void clear() {\r\n    int n = mSize;\r\n    object[] values = mValues;\r\n    {\r\n        for(int i = 0; i < n; i++) {\r\n            values[i] = null;\r\n        }\r\n    }\r\n    mSize = 0;\r\n    mGarbage = false;\r\n}", "public virtual string ToStringTree(Parser parser) {\r\n    return ToString();\r\n}", "public override long Get(int index) {\r\n    int o = (int)((uint)index >> 2);\r\n    int b = index & 3;\r\n    int shift = b << 4;\r\n    return ((long)((ulong)blocks[o] >> shift)) & 65535L;\r\n}", "public override string ToString() {\r\n    return GetType().ToString() + \": \" + GetOldId().Name + \" \" + GetNewId().Name + \" \"+ GetRefName();\r\n}", "public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval text, ValueEval number_times) {\r\n    ValueEval veText1;\r\n    try {\r\n        veText1 = OperandResolver.GetSingleValue(text, srcRowIndex, srcColumnIndex);\r\n    } catch(EvaluationException e) {\r\n        return e.GetErrorEval();\r\n    }\r\n    String strText1 = OperandResolver.CoerceValueToString(veText1);\r\n    double numberOfTime = 0;\r\n    try {\r\n        numberOfTime = OperandResolver.CoerceValueToDouble(number_times);\r\n    } catch(EvaluationException) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    int numberOfTimeInt = (int)numberOfTime;\r\n    StringBuilder strb = new StringBuilder(strText1.Length * numberOfTimeInt);\r\n    for(int i = 0; i < numberOfTimeInt; i++) {\r\n        strb.Append(strText1);\r\n    }\r\n    if(strb.ToString().Length > 32767) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return new StringEval(strb.ToString());\r\n}", "public java.util.MapClass.Entry<K, V> lastEntry() {\r\n    return this._enclosing.immutableCopy(this.endpoint(false));\r\n}", "public virtual DeleteEvaluationResponse DeleteEvaluation(DeleteEvaluationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteEvaluationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteEvaluationResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteEvaluationResponse>(request, options);\r\n}", "public ContinueRecord(RecordInputStream in1) {\r\n    field_1_data = in1.ReadRemainder();\r\n}", "public virtual CreateFilterResponse CreateFilter(CreateFilterRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateFilterRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateFilterResponseUnmarshaller.Instance;\r\n    return Invoke<CreateFilterResponse>(request, options);\r\n}", "public override java.lang.CharSequence SubSequence(int start, int end) {\r\n    checkStartEndRemaining(start, end);\r\n    java.nio.CharBuffer result = duplicate();\r\n    result.limit(_position + end);\r\n    result.position(_position + start);\r\n    return result;\r\n}", "public virtual CreateTrafficMirrorSessionResponse CreateTrafficMirrorSession(CreateTrafficMirrorSessionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateTrafficMirrorSessionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateTrafficMirrorSessionResponseUnmarshaller.Instance;\r\n    return Invoke<CreateTrafficMirrorSessionResponse>(request, options);\r\n}", "public virtual CreateNodegroupResponse CreateNodegroup(CreateNodegroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateNodegroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateNodegroupResponseUnmarshaller.Instance;\r\n    return Invoke<CreateNodegroupResponse>(request, options);\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new SoraniStemFilter(input);\r\n}", "public virtual UpdateCustomVerificationEmailTemplateResponse UpdateCustomVerificationEmailTemplate(UpdateCustomVerificationEmailTemplateRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateCustomVerificationEmailTemplateRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateCustomVerificationEmailTemplateResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateCustomVerificationEmailTemplateResponse>(request, options);\r\n}", "public static FormulaError ForInt(int type) {\r\n    if(imap.ContainsKey(type))return imap[type];\r\n    if(bmap.ContainsKey((byte)type))return bmap[(byte)type];\r\n    throw new ArgumentException(\"Unknown error type: \" + type);\r\n}", "public virtual DeleteSubnetGroupResponse DeleteSubnetGroup(DeleteSubnetGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteSubnetGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteSubnetGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteSubnetGroupResponse>(request, options);\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder(64);\r\n    sb.Append(GetType().Name).Append(\" [\");\r\n    sb.Append(_error.String);\r\n    sb.Append(\"]\");\r\n    return sb.ToString();\r\n}", "public override object ToObject() {\r\n    return Exists ? (object)Value : null;\r\n}", "public override void Destroy() {\r\n    base.Destroy();\r\n    if(onDiskFile != null) {\r\n        try {\r\n            if(!onDiskFile.Delete()) {\r\n                onDiskFile.DeleteOnExit();\r\n            }\r\n        }\r\n        finally{onDiskFile = null;}\r\n    }\r\n}", "public virtual DecreaseReplicationFactorResponse DecreaseReplicationFactor(DecreaseReplicationFactorRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DecreaseReplicationFactorRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DecreaseReplicationFactorResponseUnmarshaller.Instance;\r\n    return Invoke<DecreaseReplicationFactorResponse>(request, options);\r\n}", "public Counta() {\r\n    _predicate = defaultPredicate;\r\n}", "public IEvaluationWorkbook GetWorkbook() {\r\n    return _workbook;\r\n}", "public virtual DescribeRouteTablesResponse DescribeRouteTables() {\r\n    return DescribeRouteTables(new DescribeRouteTablesRequest());\r\n}", "public virtual CreateAssessmentTemplateResponse CreateAssessmentTemplate(CreateAssessmentTemplateRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateAssessmentTemplateRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateAssessmentTemplateResponseUnmarshaller.Instance;\r\n    return Invoke<CreateAssessmentTemplateResponse>(request, options);\r\n}", "public virtual DeleteProjectResponse DeleteProject(DeleteProjectRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteProjectRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteProjectResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteProjectResponse>(request, options);\r\n}", "public DeleteUserPolicyRequest(string userName, string policyName) {\r\n    _userName = userName;\r\n    _policyName = policyName;\r\n}", "public override object Clone() {\r\n    return new CompressingTermVectorsReader(this);\r\n}", "public override void Close() {\r\n    if(sock != null) {\r\n        try {\r\n            sch.ReleaseSession(sock);\r\n        }\r\n        finally{sock = null;}\r\n    }\r\n}", "public override java.nio.LongBuffer put(long c) {\r\n    throw new java.nio.ReadOnlyBufferException();\r\n}", "public int Serialize(int offset, byte[] data) {\r\n    int pos = 0;\r\n    SSTRecord sst = null;\r\n    int sstPos = 0;\r\n    bool wroteBoundSheets = false;\r\n    for(int k = 0; k < records.Count; k++) {\r\n        Record record = records[k];\r\n        if(record.Sid != RecalcIdRecord.sid || ((RecalcIdRecord)record).IsNeeded) {\r\n            int len = 0;\r\n            if(record is SSTRecord) {\r\n                sst = (SSTRecord)record;\r\n                sstPos = pos;\r\n            }\r\n            if(record.Sid == ExtSSTRecord.sid && sst != null) {\r\n                record = sst.CreateExtSSTRecord(sstPos + offset);\r\n            }\r\n            if(record is BoundSheetRecord) {\r\n                if(!wroteBoundSheets) {\r\n                    for(int i = 0; i < boundsheets.Count; i++) {\r\n                        len += ((BoundSheetRecord)boundsheets[i]).Serialize(pos + offset + len, data);\r\n                    }\r\n                    wroteBoundSheets = true;\r\n                }\r\n            } else {\r\n                len = record.Serialize(pos + offset, data);\r\n            }\r\n            pos += len;\r\n        }\r\n    }\r\n    return pos;\r\n}", "public virtual DescribeClusterSecurityGroupsResponse DescribeClusterSecurityGroups() {\r\n    return DescribeClusterSecurityGroups(new DescribeClusterSecurityGroupsRequest());\r\n}", "public virtual Explanation Explain(int doc, Explanation freq) {\r\n    Explanation result = new Explanation(Score(doc, freq.Value), \"score(doc=\" + doc + \",freq=\" + freq.Value + \"), with freq of:\");\r\n    result.AddDetail(freq);\r\n    return result;\r\n}", "public virtual DisassociatePhoneNumberFromUserResponse DisassociatePhoneNumberFromUser(DisassociatePhoneNumberFromUserRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisassociatePhoneNumberFromUserRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisassociatePhoneNumberFromUserResponseUnmarshaller.Instance;\r\n    return Invoke<DisassociatePhoneNumberFromUserResponse>(request, options);\r\n}", "public virtual bool Has(AnyObjectId objectId, int typeHint) {\r\n    try {\r\n        Open(objectId, typeHint);\r\n        return true;\r\n    } catch(MissingObjectException) {\r\n        return false;\r\n    }\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[ATTACHEDLABEL]\\n\");\r\n    buffer.Append(\"    .formatFlags          = \").Append(\"0x\").Append(HexDump.ToHex(FormatFlags)).Append(\" (\").Append(FormatFlags).Append(\" )\");\r\n    buffer.Append(Environment.NewLine);\r\n    buffer.Append(\"         .showActual               = \").Append(IsShowActual).Append('\\n');\r\n    buffer.Append(\"         .showPercent              = \").Append(IsShowPercent).Append('\\n');\r\n    buffer.Append(\"         .labelAsPercentage        = \").Append(IsLabelAsPercentage).Append('\\n');\r\n    buffer.Append(\"         .smoothedLine             = \").Append(IsSmoothedLine).Append('\\n');\r\n    buffer.Append(\"         .showLabel                = \").Append(IsShowLabel).Append('\\n');\r\n    buffer.Append(\"         .showBubbleSizes          = \").Append(IsShowBubbleSizes).Append('\\n');\r\n    buffer.Append(\"[/ATTACHEDLABEL]\\n\");\r\n    return buffer.ToString();\r\n}", "public override string ToString(string field) {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"spanOr([\");\r\n    bool first = true;\r\n    foreach(SpanQuery clause in clauses) {\r\n        if(!first) buffer.Append(\", \");\r\n        buffer.Append(clause.ToString(field));\r\n        first = false;\r\n    }\r\n    buffer.Append(\"])\");\r\n    buffer.Append(ToStringUtils.Boost(Boost));\r\n    return buffer.ToString();\r\n}", "public virtual DisableInsightRulesResponse DisableInsightRules(DisableInsightRulesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisableInsightRulesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisableInsightRulesResponseUnmarshaller.Instance;\r\n    return Invoke<DisableInsightRulesResponse>(request, options);\r\n}", "public BootstrapActionConfig NewRunIf(string condition, BootstrapActionConfig config) {\r\n    List<string> args = config.ScriptBootstrapAction.Args;\r\n    args.Add(condition);\r\n    args.Add(config.ScriptBootstrapAction.Path);\r\n    return new BootstrapActionConfig{Name = \"Run If, \" + config.Name,ScriptBootstrapAction = new ScriptBootstrapActionConfig{Path = \"s3:Args = args}};}", "public sealed override java.nio.CharBuffer get(char[] dst, int dstOffset, int charCount) {\r\n    java.util.Arrays.checkOffsetAndCount(dst.Length, dstOffset, charCount);\r\n    if(charCount > remaining()) {\r\n        throw new java.nio.BufferUnderflowException();\r\n    }\r\n    int newPosition = _position + charCount;\r\n    Sharpen.StringHelper.GetCharsForString(sequence.ToString(), _position, newPosition, dst, dstOffset);\r\n    _position = newPosition;\r\n    return this;\r\n}", "public virtual ICollection<string> GetNames(string section, string subsection) {\r\n    return GetState().GetNames(section, subsection);\r\n}", "public virtual CreateBrokerResponse CreateBroker(CreateBrokerRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateBrokerRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateBrokerResponseUnmarshaller.Instance;\r\n    return Invoke<CreateBrokerResponse>(request, options);\r\n}", "public virtual void onAbsorb(int velocity) {\r\n    mState = STATE_ABSORB;\r\n    velocity = System.Math.Max(MIN_VELOCITY, System.Math.Abs(velocity));\r\n    mStartTime = android.view.animation.AnimationUtils.currentAnimationTimeMillis();\r\n    mDuration = 0.1f + (velocity * 0.03f);\r\n    mEdgeAlphaStart = 0.0f;\r\n    mEdgeScaleY = mEdgeScaleYStart = 0.0f;\r\n    mGlowAlphaStart = 0.5f;\r\n    mGlowScaleYStart = 0.0f;\r\n    mEdgeAlphaFinish = System.Math.Max(0, System.Math.Min(velocity * VELOCITY_EDGE_FACTOR, 1));\r\n    mEdgeScaleYFinish = System.Math.Max(HELD_EDGE_SCALE_Y, System.Math.Min(velocity *VELOCITY_EDGE_FACTOR, 1.0f));\r\n    mGlowScaleYFinish = System.Math.Min(0.025f + (velocity * (velocity / 100) * 0.00015f), 1.75f);\r\n    mGlowAlphaFinish = System.Math.Max(mGlowAlphaStart, System.Math.Min(velocity * VELOCITY_GLOW_FACTOR* .00001f, MAX_ALPHA));\r\n}", "public virtual ListSuppressedDestinationsResponse ListSuppressedDestinations(ListSuppressedDestinationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListSuppressedDestinationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListSuppressedDestinationsResponseUnmarshaller.Instance;\r\n    return Invoke<ListSuppressedDestinationsResponse>(request, options);\r\n}", "public virtual IList<Tuple<K, V>> GetPairs() {\r\n    IList<Tuple<K, V>> pairs = new ArrayList<Tuple<K, V>>();\r\n    foreach(KeyValuePair<K, IList<V>> pair in this) {\r\n        foreach(V value in pair.Value) {\r\n            pairs.Add(Tuple.Create(pair.Key, value));\r\n        }\r\n    }\r\n    return pairs;\r\n}", "public override void SetParams(string @params) {\r\n    base.SetParams(@params);\r\n    int k = @params.IndexOf(',');\r\n    name = @params.Substring(0, k - 0).Trim();\r\n    value = @params.Substring(k + 1).Trim();\r\n}", "public override V put(K key, V value) {\r\n    if(!this.isInBounds(key)) {\r\n        throw this.outOfBounds(key, this.fromBound, this.toBound);\r\n    }\r\n    return this._enclosing.putInternal(key, value);\r\n}", "public DeregisterImageRequest(string imageId) {\r\n    _imageId = imageId;\r\n}", "public virtual GetApplicationResponse GetApplication(GetApplicationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetApplicationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetApplicationResponseUnmarshaller.Instance;\r\n    return Invoke<GetApplicationResponse>(request, options);\r\n}", "public virtual DescribeProblemObservationsResponse DescribeProblemObservations(DescribeProblemObservationsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeProblemObservationsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeProblemObservationsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeProblemObservationsResponse>(request, options);\r\n}", "public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) {\r\n    int bytesAfterHeader = ReadHeader(data, offset);\r\n    int pos = offset + HEADER_SIZE;\r\n    field_1_UID = new byte[16];\r\n    Array.Copy(data, pos, field_1_UID, 0, 16);\r\n    pos += 16;\r\n    field_2_marker = data[pos];\r\n    pos++;\r\n    field_pictureData = new byte[bytesAfterHeader - 17];\r\n    Array.Copy(data, pos, field_pictureData, 0, field_pictureData.Length);\r\n    return bytesAfterHeader + HEADER_SIZE;\r\n}", "public static bool EndsWith(BytesRef @ref, BytesRef suffix) {\r\n    return SliceEquals(@ref, suffix, @ref.Length - suffix.Length);\r\n}", "public virtual DeleteOptionGroupResponse DeleteOptionGroup(DeleteOptionGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteOptionGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteOptionGroupResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteOptionGroupResponse>(request, options);\r\n}", "public static String GetFromUnicodeLE(byte[] str) {\r\n    if(str.Length == 0) {\r\n        return \"\";\r\n    }\r\n    return GetFromUnicodeLE(str, 0, str.Length / 2);\r\n}", "public CellRangeAddressList() {\r\n    _list = new ArrayList();\r\n}", "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    throw new NotImplementedFunctionException(_functionName);\r\n}", "public virtual DescribeOptionGroupsResponse DescribeOptionGroups() {\r\n    return DescribeOptionGroups(new DescribeOptionGroupsRequest());\r\n}", "public virtual DisableVpcClassicLinkResponse DisableVpcClassicLink(DisableVpcClassicLinkRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DisableVpcClassicLinkRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DisableVpcClassicLinkResponseUnmarshaller.Instance;\r\n    return Invoke<DisableVpcClassicLinkResponse>(request, options);\r\n}", "public override string ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[SXIDSTM]\\n\");\r\n    buffer.Append(\"    .idstm      =\").Append(HexDump.ShortToHex(idstm)).Append('\\n');\r\n    buffer.Append(\"[/SXIDSTM]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual ListStackInstancesResponse ListStackInstances(ListStackInstancesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListStackInstancesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListStackInstancesResponseUnmarshaller.Instance;\r\n    return Invoke<ListStackInstancesResponse>(request, options);\r\n}", "public virtual DescribeCompanyNetworkConfigurationResponse DescribeCompanyNetworkConfiguration(DescribeCompanyNetworkConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCompanyNetworkConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCompanyNetworkConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCompanyNetworkConfigurationResponse>(request, options);\r\n}", "public java.nio.charset.CoderResult flush(java.nio.CharBuffer @out) {\r\n    if(status != END && status != INIT) {\r\n        throw new System.InvalidOperationException();\r\n    }\r\n    java.nio.charset.CoderResult result = implFlush(@out);\r\n    if(result == java.nio.charset.CoderResult.UNDERFLOW) {\r\n        status = FLUSH;\r\n    }\r\n    return result;\r\n}", "public virtual DescribeDBClustersResponse DescribeDBClusters(DescribeDBClustersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDBClustersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDBClustersResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDBClustersResponse>(request, options);\r\n}", "public virtual GetDocumentVersionResponse GetDocumentVersion(GetDocumentVersionRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetDocumentVersionRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetDocumentVersionResponseUnmarshaller.Instance;\r\n    return Invoke<GetDocumentVersionResponse>(request, options);\r\n}", "public override TermData Subtract(TermData t1, TermData t2) {\r\n    if(Equals(t2, NO_OUTPUT))return t1;\r\n    Debug.Assert(t1.longs.Length == t2.longs.Length);\r\n    int pos = 0;\r\n    long diff = 0;\r\n    var share = new long[_longsSize];\r\n    while(pos < _longsSize) {\r\n        share[pos] = t1.longs[pos] - t2.longs[pos];\r\n        diff += share[pos];\r\n        pos++;\r\n    }\r\n    TermData ret;\r\n    if(diff == 0 && StatsEqual(t1, t2) && BytesEqual(t1, t2)) {\r\n        ret = NO_OUTPUT;\r\n    } else {\r\n        ret = new TermData(share, t1.bytes, t1.docFreq, t1.totalTermFreq);\r\n    }\r\n    return ret;\r\n}", "public virtual ModifyCapacityReservationResponse ModifyCapacityReservation(ModifyCapacityReservationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ModifyCapacityReservationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ModifyCapacityReservationResponseUnmarshaller.Instance;\r\n    return Invoke<ModifyCapacityReservationResponse>(request, options);\r\n}", "public virtual int size() {\r\n    lock(mutex) {\r\n        return c.size();\r\n    }\r\n}", "public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {\r\n    for(int j = 0; j < iterations; ++j) {\r\n        values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;\r\n    }\r\n}", "public virtual int length() {\r\n    if(this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {\r\n        return this._length;\r\n    }\r\n    throw new System.NotSupportedException(\"length meaningless for \" + ToString());\r\n}", "public override String ToFormulaString() {\r\n    throw Invalid();\r\n}", "public E next() {\r\n    if(iterator.nextIndex() < end) {\r\n        return iterator.next();\r\n    }\r\n    throw new java.util.NoSuchElementException();\r\n}", "public static string ToHex(byte value) {\r\n    return ToHex((long)value, 2);\r\n}", "public override long Get(int index) {\r\n    int o = (int)((uint)index >> 6);\r\n    int b = index & 63;\r\n    int shift = b << 0;\r\n    return ((long)((ulong)blocks[o] >> shift)) & 1L;\r\n}", "public override int[] Clear() {\r\n    start = end = null;\r\n    return base.Clear();\r\n}", "public virtual TokenStream Init(TokenStream tokenStream) {\r\n    termAtt = tokenStream.AddAttribute<ICharTermAttribute>();\r\n    return null;\r\n}", "public virtual UpdateGameServerGroupResponse UpdateGameServerGroup(UpdateGameServerGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateGameServerGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateGameServerGroupResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateGameServerGroupResponse>(request, options);\r\n}", "public UnmappableCharacterException(int length) {\r\n    this.inputLength = length;\r\n}", "public virtual UpdateIdentityProviderConfigurationResponse UpdateIdentityProviderConfiguration(UpdateIdentityProviderConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateIdentityProviderConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateIdentityProviderConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateIdentityProviderConfigurationResponse>(request, options);\r\n}", "public override int lastIndexOf(object @object) {\r\n    if(@object != null) {\r\n        {\r\n            for(int i = a.Length - 1; i >= 0; i--) {\r\n                if(@object.Equals(a[i])) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            for(int i = a.Length - 1; i >= 0; i--) {\r\n                if((object)a[i] == null) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}", "public ConstantScoreQueryBuilder(FilterBuilderFactory filterFactory) {\r\n    this.filterFactory = filterFactory;\r\n}", "public virtual int GetNumberOfOnChannelTokens() {\r\n    int n = 0;\r\n    Fill();\r\n    for(int i = 0; i < tokens.Count; i++) {\r\n        IToken t = tokens[i];\r\n        if(t.Channel == channel) {\r\n            n++;\r\n        }\r\n        if(t.Type == TokenConstants.EOF) {\r\n            break;\r\n        }\r\n    }\r\n    return n;\r\n}", "public POIFSDocumentPath(string[] components) {\r\n    if(components == null) {\r\n        this.components = new string[0];\r\n    } else {\r\n        this.components = new string[components.Length];\r\n        for(int i = 0; i < components.Length; i++) {\r\n            if((components[i] == null)|| (components[i].Length == 0)) {\r\n                throw new ArgumentException(\"components cannot contain null or empty strings\");\r\n            }\r\n            this.components[i] = components[i];\r\n        }\r\n    }\r\n}", "public SQLException(string error) : base(error) {\r\n    throw new System.NotImplementedException();\r\n}", "public virtual ListFragmentsResponse ListFragments(ListFragmentsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = ListFragmentsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = ListFragmentsResponseUnmarshaller.Instance;\r\n    return Invoke<ListFragmentsResponse>(request, options);\r\n}", "public virtual IQueryBuilder GetQueryBuilder(string nodeName) {\r\n    IQueryBuilder result;\r\n    builders.TryGetValue(nodeName, out result);\r\n    return result;\r\n}", "public virtual CreateDirectoryResponse CreateDirectory(CreateDirectoryRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDirectoryRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDirectoryResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDirectoryResponse>(request, options);\r\n}", "public int GetExternalSheetIndex(String workbookName, String sheetName) {\r\n    return OrCreateLinkTable.GetExternalSheetIndex(workbookName, sheetName, sheetName);\r\n}", "public virtual V getValue() {\r\n    return value;\r\n}", "public virtual K getKey() {\r\n    return key;\r\n}", "public bool hasTransparentBounds() {\r\n    return transparentBounds;\r\n}", "public virtual void SetKeepEmpty(bool empty) {\r\n    keepEmpty = empty;\r\n}", "public XPathRuleAnywhereElement(string ruleName, int ruleIndex): base(ruleName) {\r\n    this.ruleIndex = ruleIndex;\r\n}", "public int GetHeight() {\r\n    return height;\r\n}", "public void Write(OpenStringBuilder arr) {\r\n    Write(arr.m_buf, 0, arr.Length);\r\n}", "public override void jumpDrawablesToCurrentState() {\r\n    base.jumpDrawablesToCurrentState();\r\n    if(mThumb != null) {\r\n        mThumb.jumpToCurrentState();\r\n    }\r\n}", "public override void SetParams(string @params) {\r\n    base.SetParams(@params);\r\n    StreamTokenizer stok = new StreamTokenizer(new StringReader(@params));\r\n    stok.QuoteChar('\"');\r\n    stok.QuoteChar('\\'');\r\n    stok.EndOfLineIsSignificant = false;\r\n    stok.OrdinaryChar(',');\r\n    try {\r\n        while(stok.NextToken() != StreamTokenizer.TokenType_EndOfStream) {\r\n            switch(stok.TokenType) {\r\n            case ',': {\r\n                break;\r\n            }\r\n            case '\\'':\r\n            case '\\\"':\r\n            case StreamTokenizer.TokenType_Word: {\r\n                analyzerNames.Add(stok.StringValue);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Exception(\"Unexpected token: \" + stok.ToString());\r\n            }\r\n            }\r\n        }\r\n    } catch(Exception e) {\r\n        if(e.Message.StartsWith(\"Line #\", StringComparison.Ordinal)) {\r\n            throw;\r\n        } else {\r\n            throw new Exception(\"Line #\" + (stok.LineNumber + AlgLineNum) + \": \", e);\r\n        }\r\n    }\r\n}", "public virtual DescribeVolumesResponse DescribeVolumes(DescribeVolumesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeVolumesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeVolumesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeVolumesResponse>(request, options);\r\n}", "public virtual DescribeFlowLogsResponse DescribeFlowLogs(DescribeFlowLogsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeFlowLogsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeFlowLogsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeFlowLogsResponse>(request, options);\r\n}", "public virtual UpdateMethodResponse UpdateMethod(UpdateMethodRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateMethodRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateMethodResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateMethodResponse>(request, options);\r\n}", "public GetAuthorizationTokenRequest(): base(\"cr\", \"2016-06-07\", \"GetAuthorizationToken\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/tokens\";\r\n    Method = MethodType.GET;\r\n}", "public virtual StopContactResponse StopContact(StopContactRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = StopContactRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = StopContactResponseUnmarshaller.Instance;\r\n    return Invoke<StopContactResponse>(request, options);\r\n}", "public virtual CreateDataSetResponse CreateDataSet(CreateDataSetRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDataSetRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDataSetResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDataSetResponse>(request, options);\r\n}", "public virtual NGit.ObjectDatabase NewCachedDatabase() {\r\n    return this;\r\n}", "public virtual CreateJourneyResponse CreateJourney(CreateJourneyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateJourneyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateJourneyResponseUnmarshaller.Instance;\r\n    return Invoke<CreateJourneyResponse>(request, options);\r\n}", "public virtual DeleteDashboardsResponse DeleteDashboards(DeleteDashboardsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteDashboardsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteDashboardsResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteDashboardsResponse>(request, options);\r\n}", "public UpgradeIndexMergePolicy(MergePolicy @base) {\r\n    this.m_base = @base;\r\n}", "public virtual GetHealthCheckCountResponse GetHealthCheckCount(GetHealthCheckCountRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetHealthCheckCountRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetHealthCheckCountResponseUnmarshaller.Instance;\r\n    return Invoke<GetHealthCheckCountResponse>(request, options);\r\n}", "public ChartStartBlockRecord(RecordInputStream in1) {\r\n    rt = in1.ReadShort();\r\n    grbitFrt = in1.ReadShort();\r\n    iObjectKind = in1.ReadShort();\r\n    iObjectContext = in1.ReadShort();\r\n    iObjectInstance1 = in1.ReadShort();\r\n    iObjectInstance2 = in1.ReadShort();\r\n}", "public SeriesRecord(RecordInputStream in1) {\r\n    field_1_categoryDataType = in1.ReadShort();\r\n    field_2_valuesDataType = in1.ReadShort();\r\n    field_3_numCategories = in1.ReadShort();\r\n    field_4_numValues = in1.ReadShort();\r\n    field_5_bubbleSeriesType = in1.ReadShort();\r\n    field_6_numBubbleValues = in1.ReadShort();\r\n}", "public static Type LookupClass(string name) {\r\n    return loader.LookupClass(name);\r\n}", "public virtual GetPublicKeyResponse GetPublicKey(GetPublicKeyRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetPublicKeyRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetPublicKeyResponseUnmarshaller.Instance;\r\n    return Invoke<GetPublicKeyResponse>(request, options);\r\n}", "public virtual CreateLocalGatewayRouteTableVpcAssociationResponse CreateLocalGatewayRouteTableVpcAssociation(CreateLocalGatewayRouteTableVpcAssociationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateLocalGatewayRouteTableVpcAssociationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateLocalGatewayRouteTableVpcAssociationResponseUnmarshaller.Instance;\r\n    return Invoke<CreateLocalGatewayRouteTableVpcAssociationResponse>(request, options);\r\n}", "public static bool ToBoolean(string stringValue) {\r\n    if(stringValue == null) {\r\n        throw new ArgumentNullException(JGitText.Get().expectedBooleanStringValue);\r\n    }\r\n    bool? @bool = ToBooleanOrNull(stringValue);\r\n    if(@bool == null) {\r\n        throw new ArgumentException(MessageFormat.Format(JGitText.Get().notABoolean, stringValue));\r\n    }\r\n    return @bool.Value;\r\n}", "public virtual ICollection<string> GetAdded() {\r\n    return Sharpen.Collections.UnmodifiableSet(diff.GetAdded());\r\n}", "public virtual ICollection<string> GetNames(string section) {\r\n    return GetNames(section, null);\r\n}", "public virtual DescribeCacheClustersResponse DescribeCacheClusters(DescribeCacheClustersRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeCacheClustersRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeCacheClustersResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeCacheClustersResponse>(request, options);\r\n}", "public virtual IList<string> GetUnmergedPaths() {\r\n    return unmergedPaths;\r\n}", "public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) {\r\n    if(args.Length != 2) {\r\n        return ErrorEval.VALUE_INVALID;\r\n    }\r\n    return Evaluate(ec.RowIndex, ec.ColumnIndex, args[0], args[1]);\r\n}", "public int AddString(UnicodeString str) {\r\n    field_1_num_strings++;\r\n    UnicodeString ucs = (str == null) ? EMPTY_STRING: str;\r\n    int rval;\r\n    int index = field_3_strings.GetIndex(ucs);\r\n    if(index != -1) {\r\n        rval = index;\r\n    } else {\r\n        rval = field_3_strings.Size;\r\n        field_2_num_unique_strings++;\r\n        SSTDeserializer.AddToStringTable(field_3_strings, ucs);\r\n    }\r\n    return rval;\r\n}", "public virtual long GetDeltaSearchMemoryLimit() {\r\n    return deltaSearchMemoryLimit;\r\n}", "public override string ToString() {\r\n    return \"Token(\\\"\" + new string(surfaceForm, offset, length) + \"\\\" pos=\" + position + \" length=\" + length +\" posLen=\" + positionLength + \" type=\" + type + \" wordId=\" + wordId +\" leftID=\" + dictionary.GetLeftId(wordId) + \")\";\r\n}", "public String ToFormulaString(IFormulaRenderingWorkbook book) {\r\n    return ExternSheetNameResolver.PrependSheetName(book, field_1_index_extern_sheet, FormatReferenceAsString());\r\n}", "public virtual E get(int index) {\r\n    return (E)elements[index];\r\n}", "public override byte[] GetCachedBytes() {\r\n    return data;\r\n}", "public virtual DescribeConnectionsResponse DescribeConnections() {\r\n    return DescribeConnections(new DescribeConnectionsRequest());\r\n}", "public virtual void ensureCapacity(int minimumCapacity) {\r\n    object[] a = array;\r\n    if(a.Length < minimumCapacity) {\r\n        object[] newArray = new object[minimumCapacity];\r\n        System.Array.Copy(a, 0, newArray, 0, _size);\r\n        array = newArray;\r\n        modCount++;\r\n    }\r\n}", "public virtual DeleteLifecycleHookResponse DeleteLifecycleHook(DeleteLifecycleHookRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteLifecycleHookRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteLifecycleHookResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteLifecycleHookResponse>(request, options);\r\n}", "public float maxBytesPerChar() {\r\n    return _maxBytesPerChar;\r\n}", "public BlankCellRectangleGroup(int firstRowIndex, int firstColumnIndex, int lastColumnIndex) {\r\n    _firstRowIndex = firstRowIndex;\r\n    _firstColumnIndex = firstColumnIndex;\r\n    _lastColumnIndex = lastColumnIndex;\r\n    _lastRowIndex = firstRowIndex;\r\n}", "public int FindEndOfRowOutlineGroup(int row) {\r\n    int level = GetRow(row).OutlineLevel;\r\n    int currentRow;\r\n    for(currentRow = row; currentRow < this.LastRowNum; currentRow++) {\r\n        if(GetRow(currentRow) == null || GetRow(currentRow).OutlineLevel < level) {\r\n            break;\r\n        }\r\n    }\r\n    return currentRow - 1;\r\n}", "public virtual string getEncoding() {\r\n    if(encoder == null) {\r\n        return null;\r\n    }\r\n    return java.io.HistoricalCharsetNames.get(encoder.charset());\r\n}", "public void ClearAllCachedResultValues() {\r\n    _cache.Clear();\r\n    _sheetIndexesBySheet.Clear();\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    String recordName = this.RecordName;\r\n    sb.Append(\"[\").Append(recordName).Append(\"]\\n\");\r\n    sb.Append(\"    .row    = \").Append(HexDump.ShortToHex(Row)).Append(\"\\n\");\r\n    sb.Append(\"    .col    = \").Append(HexDump.ShortToHex(Column)).Append(\"\\n\");\r\n    if(IsBiff2) {\r\n        sb.Append(\"    .cellattrs = \").Append(HexDump.ShortToHex(CellAttrs)).Append(\"\\n\");\r\n    } else {\r\n        sb.Append(\"    .xFindex   = \").Append(HexDump.ShortToHex(XFIndex)).Append(\"\\n\");\r\n    }\r\n    AppendValueText(sb);\r\n    sb.Append(\"\\n\");\r\n    sb.Append(\"[/\").Append(recordName).Append(\"]\\n\");\r\n    return sb.ToString();\r\n}", "public virtual DescribeDBClusterEndpointsResponse DescribeDBClusterEndpoints(DescribeDBClusterEndpointsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeDBClusterEndpointsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeDBClusterEndpointsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeDBClusterEndpointsResponse>(request, options);\r\n}", "public bool RenameTo(String newName) {\r\n    bool rval = false;\r\n    if(!IsRoot) {\r\n        rval = _parent.ChangeName(Name, newName);\r\n    }\r\n    return rval;\r\n}", "public override Explanation Explain(int doc, Explanation freq) {\r\n    Explanation expl = new Explanation(Score(doc, freq.Value), \"sum of:\");\r\n    foreach(SimScorer subScorer in subScorers) {\r\n        expl.AddDetail(subScorer.Explain(doc, freq));\r\n    }\r\n    return expl;\r\n}", "public DocTermsIndexDocValues(ValueSource vs, AtomicReaderContext context, string field) {\r\n    try {\r\n        m_termsIndex = FieldCache.DEFAULT.GetTermsIndex(context.AtomicReader, field);\r\n    } catch(Exception e) {\r\n        throw new DocTermsIndexException(field, e);\r\n    }\r\n    this.m_vs = vs;\r\n}", "public static int CompareTo(Ref o1, string o2) {\r\n    return Sharpen.Runtime.CompareOrdinal(o1.GetName(), o2);\r\n}", "public Size GetImageDimension() {\r\n    InternalWorkbook iwb = (_patriarch.Sheet.Workbook as HSSFWorkbook).Workbook;\r\n    EscherBSERecord bse = iwb.GetBSERecord(PictureIndex);\r\n    byte[] data = bse.BlipRecord.PictureData;\r\n    using(MemoryStream ms = new MemoryStream(data)) {\r\n        using(Image img = Image.FromStream(ms)) {\r\n            return img.Size;\r\n        }\r\n    }\r\n}", "public static double var(double[] v) {\r\n    double r = Double.NaN;\r\n    if(v != null && v.Length > 1) {\r\n        r = devsq(v) / (v.Length - 1);\r\n    }\r\n    return r;\r\n}", "public UpdateCloudFrontOriginAccessIdentityRequest(string id, string ifMatch, CloudFrontOriginAccessIdentityConfig cloudFrontOriginAccessIdentityConfig) {\r\n    _id = id;\r\n    _ifMatch = ifMatch;\r\n    _cloudFrontOriginAccessIdentityConfig = cloudFrontOriginAccessIdentityConfig;\r\n}", "public virtual NGit.Api.DiffCommand SetDestinationPrefix(string destinationPrefix) {\r\n    this.destinationPrefix = destinationPrefix;\r\n    return this;\r\n}", "public override int available() {\r\n    throw new System.NotImplementedException();\r\n}", "public SrndQuery NotQuery() {\r\n    SrndQuery q;\r\n    IList<SrndQuery> queries = null;\r\n    Token oprt = null;\r\n    q = NQuery();\r\n    while(true) {\r\n        switch((jj_ntk == -1) ? Jj_ntk() : jj_ntk) {\r\n        case RegexpToken.NOT:\r\n            ;\r\n            break;\r\n        default:\r\n            jj_la1[2] = jj_gen;\r\n            goto label_4;\r\n        }\r\n        oprt = Jj_consume_token(RegexpToken.NOT);\r\n        if(queries == null) {\r\n            queries = new List<SrndQuery>();\r\n            queries.Add(q);\r\n        }\r\n        q = NQuery();\r\n        queries.Add(q);\r\n    }\r\nlabel_4: {\r\n        if(true) return (queries == null) ? q : GetNotQuery(queries, oprt);\r\n    }\r\n    throw new Exception(\"Missing return statement in function\");\r\n}", "public override String ToString() {\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.Append(\"[\").Append(\"USERSVIEWEND\").Append(\"] (0x\");\r\n    sb.Append(StringUtil.ToHexString(sid).ToUpper() + \")\\n\");\r\n    sb.Append(\"  rawData=\").Append(HexDump.ToHex(_rawData)).Append(\"\\n\");\r\n    sb.Append(\"[/\").Append(\"USERSVIEWEND\").Append(\"]\\n\");\r\n    return sb.ToString();\r\n}", "public override java.nio.FloatBuffer asReadOnlyBuffer() {\r\n    java.nio.FloatToByteBufferAdapter buf = new java.nio.FloatToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());\r\n    buf._limit = _limit;\r\n    buf._position = _position;\r\n    buf._mark = _mark;\r\n    buf.byteBuffer._order = byteBuffer._order;\r\n    return buf;\r\n}", "public virtual LogCommand Log() {\r\n    return new LogCommand(repo);\r\n}", "public virtual CreateDomainResponse CreateDomain(CreateDomainRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = CreateDomainRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = CreateDomainResponseUnmarshaller.Instance;\r\n    return Invoke<CreateDomainResponse>(request, options);\r\n}", "public virtual int GetWeight() {\r\n    return WEIGHT_UNKNOWN;\r\n}", "public ChartStartObjectRecord(RecordInputStream in1) {\r\n    rt = in1.ReadShort();\r\n    grbitFrt = in1.ReadShort();\r\n    iObjectKind = in1.ReadShort();\r\n    iObjectContext = in1.ReadShort();\r\n    iObjectInstance1 = in1.ReadShort();\r\n    iObjectInstance2 = in1.ReadShort();\r\n}", "public virtual void remove() {\r\n    if(this.lastEntryReturned == null) {\r\n        throw new System.InvalidOperationException();\r\n    }\r\n    if(this._enclosing.modCount != this.expectedModCount) {\r\n        throw new java.util.ConcurrentModificationException();\r\n    }\r\n    this._enclosing.remove(this.lastEntryReturned.key);\r\n    this.lastEntryReturned = null;\r\n    this.expectedModCount = this._enclosing.modCount;\r\n}", "public virtual DescribeMetricCollectionTypesResponse DescribeMetricCollectionTypes(DescribeMetricCollectionTypesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeMetricCollectionTypesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeMetricCollectionTypesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeMetricCollectionTypesResponse>(request, options);\r\n}", "public virtual UpdateFieldLevelEncryptionProfileResponse UpdateFieldLevelEncryptionProfile(UpdateFieldLevelEncryptionProfileRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateFieldLevelEncryptionProfileRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateFieldLevelEncryptionProfileResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateFieldLevelEncryptionProfileResponse>(request, options);\r\n}", "public virtual Ref GetLeaf() {\r\n    return this;\r\n}", "public override int lastIndexOf(object @object) {\r\n    if(@object != null) {\r\n        {\r\n            for(int i = a.Length - 1; i >= 0; i--) {\r\n                if(@object.Equals(a[i])) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        {\r\n            for(int i = a.Length - 1; i >= 0; i--) {\r\n                if((object)a[i] == null) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}", "public DefaultBulkScorer(Scorer scorer) {\r\n    if(scorer == null) {\r\n        throw new System.NullReferenceException();\r\n    }\r\n    this.scorer = scorer;\r\n}", "public CreateRepoAuthorizationRequest(): base(\"cr\", \"2016-06-07\", \"CreateRepoAuthorization\", \"cr\", \"openAPI\") {\r\n    UriPattern = \"/repos/[RepoNamespace]/[RepoName]/authorizations\";\r\n    Method = MethodType.PUT;\r\n}", "public override TokenStream Create(TokenStream input) {\r\n    return new PortugueseLightStemFilter(input);\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[TABLESTYLES]\\n\");\r\n    buffer.Append(\"    .rt      =\").Append(HexDump.ShortToHex(rt)).Append('\\n');\r\n    buffer.Append(\"    .grbitFrt=\").Append(HexDump.ShortToHex(grbitFrt)).Append('\\n');\r\n    buffer.Append(\"    .unused  =\").Append(HexDump.ToHex(unused)).Append('\\n');\r\n    buffer.Append(\"    .cts=\").Append(HexDump.IntToHex(cts)).Append('\\n');\r\n    buffer.Append(\"    .rgchDefListStyle=\").Append(rgchDefListStyle).Append('\\n');\r\n    buffer.Append(\"    .rgchDefPivotStyle=\").Append(rgchDefPivotStyle).Append('\\n');\r\n    buffer.Append(\"[/TABLESTYLES]\\n\");\r\n    return buffer.ToString();\r\n}", "public override java.util.Enumeration<K> keys() {\r\n    lock(this) {\r\n        return new java.util.Hashtable<K, V>.KeyEnumeration(this);\r\n    }\r\n}", "public virtual DescribeInstanceTypesResponse DescribeInstanceTypes(DescribeInstanceTypesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeInstanceTypesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeInstanceTypesResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeInstanceTypesResponse>(request, options);\r\n}", "public virtual RefUpdate.Result GetResult() {\r\n    return rc;\r\n}", "public virtual UpdateBasePathMappingResponse UpdateBasePathMapping(UpdateBasePathMappingRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateBasePathMappingRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateBasePathMappingResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateBasePathMappingResponse>(request, options);\r\n}", "public virtual UpdateDocumentResponse UpdateDocument(UpdateDocumentRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = UpdateDocumentRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = UpdateDocumentResponseUnmarshaller.Instance;\r\n    return Invoke<UpdateDocumentResponse>(request, options);\r\n}", "public virtual void SetStreamFileThreshold(int newLimit) {\r\n    streamFileThreshold = newLimit;\r\n}", "public override String ToString() {\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.Append(\"[EXTSST]\\n\");\r\n    buffer.Append(\"    .streampos      = \").Append(StringUtil.ToHexString(StreamPos)).Append(\"\\n\");\r\n    buffer.Append(\"    .bucketsstoffset= \").Append(StringUtil.ToHexString(BucketSSTOffset)).Append(\"\\n\");\r\n    buffer.Append(\"    .zero           = \").Append(StringUtil.ToHexString(field_3_zero)).Append(\"\\n\");\r\n    buffer.Append(\"[/EXTSST]\\n\");\r\n    return buffer.ToString();\r\n}", "public virtual void SetCRC(int crc) {\r\n    this.crc = crc;\r\n}", "public virtual RevFilter GetRevFilter() {\r\n    return filter;\r\n}", "public SrndPrefixQuery(string prefix, bool quoted, char truncator): base(quoted) {\r\n    this.prefix = prefix;\r\n    prefixRef = new BytesRef(prefix);\r\n    this.truncator = truncator;\r\n}", "public override byte ReadByte() {\r\n    int v = _reader.ReadByte();\r\n    if(v == -1) {\r\n        throw new EndOfStreamException();\r\n    }\r\n    return (byte)v;\r\n}", "public virtual GetWorkGroupResponse GetWorkGroup(GetWorkGroupRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = GetWorkGroupRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = GetWorkGroupResponseUnmarshaller.Instance;\r\n    return Invoke<GetWorkGroupResponse>(request, options);\r\n}", "public virtual PutBlockPublicAccessConfigurationResponse PutBlockPublicAccessConfiguration(PutBlockPublicAccessConfigurationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = PutBlockPublicAccessConfigurationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = PutBlockPublicAccessConfigurationResponseUnmarshaller.Instance;\r\n    return Invoke<PutBlockPublicAccessConfigurationResponse>(request, options);\r\n}", "public override string ToString() {\r\n    StringBuilder r = new StringBuilder();\r\n    r.Append('[');\r\n    for(int i = 0; i < count; i++) {\r\n        if(i > 0) {\r\n            r.Append(\", \");\r\n        }\r\n        r.Append(entries[i]);\r\n    }\r\n    r.Append(']');\r\n    return r.ToString();\r\n}", "public override int get(int index) {\r\n    checkIndex(index);\r\n    return byteBuffer.getInt(index * libcore.io.SizeOf.INT);\r\n}", "public CreateAlbumRequest(): base(\"CloudPhoto\", \"2017-07-11\", \"CreateAlbum\", \"cloudphoto\", \"openAPI\") {\r\n    Protocol = ProtocolType.HTTPS;\r\n}", "public FileTreeIterator(FilePath root, FS fs, WorkingTreeOptions options) : base(options) {\r\n    directory = root;\r\n    this.fs = fs;\r\n    Init(Entries());\r\n}", "public virtual int ByteAt(int idx) {\r\n    return bytes[idx].Value;\r\n}", "public virtual DescribeTypeRegistrationResponse DescribeTypeRegistration(DescribeTypeRegistrationRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeTypeRegistrationRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeTypeRegistrationResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeTypeRegistrationResponse>(request, options);\r\n}", "public virtual TerminateInstancesResponse TerminateInstances(TerminateInstancesRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = TerminateInstancesRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = TerminateInstancesResponseUnmarshaller.Instance;\r\n    return Invoke<TerminateInstancesResponse>(request, options);\r\n}", "public override java.nio.DoubleBuffer duplicate() {\r\n    java.nio.ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());\r\n    java.nio.DoubleToByteBufferAdapter buf = new java.nio.DoubleToByteBufferAdapter(bb);\r\n    buf._limit = _limit;\r\n    buf._position = _position;\r\n    buf._mark = _mark;\r\n    return buf;\r\n}", "public OR(SemanticContext a, SemanticContext b) {\r\n    HashSet<SemanticContext> operands = new HashSet<SemanticContext>();\r\n    if(a is SemanticContext.OR) {\r\n        operands.UnionWith(((OR)a).opnds);\r\n    } else {\r\n        operands.Add(a);\r\n    }\r\n    if(b is SemanticContext.OR) {\r\n        operands.UnionWith(((OR)b).opnds);\r\n    } else {\r\n        operands.Add(b);\r\n    }\r\n    IList<SemanticContext.PrecedencePredicate> precedencePredicates = FilterPrecedencePredicates(operands);\r\n    if(precedencePredicates.Count > 0) {\r\n        SemanticContext.PrecedencePredicate reduced = precedencePredicates.Max();\r\n        operands.Add(reduced);\r\n    }\r\n    this.opnds = operands.ToArray();\r\n}", "public override void Serialize(ILittleEndianOutput out1) {\r\n    out1.WriteShort(m_formats.Count);\r\n    for(int i = 0; i < m_formats.Count; i++) {\r\n        ((CTFormat)m_formats[i]).Serialize(out1);\r\n    }\r\n}", "public virtual DescribeAvailabilityOptionsResponse DescribeAvailabilityOptions(DescribeAvailabilityOptionsRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DescribeAvailabilityOptionsRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DescribeAvailabilityOptionsResponseUnmarshaller.Instance;\r\n    return Invoke<DescribeAvailabilityOptionsResponse>(request, options);\r\n}", "public virtual int GetOffset() {\r\n    return offset;\r\n}", "public static float[] Grow(float[] array) {\r\n    return Grow(array, 1 + array.Length);\r\n}", "public virtual ListMetricsResponse ListMetrics() {\r\n    return ListMetrics(new ListMetricsRequest());\r\n}", "public int FindFirstRecordLocBySid(short sid) {\r\n    int index = 0;\r\n    for(IEnumerator iterator = records.GetEnumerator(); iterator.MoveNext();) {\r\n        Record record = (Record)iterator.Current;\r\n        if(record.Sid == sid) {\r\n            return index;\r\n        }\r\n        index++;\r\n    }\r\n    return -1;\r\n}", "public virtual DeleteVpnConnectionRouteResponse DeleteVpnConnectionRoute(DeleteVpnConnectionRouteRequest request) {\r\n    var options = new InvokeOptions();\r\n    options.RequestMarshaller = DeleteVpnConnectionRouteRequestMarshaller.Instance;\r\n    options.ResponseUnmarshaller = DeleteVpnConnectionRouteResponseUnmarshaller.Instance;\r\n    return Invoke<DeleteVpnConnectionRouteResponse>(request, options);\r\n}"]}