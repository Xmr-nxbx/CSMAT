public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(IBlockList<T> src) { if(src.Count == 0) { return 0; } int srcDirIdx = 0; for(int i = 0; i < srcDirIdx; i++) { bytesDir.AddAll(srcIdx, srcDirIdx, srcDirIdx); } }
public void WriteByte(byte b) { if(upto == 0) { if(currentBlock!= null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]; upto = 0; upto = 0; } }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { return (termOffsets!= null)? termOffsets.GetBytesUsed() : 0; }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.ToParseMessage(raw, 0); if(msgB < 0) { return string.Empty; } return RawParseUtils.ParseEncoding(sign, raw.Length, raw.Length); }
public RamIFSSSystem() { this.header = (short)0; _header.SetArray(new int[] { long[] bb = FieldsBlockArray.Create(maxBlockSize, false); values.Add(bb); } catch(IOException e) { throw new System.ArgumentException(0.ToString()); } _BLOCK_BLOCK_FBlock.SetIndex(Constants.S]); }
public override void Init(int @in) { lock(this) { Debug.Assert(address!= null); Debug.Assert(address!= null); } Debug.Assert(upto!= null); upto = ByteBlockPool.BYTE_BLOCK_BLOCK_BLOCK_BYTE_BLOCK_MASK; m_offset = (offset < 0); }
public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) { SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base("aibis", "2016-11-11", "ModifyStrategy") { Method = MethodType.POST; }
public override bool Seek() { lock(@lock) { if(@in == null) { throw new System.IO.IO.IOException("InputStream is "InputStream"); } try { return bytesRemaining() > 0 || bytes.has() > 0; } catch(IOException) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) { lock(this) { if(buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length); java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length); if(length == 0) { return 0; } for(int i = 0; i < count? length - length; i++) { buffer[i] = (byte)buffer[pos + i]; } } return result; }
public NGit.itionalentenceIterator(RangeNLentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { throw new System.NotImplementedException(); }
public NotImplementedFunctionException(string functionName, NotImplementedException): base(functionName) { this.functionName = functionName; }
public override V next() { return this.nextEntry().value; }
public override void ReadBytes(byte[] b, int offset, int len, bool useBuffer) { int Available = bufferLength - bufferLength; if(len <= 8) { len = System.util.Array.Copy(buffer, offset, len); } else { if(Available > 0) { len += Available; } len += Available; } if(Available > 0) { System.Array.Copy(buffer, offset, bufferPosition, bufferPosition); offset += Available; } if(bufferLength > len) { offset += Available; } else { if(bufferLength && len > len) { if(bufferLength && len > len) { if(bufferLength && len > len) { System.Array.Copy(buffer, 0, b, offset, b.Length); bufferLength = 0; } else { bufferPosition = 0; } } bufferPosition = 0; } bufferPosition = 0; } bufferPosition = 0; bufferPosition = 0; if(throw new EOFException(@object); }
public virtual TagQueueResponse TagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void Remove() { throw new NotSupportedException(); }
public virtual ModifyCacheSubnetGroupResponse ModifyCacheSubnetGroup(ModifyCachenetGroupSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public override void SetParams(string @params) { base.SetParams(@params); diff = string.ToString(@params, ""; StringTokenizer = new StringTokenizer(@params, ","); if(capacity.HasTokenTokens()) { java.util.Tokenizer.HasTokenTokens(@params); } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { var other = (FacetLabel)obj; return false; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPonomy shape = new HSSFPolygon(this, anchor); shape.Parent = anchor; shape.Anchor = anchor; shape.Add(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).SheetName; }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSignDelegateGroupsWithAccountGroupsWithAccountGroupsWithAccount(AssociateSignlegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSigninDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsWithAccountResponse>(request, options); }
public void AddinatesBlank(MulBlankRecord mbr) { for(int j = 0; jbr.NumColumns; j < mbr.NumColumns; jj++) { BlankRecord br = new BlankRecord(); br.Row = mbr.Row + mbr.Row; br.XFIndex = mbr.Row; } insertCell(m); }
public static string Encode(string @string) { StringBuilder sb = new StringBuilder(); sb.Append("\\Q"); int a = 0; int apos = 0; while((pos >= a.IndexOfE)) { sb.Append("\\n"); sb.Append(substring.Substring(0, k + 2)); ap = k + 2; } return sb.ToString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Object[][] valuesd2) { int nColumns = values[0].Length; int nRows = values.Length; _nColumns = (short)nColumns; _nRows = (short)nRows; for(int r = 0; r0 < nRows; rv++) { Object[] rowData = new ObjectPows[nColumns]; for(int c = 0; r0; r0 < c2; c++) { c = rowData[i]; c = rowData[c]; } } _reserved = 0; _reserved = 0; _reserved1 = 0; }
public virtual GetServerServerConfigResponse GetServerServerConfig(GetServerServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetServerServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetServerServerConfigResponseUnmarshaller.Instance; return Invoke<GetServerServerConfigResponse>(request, options); }
public override string ToString() { return GetType().Name + " [" + "]"; }
public override string ToString(string field) { return "ToChildBlockJoinQuery (" + fieldQuery + ")"; }
public void SkipRef() { refCount.RemoveAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public virtual int GetNextXulasOffset() { return GetXATEntriesPerBlock() * LittleEndian.SIZE * LittleEndian.SIZE; }
public virtual void ListByPowerOfTen(int pow10) { lock(this) { if(pow < 0) { this._enclosing.m; } else { this._enclosing.m_ulong) { m_ulong; } } }
public override string ToString() { StringBuilder b = new StringBuilder(); int            = l; buffer.Append(Environment.CharFile); for(int i = 0; i < l; i++) { if(i < l; b.Append(GetComponent(i)); } }
public InstanceProfileCredentialsProviderFetFcher(SredentialsMetadataCredentials @refCredentials): this(this) { this.remcher = frecher; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { valueMonitor = pm; }
public virtual void Reset() { if(!first) { ptr = 0; } if(!E) { ParseEntry(); } }
public virtual E previous() { if(this.previousIndex >= start) { return iterator.previous.previous; } throw new java.util.NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for(int i = 0; i < mSize; i++) { if(mValues[i] == value) { return i; } } return -1; }
public virtual IList<CharsRef> List(char[] word, int length) { IList<CharsRef> factory = new List<CharsRef>(word, length); if(term.Count < 2) { return factory; } java.util.List<CharsRef> dictionary = new java.util.List<Charset<Charset<CharsRef>(); for(int i = 0; i < terms.Count; i++) { if(!s.Contains(s)) { s.Add(s); } } return deduped; }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayRespGatewayRespesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayRespesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayRespPenResponse>(request, options); }
public void SetPosition(long pos) { currentBlockIndex = (int)(pos >> blockBits); currentBlock = blocks[currentBlockIndex]; }
public override long Skip(long n) { int s = (int)((m_max, Math.Min(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfigActionConfig) { _strapActionConfig = dbActionConfig; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_6_authorMultibyte? 0x01 : 0x00); if(field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_authorte? 0x01 : 0x00); } else { field_6_authorressedUnicode(field_6_author); } }
public virtual int lastIndexOf(string @string) { return lastIndexOf(@string, count); }
public virtual bool Add(E @object) { return AddLastImpl(@object); }
public virtual void UnsetSection(string format, string src) { SnapshotConfig res = state; for(int i = 0; i < src.Length; i++) { res = format[i]; if(!state.CompareSet(src, res, result)); } }
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public virtual bool remove(object o) { lock(mutex) { return c.remove(o); } }
public override string CreateMetoneFilter(TokenStream input) { return new doubleMetmentsFilter(input, maxCode, maxCode); }
public override long length() { return @in.Length(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public Simple(ContentSource oldSource, void newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get(int i) { if(count <= i) { throw new ArrayOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI") { UriPattern = "/repos"; Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public virtual void Remove() { if(this.expectedModCount == list.modCount) { if(this.lastLink!= null) { java.util.LinkedList.LinkedList.Link<ET> last = this._enclosing.next; java.util.LinkedList.Link<ET> last = this._enclosing.previous; this._enclosing.previous = previous; if(this == link.lastLink) { this._enclosing.next = this._enclosing.previous; this.lastLink = null; } else { throw new java.util.ConcurrentModificationException(); } } } else { throw new java.util.ConcurrentModificationException(); } }
public virtual MergeShardsResponse MergeShards(MergeShardsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsShardsResponseUnmarshaller.Instance; return Invoke<MergeShardsResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(IQuery query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (long)((ulong)byte0 >> 2); long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((long)((ulong)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((long)((ulong)byte2 >> 6)); values[valuesOffset++] = byte2 & 15; } }
public override string GetHumanish() { string result = GetPath(); if(e.Equals(s)) { if(s.Equals(s, StringComparison.Ordinal)) { throw new ArgumentException(elements.ToString()); } else if(e.Length == null || s.Length == 0) { return s; } else if(s.Length == null || new FilePath(elements.Length - 1)) { throw new System.ArgumentException("Humanants.Name - 1"); } else if(elements.Length == null || result.Length == 0) { throw new ArgumentException("Humanants.ToString(elements"); } return result; }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords.Get(index); }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual NGit.Api.NewRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(b.ToString()); }
public virtual QueryNode GetChild() { return GetChildren(0); }
public NotIgnoredFilter(int workdirIndex) { this.index = workdirIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.ReadShort(); }
public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcResponse DescribeTransitGatewayVpc(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public virtual OrdRange GetOrdRange(string dim) { return prefixToOrd[dim]; }
public override string ToString() { string symbol = ""; if(startIndex >= 0 && startIndex < startStream.Count) { IntervalStream Get = Get(IntervalStream.Get().startIndexInputStream(startIndex, startIndex)); symbol = null; } return symbol.Empty; }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return this; }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initialCapacity = ArrayUtils.CompareInt32ArraySize(initialCapacitySize); m_initialCapacity = new int[initialCapacitySize]; mSize = 0; mSize = 0; }
public override RefStream Create(TokenStream input) { return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName, string mode) : this(new FileNotFoundException) { throw new System.NotImplementedException(); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { return ToHex((long)value, 16); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if(index == HSSFColor.ParsePredolor) { return HSSFColor.GetColor(index); } byte[] b = _palette.GetColor(index); return new LColor(b, null); }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_sheet_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigEndianUt16fBytes(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int result = offset + length; for(int i = offset; i < end; ++i) { char ch = chars = (byte)(result[i]; result[resultIndex++] = (byte)(result >> 8); } return result; }
public virtual UploadArchiveResponse UploadArchive(ArchArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(request, options); }
public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToTokens(tokenIndex, -1); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(!base.Equals(obj)) { return false; } if(this.GetType()!= obj.GetType()) { return false; } Query other = (Query)obj; if(!CompareType()!= null) { return false; } if(!term == null) { return false; } if(other == null) { return false; } else if(!term.Equals(other.term)) { return false; } return true; }
public virtual SpanQuery MakeSpanClments() { SpanQuery[] error = new SpanQuery[size]; IList<SpanQuery> 0; int i = 0; IList<SpanQuery> weight = uri.Get(); while(sqi.HasNext()) { SpanQuery sqi = sqi.GetEnumerator(); if(q.MoveNext()) { return 1; } } else { float boost = uri.GetQuery(sq, weight); if(Boost!= 1) { return new SpanQuery(unQueries, children); } } if(f!= 1) { return new SpanQuery(unQueries); }
public virtual StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo FieldInfo(string fieldName) { return fieldInfo.GetName(fieldName); }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public virtual void Add(char[] output, int offset, int len, int endOffset, int pos) { if(count == outputs.Length) { output = ArrayUtil.Grow(outputs, count + count); } if(count == endOffsets.Length) { int nextOffsets = new int[ArrayUtil.BYTES_BYTES_BYTES_BYTES_BYTES_INT32)]; Array.Copy(end, 0, next, nextOffsets, 0, nextOffsets); end = nextOffsets; } if(count == pos) { Array.Copy(end, 0, next, nextLength, 0, nextLength); } pos++; }
public FetchLRequest(): base("CloudPhoto", "2017-07-11", "FetchLcloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool Run() { return fs.Exists(objects); }
public FilterOutputStream(java.io.OutputStream @out) { this.@out = @out; }
public DescribeClusterRequest(): base("2019-12", "2017-2Cluster", "kScalecs", "openAPI") { UriPattern = "/riPattern[ClusterId]"; Method = MethodType.PUT; }
public QueryValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(opTime, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(bool flag) { field_5_options = 0; }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtual NGit.Api.Node AddErrorNode(IToken capacityToken) { ErrorNodeImpl t = new NGit.Error(); AddChild(t); AddChild(t); return t; }
public RefvianStemFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory forName(string name, IDictionary<string, string> args) { return loader.GetInstance(name, args); }
public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override bool Equals(object o) { return o is IStemmer; }
public bool HasArray() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void UnposProtectWorkbook() { records.Remove(file); records.RemoveProtect(file); Write = null; }
public NGit.A.Pushr.(bool dedup, bool message, Analyzer analyzer): base(dedup, analyzer) { this.expand = message; }
public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public virtual byte[] GetObjectData() { return FindObjectRecord().GetObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactResponse GetContact(GetContactRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(request, options); }
public static short LookupIndexByName(string name) { FunctionMetadata f = GetInstance().GetInstanceInternalFunctionByName(name); if(fd == null) { Instance.GetInstance().NameInternalFunctionByName = GetFunctionByName(name); } return -1; }
public virtual DescribeAnomalyorsDetectorsResponse DescribeAnomalyorsDetectors(DescribeAnomalyorsDetectorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyorsDetectorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyorsDetectorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyorsDetectorsResponse>(request, options); }
public static string insertId(string message, ObjectId changeId) { return insert(message, changeId, false); }
public override long GetObjectSize(AnyObjectId objectId, int typeHint) { int szObjectType = db.GetObjectId(this, @objectSize); if(type < 0) { throw new MissingObjectException(@object.Copy(), @object); } if(type == OBJGitText.Copy(type)) { throw new MissingObjectException(object.Copy(), typeHint); } return sz; }
public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleEventHookExecutionResponse PutLifecycleEventHook(PutLifecycleEventHookExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleHookExecutionStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleEventHookExecutionStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookExecutionStatusResponse>(request, options); }
public NumberPtg(ILittleEndianInput in1) { this.ReadDouble(in1); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(InstanceInstanceStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<StatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " >= _p + _p; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadBalancerName = loadBalancerName; _policyName = policyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public virtual void CopyRawTo(byte[] b, int o) { java.lang.Int32(b, o1, w1); java.nio.Int32(b, o + 4, w2); java.nio.Int32(b, o + 8, w3); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_h = in1.ReadShort(); field_2_v_v = in1.ReadShort(); field_3_width = in1.ReadShort(); field_4_width = in1.ReadShort(); field_5_options = in1.ReadShort(); field_5_col = in1.ReadShort(); field_6_sheet = in1.ReadShort(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if(isOpen) { isOpen(); try { this._enclosing.Clear(); } this.channelateLength = this._enclosing.Current; }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public virtual string GetPronunciation(int wordId, char off, int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double Parse(double[] v) { double r = double.NaN; if(v >= null && v.Length >= 1) { double s = 0; double s = 0; for(int i = 0; i < n; i++) { s[i]; s += s; } s = 0; for(int i = 0; i < n; i++) { s[i] += (v[i]; } } return r; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public virtual bool HasPassedThroughNonGreedyDecision() { return false; }
public virtual int end() { return end(0); }
public void traverse(CellHandler firstRow) { int firstRow = range.FirstRow; int lastRow = range.FirstColumn; int firstColumn = range.FirstColumn; int lastColumn = range - 1; int lastColumn = firstColumn - firstColumn; if(ctx.row <= firstctx.rowNumber) { CellRow = new SimpleCellContext(); for(int lastRow = firstColumn - 1; ctx.row.rowNumber; ++ctx.rowNumber; ++ctx.rowNumber; ++ctx) { CellRow = sheet.RowNumber; for(int i = firstColumnNumber; ++ctx.rowNumber; ++ctx.rowNumber; ++ctx.rowNumber) { if(currentRow == null) { if(currentRow == null) { continue; } continue; continue; } } if(currentRow == null) { row = currentCell.GetCell(colNumber); continue; } if(currentCell.IsEmpty) { col = (long)rowNumber.RowNumber.Index; if(currentCell.IsEmpty) { row = (int)currentNumberAndCol; } } if(currentCell == null) { colNumber = (int)((row.RowNumber - firstSize); } } if(currentNumber == null) { } } }
public virtual int GetReadIndex() { return pos; }
public virtual int CompareTo(ScoreTerm other) { if(this.Boost == other.Boost) { return other.Compare(this.Bytes, other.Bytes); } else { return this.CompareTo(this.Boost); } }
public virtual int Normalize(char[] s, int len) { for(int i = 0; i < len; i++) { switch(s[i]) { case RegexpBREE: s[i] = Regexs[i]; break; case Regexi: s[i] = Regexs[i]; break; default: break; case Regexi: s[i] = Regexp; break; } case Regexs[i] = Regexp; break; default: break; } return len; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public virtual NGit.Api.HactErrorListener(bool exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _attributeName = attributeName; _keyType = keyType; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool HasObject(AnyObjectId id) { return FindOffset(id)!= -1; }
public virtual GroupingSearch SetAllGroups(bool allGroups) { this.allGroups = allGroups; return this; }
public virtual void SetMultiValued(string dimName, bool v) { lock(this) { lock(this) { if(!fieldTypes.TryGetValue(dimName, out args); fieldTypes.Put(dimName, out args); } } }
public virtual int GetCellsVal() { java.util.Iterator<char> i = 0; int size = 0; for(; i < 0; i++) { Cell e = c[i]; if(e.cmd >= 0) { if(e.cmd >= 0) { size++; } } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void Write(byte[] b) { int len = b.Length; checkPosition(len); Array.Copy(b, 0, _writeIndex, len); _writeIndex += len; }
public virtual RebaseResult GetRebaseResult() { return this.rebaseResult; }
public static int GetpectedSetSize(int maxNumberOfExpectedValues,float this) { for(int i = 0; i < TYPE; i++) { int numSaturation = (int)(Saturation > numSaturation); int numBitsSetValues[i] = (int)(Saturation * numSaturation); if(ExpectedNumNValues > maxNumN) { return -1; } } if(ExpectedNumberOfNumN) { return -1; } return -1; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBC]\n"); buffer.Append("  .row     = ").Append(HexDump.ShortToHex(field_1_row_offset)).Append("\n"); for(int k = 0; k < field_2_cell_offsets.Length; k++) { buffer.Append("             = ").Append(HexDump.ShortToHex(field_2_cell_cell_cell_cell_cell_n"); buffer.Append("         = ").Append(HexDump.ShortToHex(field_2_cell_cell_cell_n"); } buffer.Append("[/DBCBC]\n"); return buffer.ToString(); }
public virtual IList<string> GetUndList() { returnoredList; }
public override string ToString() { return buffer.ToString()"; }
public override Query Clone() { return this; }
public PlainTextDictionary(TextReader reader) { @in = new BufferedReader(reader); }
public java.lang.StringBuilder append(java.lang.CharSequence csq) { if(csq == null) { appendNull(); } else { append0(csq0, csq.Length); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double aattev(double[] v) { double r = 0; double m = 0; double s = 0; for(int i = 0, iSize = 0; i < sSize; iSize; i++) { s[i]; s += s.Length / v.Length; } s = 0; for(int i = 0; i < s.Length; i++) { s[i] = v[i]; } return r; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount); java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1); buf._position = start; buf._limit = start + charCount; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public virtual java.util.Pattern pattern.Pattern pattern() { return pattern; }
public V setValue(V @object) { throw new System.NotSupportedException(); }
public virtual string Stem(string wordSequence) { string cmd = Stemmer; if(cmdOnPath == null) { return null; } buffer.Length = 0; buffer.Append(word); if(buffer.Length > 0) { buffer.Append(word); } return null; }
public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual char RequCharChar(IDictionary<string, string> args, string name) { return Get(args, name); }
public static string ToStringTree(object t) { return ToStringTree(t, (string)null); }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookLogList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetJobUnmarshaller.Instance; options.ResponseUnmarshaller = GetJobResponseUnmarshaller.Instance; return Invoke<GetJobUnmarshaller.Instance; }
public RemoveTagsRequest(string resourceId) { _resourceId = resourceId; }
public sealed override short GetEX12Id(char ch) { try { byte[] buffer = int.ToString(chBytes); if(buffer.Length!= 2) { return -1; } int b0 = (buffer[0] & 0xFF) - b; buffer[0] = (int)(0xFF) & 0xFF; return b + 1; } catch(UnicodeEncodingException e) { throw new Exception(e.ToString(), e); } return (short)(0 + b); }
public virtual NGit.BatchRefUpdate AddCommand(ICceiveCommand cmd) { commands.AddAll(cmd); return this; }
public short CheckExternSheet(int sheetNumber) { return (short)GetExternSheet().CheckExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(@object); }
public override bool Build(IQueryNode queryNode) { AnyNode range = (AnyNode)children; IList<IQueryNode> children = new BooleanQueryNode[children]; foreach(IQueryNode child in children) { if(children!= null) { foreach(IQueryNode child in children) { if(obj!= null) { foreach(IQueryNode child in children) { if(obj!= null) { foreach(IQueryNode child in children) { if(obj!= null) { b = (Query)obj; } } } } } } } if(obj!= null) { throw new QueryNodeException(new MessageQueryParserMessages.EMPTY_Dictionary<IQueryNode); } return bQuery; } }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public override Ref compact(Ref @ref) { try { return RefDatabase.Peek(@ref); } catch(IOException e) { return @ref; } }
public override long RamBytesUsed() { return RamUsageEstimator.RamObjectSize(RamUsageEstimator.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES); }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, HSSFConditionalFormattingRule cfRule) { SetRule(idx, (HSSFConditionalFormattingRule)cf); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("lubancloud", "2018-09", "GetStyles", "luban", "openAPI") { Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(this.GetType()!= obj.GetType()) { return false; } ToffsToffs = (Toffs)obj; if(OffsetStartOffset!= other.EndOffset) { return false; } if(Offset!= other.EndOffset) { return false; } return false; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double Ramr(double[] value) { return double[r]; }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual NGit.Api.RvertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval @inVE) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(inVE, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return e.GetErrorEval(); } String i = OperandResolver.CoerceValueToString(veText1); if(result == 0) { return e.GetErrorEval(); } string result = OperandResolver.CoerceValueToString(veText); if(result == 0) { string result = m.ValueToString(groupGroup.Length); if(result == 0) { if(result == 0) { if(result == 0) { return new StringEval(ToString(),!String()); } string result = ""; if(groupGroup.Length == 0 &&!String.Length == 0) { return new StringEval(ToString()); } string result = ""; String e = ""; if(hasSigninary.Length == 0) { return new StringEval(0)); } String e = ""; if(hasSigninary.Length == 0) { return new StringEval(0)); } return new StringEval(ToString()); }
public virtual E pollLast() { java.util.MapClass.Entry<E, object> entry = backingMap.Decode(); return (entry == null)? entry.getKey(); }
public int ReadUShort() { int ch1 = ReadUByte(); int ch2 = ReadUByte(); return (ch2 << 8) + (ch2 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, RevAttributeName attribute, OperationType attributeType) { _snapshotId = snapshotId; _attribute = attribute; _attributeType = attributeType; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public override V Get(string text) { if(cs == null) { throw new ArgumentNullException("text"); } return null; }
public override TokenStream Create(TokenStream input) { return new CommonGramsFilter(input); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartUploadResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, int.ToString(i)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 63; shift >= 0; shift -= 2) { values[valuesOffset++] = (int)((ulong)block >> shift)) & 3; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input,TPS); }
public override bool Equals(Row, int remap) { int sum = 0; for(IEnumerator<CellIterator> i = in1.Size; i++) { Cell cnt += cnt.MoveNext(); if(c.@ref >= 0) { if(c.@ref >= 0) { c = c.@ref; } } if(c.@ref == 0) { bool sum = false; if(c.cmd >= 0) { bool sum = false; for(int i = 0; i < 10; i++) { if(c.cmd >= 0 && c.cmd >= 0) { if(c.cmd >= c.cmd && c.cmd >= 0) { return!cnt = 0; } } } } } } if(c.cmd >= 0 || c.cmd >= 0 && c.cmd >= 0) { if(cnt >= 0 && c.cmd >= 0) { return!t; } cnt = -1; } }
public Token GetToken(int index) { Token t = tj; for(int i = 0; i < n; i++) { if(t.Next!= null) t = t.Next; } else { source = t.Next; } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append(this.GetType().Name).Append("\n"); sb.Append(" range=").Append(Range).Append("\n"); sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n"); sb.Append("  ").Append(HexDump.ShortToHex(_fieldUsed)).Append("\n"); Ptg[] ptgs = _formulaTokens; sb.Append("\n"); for(int i = 0; i < ptgs.Length; i++) { Ptg[] ptgs = ptgs[i]; Ptg[] ptgs = 0; sb.Append("\n"); sb.Append("]\n"); } return sb.ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public override void add(int location, E @object) { throw new System.NotSupportedException(); }
public RamScoresOnlyCollector(Collector @in): base(@in) { this.m_format = in1; }
public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.PUT; }
public BaseRef(AreaEval ae) { _refEval = null; _fileEval ae = ae; _firstRowIndex = ae.FirstColumn; _firstColumnIndex = ae.FirstColumn; _height = ae.FirstColumn - 1; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public virtual void Reset() { if(!first) { Reset(raw); } }
public java.nio.charset.charsetDecoder reset() { status = _status; return this; }
public BufferedReader(TextReader @in, int size) : base(@in) { if(size <= 0) { throw new System.ArgumentException("size <= 0"); } this.@in = @in; buf = new char[size]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual NGit.Api.RameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public virtual void ParseSecondaryProgressBy(int diff) { lock(this) { SetaryProgressaryProgress(maryProgress); } }
public virtual int[] Clear() { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI") { UriPattern = "/users/sourceAccount"; Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(obj is HSSFCellStyle) { return false; } HSSFCellStyle other = (HSSFCellStyle)obj; if(_format == null) { if(other._format!= null) { return false; } else { if(_format!= null) { return false; } } return false; } return false; }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { if(this == @object) { return true; } if(@object is java.util.Set<K, object>)) { return false; } try { java.util.Set<object> s = (java.util.Set<object, object>)@object; return false; } catch(java.util.Hashtable.NullException) { return false; } }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { typeLogRefLog = true; if(msg == null &&!appendStatus) { @refLog(); } else { if(msg == null && appendStatus == null) { refLogMessage = "refLog"; refLogMessage = msg; } else { refLogMessage = msg; } } }
public StreamIDRecord(RecordInputStream in1) { id = in1.ReadShort(); }
public RecognizeRequest(): base("visionai-poc", "2020-04-08", "Recognize") { Method = MethodType.POST; }
public sealed override java.nio.ByteOrder order() { return java.nio.ByteOrder.LongOrder(); }
public virtual int GetAheadCount() { return this.m_size; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityResponse GetCloudFrontOriginAccessIdentity(GetCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityResponse>(request, options); }
public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return symbol == label; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?"); if(array.Length < minSize) { short[] newArray = new byte[Oversize(minSize, RamUsageEstimator.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_INT32)]; Array.Copy(array, 0, newArray, array.Length); return newArray; } else { return array; } }
public CreateRequest(): base("CloudPhoto", "2017-07-11", "Create", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(Profilingulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames, string indexField) { }
public virtual RestoreDBClusterReadReplicaResponse RestoreDBClusterReadReplica(PromoteReadReplicaReadReplicaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterReadReplicaRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterReadReplicaResponseUnmarshaller.Instance; return Invoke<AtReadReplicaReadReplicaResponse>(request, options); }
public virtual DescribeCapacityResationsResponse DescribeCapacityResations(DescribeCapacityResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityResationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityResationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher(" + reader; }
public sealed override bool protectedToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if(bitsPerValue > 32) { throw new System.NotSupportedException("Cannot DecodeString[] bitsPerValue " + bitsPerValue + " || bitsPerValue"); } for(int i = 0; i < iterations; ++i) { long block = ReadLong(blocksOffset, blocksOffset); blocksOffset = Decode(block, valuesOffset); } }
public virtual bool IsExpectedToken(int symbol) { ATN atn = GetInterpreter().atn; ParserRuleContext ctx = _ctx; ATNState s = atn.GetTokens(n); if(symbol.Contains(s)) { return true; } if(symbol.Contains(i)) { return false; } if(!RevState.Contains(i)) { return false; } while(!ctx.Contains(i)) { ATNState at = atn.Get(ctx); if(!Token.Contains(i)) { return false; } ITState rctx = (RevState)t.CurrentTokens(0); int atn = (ctx.CurrentTokens(i); if(symbol.Contains(i)) { return true; } ParserRuleContext = (ParserRuleContext)t; return true; }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { ErrorOperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return ErrorEval.VALUE; } ErrorEval result; ErrorEval result; return new NumberEval(result); }
public override string ToString() { return GetType().Name + " [" + _index + "]"; }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public virtual ICollection<Long> GetFirstArc(FST<Long> arc) { return fst.FirstArc(Parent); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = (int)((ulong)block >> shift)) & 3; } } }
public override long Skip(long charCount) { if(charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock(@lock) { checkNotClosed(); if(charCount == 0) { return 0; } long Available = buf.Length - pos; if(AvailableBufferFrom) { long Available = @in.Length - sizeFrom; if(Available == 0) { return charFromFrom; } } else { long Available = @in.CurrentFromFrom(@in); pos += Available; posFromFrom(@in); } return @in.Count; } }
public virtual IDictionary<string, Ref> GetRefsMap() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream OpenStream() { ObjectObjectInputStream @in; ILittleStream @in; try { tokenStream @in = new ObjectStream(resourceReader, ctx); } catch(IOException e) { string ctx = new ObjectStream(X, @object, @in + ctx); ObjectIdx = null; if(ctx!= null) { return ctx.Get(); } ObjectIdx = null; if(ctx!= null) { if(ctx!= null) { return ctx; } } if(ctx!= null) { return type + @in.Empty; } if(ctx!= null) { if(ctx!= null) { return type; } } else { if(ctx!= null) { return type; } } if(ctx!= null) { m_ctx = new InputStream(@in, @in, @in); } }
public ArrayList() { array = libcore.util.OBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { resize(Double.DEval); }
public RevFlagSet(ICist<RevFlag> s) { AddAll(s); }
public override int size() { return this._enclosing._size; }
public sealed override long getLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if(newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _position); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, long.ToString(l)); return this; }
public TurkishLowerCaseFilter(TokenStream @in): base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch match(IParseTree tree, ParseTreePattern pattern) { Enumerator<string, ParseTree> cache = new MultiMap(seTree>(); ParseTree mismColor(tree, pattern); return new ParseTreeMatch(tree, pattern, labels, labels); }
public virtual void AddIfNoOverlap(WeightedPhraseInfo wraseInfo) { foreach(WeightedPhraseInfo error in this) { if(continue; } foreach(Weightpi in this) { if(continue; } foreach(WeightedPhraseInfo fieldInfos in w) { result.AddItem(GetInfos().WultureInfos); } }
public override Merger NewMerger(Repository db) { return new InMerger(db); }
public override float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0? numPayloadsSeen : 1; }
public override ICollection<IParseTree> Evaluate(IParseTree t) { return Trees.FindAllNodes(t, ruleIndex); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFR parameters]\n"); buffer.Append("   .type         =").Append(Type).Append("\n"); buffer.Append("                 =").Append(StringUtil.ToHexString(Sx)).Append("\n"); buffer.Append("\n"); buffer.Append("                 = ").Append(FormattingBlockFormattingBlock())).Append("\n"); if(ContainsBlockFormattingBlock) { buffer.Append("\n"); buffer.Append("                        = FormulaFormattingTokens).Append(StringUtil.ToFormulaTokens).Append("\n"); } buffer.Append("            = FormulaFormattingTokens).Append(StringUtil.ToString(Tokens)).Append("\n"); buffer.Append("                   = FormulaFormattingTokens).Append(StringUtil.ToStringUtil.To
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public override string GetNameName(int index) { return GetNameAt(index).Name; }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<Totalopases='" + GetValueString() + "'" + GetChild().ToString() + "\n"); }
public virtual DirCacheEntry GetDirCacheEntry() { return currentSubtree == null? null : currentEntry; }
public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount); if(intCount > remaining()) { throw new java.nio.BufferOverflowException(); }{ for(int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } } return this; }
public virtual void trimToSize() { int s = size; if(s == array.Length) { return; } if(s == 0) { array = libcore.io.Array.OBJECT; } else { object[] newArray = new object[s]; System.Array.Copy(array, 0, newArray, 0, s, 0, newArray.Length); array = newArray; modCount++; } }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int[] a) { int[] rval; if(a == _limit) { Array.Copy(_array, 0, a, 0, _limit); rval = a; } else { rval = ToArray(); } return rval; }
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string sessionToken, int roleSessionContext) { if(accessKeyId == null) { throw new System.ArgumentException("Access key cannot be null."); } if(accessKeyId == null) { throw new System.ArgumentException("Access key ID cannot be null."); } this.accessKeyId = accessKeyId; this.inputKeyId = accessKeyId; this.sessionKeySecret = accessKeySecret; this.currentTokenKeys = accessKeySecret; }
public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if(shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ListEventSourceResponse ListEventSource(ActivateSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ListEventSourceResponseUnmarshaller.Instance; return Invoke<ActivateSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _name = name; }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, bool normalizeKana): base(input) { this.normalizeKanji = normalizeKanji; this.Sharpen.Collections.Reset(input); this.Reset(input); this.Reset(input); }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = new java.util.Concurrent.HashMap<K, V>(); }
public ValueEval GetRef3DEval(Ref3DPptg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.SheetName, rptg.LastSheetName); return new LazyRefEval(rptg.Row, rptg); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
public public double PMT(double r, int nper, double pv, double fv, int type) { return (r * Math.Pow(p * nper, fv * ((1 + r) + r * ((v) + r)); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public static long[] Grow(short[] array) { return Grow(array, 1 + array.Length); }
public override string outputToString(object output) { if(!(output is IList<T> outputList)) { return outputs.ToString(); } else { IList<T> outputList = (IList<T>)output; StringBuilder b = new StringBuilder(); for(int i = 0; i < output.Count; i++) { if(i > 0) { b.Append(' "); } b.Append(", "); } } b.Append(output.GetToString(i))); return b.ToString(); }
public void NotifyDeleteCell(ICell cell) { _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell)); }
public java.lang.StringBuilder Replace(int start, int end, string str) { Replace(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = double.NaN; int index = k - 1; if(v!= null && v.Length > 0) { Arrays.Sort(v); } r = v[index]; return r; }
public override void Set(int index, long value) { int o = index & 5; int b = index & 7; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift); }
public override string ToString() { var children = GetChildren(); if(size == null || children.Count == 0)return "<bool operation=''/>"; StringBuilder sb = new StringBuilder(); foreach(IQueryNode child in children) { sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for(int i = 0; i < toIx; i++) { result += _ptgs[i].Size; } return result; }
public virtual void SetReadonly(bool readonly) { if(this.Readonly &&!Readonly) { throw new InvalidOperationException("can't be IntervalSet"); } }
public void ClearConsumingCell(FormulaCellCacheEntry cce) { if(!(functionCells.Remove(cce)) { throw new InvalidOperationException("Specified formula cell is not formula cell"); } }
public virtual java.util.List<E> subList(int start, int end) { lock(mutex) { return new java.lang.List<E>(list.subList.subList(start, end), end); } }
public virtual FileHeader GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _accountId = accountId; _vaultName = vaultName; _jobParameters = jobParameters; }
public override string ToString() { return "VisitL"; }
public ReplaceableAttribute(string name, string value, bool replace) { _name = name; _value = value; _Replace(value); }
public void Add(IndexableField field) { fields.Add(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initialCapacity = ArrayUtils.DecalInt32ArraySize(initialCapacitySize); m_initialCapacity = new int[initialCapacityValues]; mSize = 0; mSize = 0; }
public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService") { Method = MethodType.POST; }
public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool hasPrevious() { return link!= list.voidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadBalancerName = loadBalancerName; }
public virtual string GetUserInfo() { return Decode(userInfo); }
public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public virtual string Build() { return this.nextQuery(); }
public bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxProxRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxResponseUnmarshaller.Instance; return Invoke<DescribeDBiesProxResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public SimpleCacheConfig FromConfig(Config rc) { SetPackedGitLimit(rc.GetBooleanRefs(ReultureInfo.InvariantCECTION, NameSECTION_Culture); SetOpenFiles(ReackedInt(PackedONG_CECTION, null, true); SetOpenFiles(rc.OpenFiles(PackedInt())); SetOpenFiles(PackedFiles, GetFilesPacked())); SetOpenFilesPackedInt(PackedFiles, GetFiles())); SetOpenGitPackedInt(rc, null, GetFileGitLimit())); SetPackedInt(rc.Get(SECTIONPacked())); SetPackedInt(rc, null, GetInt32SizeGitPacked())); Set64PackedInt(rc, null, null, GetInt32PackedInt32Packed())); SetCache.Set(text, null, null, null); SetCacheLimit = GetInt32PackedInt32(rc, null, null); SetInt32PackedInt(rc, null, null); SetCache.Set(changePackedInt32Packed(rc, null, null, null, null); }
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return this._enclosing._size; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("                 = ").Append(StringUtil.ToHexString(AddMatch)).Append("\n"); buffer.Append("              = ").Append(StringUtil.ToHexString(DelMatch)).Append("\n"); buffer.Append("[/MMS]\n"); return buffer.ToString(); }
public FilepathConfig(Config base(string cfg, FS fs): base(@base) { config = cfg; this.fs = fs; this.la = ObjectSnapshot; }
public override int Sort(int pos) { if(pos < text.BeginIndex || pos > text.EndIndex) { throw new System.ArgumentException("offset out out @in"); } else if(0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); text.SetIndex(text.BeginIndex); return Done; } else { if(sentence >= sentenceStarts.Length - 1) { text.SetIndex(text.EndIndex); currentSentence = sentenceStarts.Length - 1; } else { currentSentence = (currentSentence - 1) / 2; currentSentence.SetIndex(posStarts[pos++] - 2); } return currentSentence; } }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { return this; }
public static double CompareDistanceFromErrPct(ID shape, double distErrPatialContext ctx) { if(maxErr < 0 || distErr5 > 0 || distErr5 > 0) { throw new ArgumentException("ct: " + distErr.0 + " + 0"); } if(maxErr is PointPct || shape == 0 || shape == 0) { return 0; } var bbox = c.GetMax(0, bbox.Max); double bbox = ctx.GetDist(); double bbox = ctx.GetDistErrbox(); double bbox = ((int)c.Max(c); double bbox = ((double)c * yr.Max(c); return 0; }
public virtual int codePointAt(int index) { if(index < 0 || index >= count) { throw indexAndLength(index); } return byte[value]; }
public virtual void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _accountId = accountId; }
public override NGit.Api.AashMessageFormatter() { dateFormatter = new NGit.FormatFormatter(null.DEFAULT_DEFAULT); }
public GetCoverRequest(): base("CloudPhoto", "2017-07-11", "GetCover", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual int lastIndexOf(object @object) { int pos = size; java.util.LinkedList.Link<E> link = voidLink.previous.previous; if(@object!= null) { pos--; } while(link!= voidLink) { if(@object.Equals(link.data)) { return pos; } else { link = link.previous; } } return pos; }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtual Ref Build GetBreakIterator(int script) { switch(script) { case null: return (Break)cjj; } return (Break)cjjk; }
public override String ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCON]\n"); b.Append("               = ").Append(RowRow).Append("\n"); b.Append("                   = ").Append(RowRow).Append("\n"); b.Append("                    = ").Append(firstrow).Append("\n"); b.Append("                        = ").Append(firstrow).Append("\n"); buffer.Append("                                  = ").Append(chCol).Append("\n"); buffer.Append("                             = ").Append(GetPath()).Append("\n"); buffer.Append("                    
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE").Append("]\n"); buffer.Append("[/FEEDER]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(String @string) { return string.GetBytes(@string); }
public virtual IList<string> GetFooterLines(string keyName) { return GetFooterLines(new FooterKeyName(keyName)); }
public virtual void Sort() { base.@ref.Clear(); }
public override float get(int index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public override int[] Grow() { Debug.Assert(bytesStart!= null); return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart + 1); }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy GetSpatialStrategy(int elementNumber) { Spatialategy result = resultStrategy.Get(roundNumberStrategy); if(result == null) { throw new InvalidOperationException("DocIdStrategy is not supported"); } return result; }
public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_sheetDataType); out1.WriteShort(field_2_valuesType); out1.WriteShort(field_3_numCategories); out1.WriteShort(field_4_numValues); out1.WriteShort(field_5_numubValues); }
public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern ParseTreePattern(string pattern, int patternRuleIndex) { if(!TokenStream!= null) { TokenSource tokenSource = GetTokenSource().TokenSource(); if(tokener is LexerSource) { TokenSource lexer = (LexerSource)tokenSource; } if(tokener is LexerSource) { return ParseTreePatternParseTreePattern(pattern, patternRuleIndex, patternRuleIndex); } } return SortParseTree(pattern, patternRuleIndex, patternRuleIndex); }
public virtual TagDBClusterResponse ValDBCluster(BackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ValDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = ValDBClusterResponseUnmarshaller.Instance; return Invoke<BackDBClusterResponse>(request, options); }
public virtual string GetName() { return strategyName; }
public virtual void CopyTo(byte[] b, int o) { formatHexByte(b, 0, w1 + 1); HexByte(b, wb, w2); HexByte(b, o + 8, w3); Hex(b, o + 16); Hex(b, o5, w5); }
public static java.nio.IntListListList lineMap(byte[] buf, int ptr, int end) { IList map = new java.nio.Int32List.Int32(end - ptr); map.Fill(1, ptr); for(int ptr = next; ptr < end; i++) { map.Add(end); } map.Add(end); return map; }
public virtual ICollection<ObjectId> Getools() { return Sharpen.Collections.EmptySet<string>(); }
public override long RamBytesUsed() { lock(this) { long sizeInBytes = 0; for(int i = 0; i < fields.Length; i++) { if(!values.CountTermsText.Length!= 0) { currentBytes += (TermsText.CountTermsText.Count == 0)? 0 : 0; } } return sizeInBytes; } }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); buf.Append("<").Append(tab"); foreach(EscherRecord escherRecords in escherRecords) { buffer.Append(tabName).Append(")"); } return builder.ToString(); }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("!n"); r.Append("tree "); r.Append(treeId!= null? treeId : "NOT_SET"); r.Append("\n"); foreach(ObjectId p in ps) { r.Append("\n"); r.Append("size "); r.Append(p.Name); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("} r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("  "); r.Append("\n"); if(encoding!= null &&!r.Is(encodingReferences &&!r.Is(encoding)) { r.Append("\n"); r.Append("\n"); } r.Append("}"); return r.ToString(); }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberResponse>(request, options); }
public virtual void Run() { }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public virtual string GetErrorHeader(RecognitionException e) { var e = line.endingOffendingToken().GetLine(); int e = char.PositionInLine; int e = char.PositionInLine; return "lineInLine + e + "] + e; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf._limit = _limit; buf._position = _position; buf._mark = _mark; buf.byteBuffer._order = byteBuffer._order; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public override ObjectIdSubtypeMap<NewObjectId> GetNewObjectIds() { if(newObjectIds!= null) { return new ObjectIdSubObjectIds; } return new ObjectIdSubMap<ObjectId>(); }
public virtual void Clear() { hash = hash; base.Clear(); }
public override void Reset() { lock(@lock) { checkNotClosed(); if(mark == -1) { throw new System.IO.IOException("Invalid mark"); } pos = mark; } }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(SuspendServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if(args.Length!= 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[2]); }
public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public virtual void SetDate(DateTime date) { if(date!= null) { SetDateTime(date.ToString()); } else { date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public virtual object[] toArray() { return a.Clone(); }
public override void Write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len); lock(@lock) { expand(len); } lock(@lock, offset, this.count); this.count += len; }
public static RevFilter After(DateTime ts) { return After(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _policyName = policyName; }
public virtual DeregisterTransitGatewayMulticastGroupResponse DeregisterTransitGatewayMulticastGroupwayMulticastGroup(DeregisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int ReadUByte() { return ReadByte() & 0x00FF; }
public virtual void SetLength(int sz) { Debug.AsscodeInt32(info, infoOffset + P_SIZE, infoOffset + P_SIZE); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public override Token recognInline(Parser recognizer) { MismatchInputMismatchException e = new InputMismatch(recognizer.Parent); ParserRuleContext context = (ParserRuleContext)recognizer.GetParent(recognizer); context.exoc = e; }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base("CloudCenter", "2017-07-07", "ModifyStrategy", "MoAPI") { Method = ProtocolCallategy; }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool Contains(object o) { return this._enclosing.ContainsValue(o); }
public SheetRangeIdentifier(String bookName, NameetIdentifier firstSheetIdentifier, NameSheetIdentifier lastSheetifier): base(bookIdentifier) { _lastSheetifier = lastSheetifier; }
public CancelMetadataRequest(string domainName) { _domainName = domainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, string[] tokenImageVal): base(new Message(QueryParserMessages.INVALID_BYTokenX, expectedTokenSequencesVal, tokenImageVal)) { this.currentTokenVal = currentTokenVal; this.currentTokenVal = currentTokenSequences; this.TokenImageVal = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override PrintWriter Reset() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_SIZE); maxGramSize = GetInt32(args, "maxGramSize", NGramSize); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileTag() { return dfConflict!= null; }
public IndonesianStemFilter(TokenStream input, bool StemDerivational): base(input) { this.termivational = StemDerivational; this.termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fpose); out1.WriteInt(passwordVerifier); out1.Write(UnicodeString); }
public static double floor(double n, double s) { if(s == 0 && n < 0) { return double.NaN; } else { return (n == 0 || s == 0)? (n * s : 0); } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<Tree> GetChildren(Tree t) { List<Tree> new List<Tree>(); for(int i = 0; i < t.ChildCount; i++) { t.Add(t[i]); } return result; }
public virtual void Clear() { this._enclosing.clear(); }
public virtual NGit.Api.AllAllRecord(bool DoAll) { this.SetRefresh(ref); }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public DictionaryvHatterFormatter(ConnectionsPhotoss) { this.costs =Front; this.append = new JCG.HashMap<string, string>(); sb.Append("\n"); sb.Append("\n"); }
public CheckRawRequest(): base("visionai-poc", "2020-04-08", "CheckRaw") { Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual ICollection<string> GetIgnPaths() { return factory; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceSet) { _bytesAction = resource.ToString(); _resourceSetRecordSetRecord(resourceSetRecord); }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public override java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.Hashtable<E>(snapshot.Length, 0, snapshot.Length); }
public override void VisitContainedRecords(RecordVisitor rv) { if(_recs.Count > 0) { return; } rv.VisitRec(_bRecord); for(int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs.GetRecord(i); if(." is RecordAggregateAggregate) { ((RecordAggregate)obj).VisitContainedRecords(rv); } } else { rv.VisitRecord(rv); } }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCt").Append("").Append("\n"); buffer.Append("            = ").Append(DataSize).Append("\n"); buffer.Append("             = ").Append(HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/Ft").Append("[/Ft").Append("\n"); return buffer.ToString(); }
public static BasicBlock CreateEmptyulas(IFSBigBlockSBigBlockSize bigBlockSize, bool isstring) { byte blockBlock = new FileBlockSize(maxBlockSize); if(is]; if(isX) { rementries = Sharpen.ColPerBlockSize(blockSize); } _values[blockSATE_values = _blockSize; _values[block] = _block._blockSFF; return block; }
public virtual TagResourceResponse TagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse ResumeProcesses(ResumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override String ToFormulaString(String[] operands) { if(field_1_options == 0) { return operands[0]; } else { return operands[0]; } }
public override T Merge(T first, T second) { throw new NotSupportedException(); }
public override string ToString() { return this.message.Key; }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; path = split; }
public CreateAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 5)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 1)) & 1; values[valuesOffset++] = block & 1; } }
public virtual PushConnection OpenPush() { throw new System.NotImplementedException(); }
public static void strc(char[] dst, int dst, char[] end, int si) { while(src[data]!= 0) { dst[dst++] = src; dst[dst++] = 0; } }
public override K getKey() { return mapEntry.getKey(); }
public static int numNonnull(object[] data) { int n = 0; if(data == null) { return n; } foreach(object o in data) { if(!null) { o++; } } return n; }
public override void Add(int location, E @object) { if(location >= 0 && location <= _size) { java.util.LinkedList.Link<E> link = voidLink; if(location < (size / 2)) { for(int i = 0; i <= location; i++) { link = link.next; link = link.previous; } else { { for(int i = size; i > location; i--) { link = link.previous; } } } } else { for(int i = size; i > location; i--) { link.previous = new java.util.LinkLinkList<E>(object, link.previous.previous; } } else { throw new System.IndexOutOfRangeException(); } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public override void flush() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public override bool VisitToken() { if(used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public virtual NGit.Api.DiffValid(Edit value) { return new NGit.Edit(m_1, endB); }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual void SetNoChildReport() { ChildReport = false; foreach(ChildTaskSequence task in children) { if(this.bsTask is FileSequence) { ((NoReportSequenceTask)this).SetChildReport; } } }
public override E get(int location) { try { return a[location]; } catch(IndexOutOfRangeException) { throw java.util.IndexOutOfRangeException)"; } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && row >= _lastColumn && col <= col; }
public override string ToString() { return new string(this.chars); }
public virtual PatchType GetPatchType() { returnType; }
public override java.util.Iterator<K> iterator() { return new java.util.Hashtable<K, V>.ValueIterator(this._enclosing); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public override BytesRef Next() { termUpto++; if(termUpto >= info.terms.terms.Count) { return null; } else { info.AddItem(info.termUpto, br); return br; } }
public override string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationResponse>(request, options); }
public virtual void Set(RevCommit c) { BlockBlock b = head; if(b == null) { b = 0; b.Reset(); b.Add(c); } else { b.Add(c); return; } else if(b.Unicode()) { newBlock(c); b.Reset(); } b.Reset(c); }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", Int32Tokenizer.DEFAULT_MIN_SIZE); maxGramSize = GetInt32(args, "maxGramSize", Int32Tokenizer.DEFAULT_SIZE); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<ParameterParameterGroupName> dbParameterGroupName) { _dbParameterGroupName = dbParameterGroupName; _paramParameters = dbParameter; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public override void Set(int index, long value) { int o = index & 6; int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1 << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternSearch(pattern()); }
public override string ToString() { return "spans(" + term.ToString() + ") == -1? " : -1 + " (docART? ")"; }
public override bool CanAppendMatch() { foreach(Head headHead @in) { if(headHead!= LastHead) { return true; } } return false; }
public virtual int lastIndexOf(string subString, int start) { lock(this) { return base.lastIndexOf(subString, start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int Growitter(byte[] b, int ptr) { int sz = b.Length; if(ptr == 0) { ptr += 3; } while(ptr < sz && b[ptr] == 'p') { ptr += 4; } if(b[ptr] == 'LF') { ptr = NextLF(b, ptr); } return match(b, ptr); }
public virtual int GetLineNumber() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) { paths.AddItem(path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { foreach(Format format in Format) { if(format.Id == id) { throw new ArgumentException("Unknown format: " + id); } } return Format; }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public virtual FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if((c >= 'c >= 'A' && c <= ')) { return true; } if(c == '.' || c <= '.' || c == '.' || c == '.' || c == '.' || c == '.' || c == '.' || c == '.')) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public virtual string name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if(args.Length < 1) { return ErrorEval.VALUE_INVALID; } string text; string text; try { ValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex); text = OperandResolver.CoerceValueToString(ve); } catch(EvaluationException e) { case 2: return e.GetErrorEval(); case 1: return ErrorEval.VALUE_INVALID; case 1: return ErrorEval.VALUE_INVALID; case 1: return ErrorEval.VALUE_INVALID; } catch(EvaluationException e) { return e.GetErrorEval(); } }
public int CompareTo(int[] bs, int p) { int cmp; cmp = NB.CompareUInt32(w1, bs[p]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w2, bs[p + 1]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w3, bs[p + 2]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w4, bs[p + 2]); if(cmp!= 0) { return cmp; } return NB.CompareUInt32(w5, bs[p + 4]); }
public void RemoveName(int index) { names.Remove(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _queueUrl = queueUrl; _attributeNames = attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if(newLength < 0) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bool enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public virtual bool print(string commandLine) { return command.Length + 1; }
public static void Register(MergeStrategy imp) { lock(this) { Merge(); } }
public override long RamBytesUsed() { return 0; }
public useredZone(string id, string name, string callerReference) { _id = id; _name = name; _callerReference = callerReference; }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public bool ProcessMatch(ValueEval eval) { if(eval is NumericValueEval) { fieldValue = ErrorValue; } else { fieldValueEval ErrorValue = ((NumericValueEval)evalValue).Number; double oldValue = ((NumericValueEval)evalValue; if(currentValue < oldValue) { fieldValue = ErrorValue; } } return true; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_subref_len); }
public static void main(string[] args) { bool i = false; string path = null; var path = null; if(args[print - i].Equals("print-i]", StringComparison.Ordinal)) { print(args[i].Equals(" - 1)) { print(args[i].Length - 1)) { printTree = true; } else { printTree = true; } } if(args.Length!= 2? 1 : (RevTree.Length - 1)) { print(path); } } }
public virtual void SetByteValue(byte value) { if(!(FieldsData is ByteValue)) { throw new System.ArgumentException("cannot change value type from " + type.GetType().Name + " to ByteData"); } FieldsData = ByteData.ValueOf(value); }
public static intize() { returnize(DEFAULT_VALUE_SIZE); }
public CachingDoubleValueSource(Double sourceSource source) { this.source = source; cache = sourceMap; }
public AttributeDefinition(string attributeName, AttarAttributeType attributeType) { _attributeName = attributeName; _attributeType = attributeType; }
public static string Make(ICist<string> parts, string separator) { return stringUtils.Get(parts, separator); }
public virtual ListTaskDefinitionFamResponse ListTaskDefinitionFam(ListTaskDefinitionFamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionResponseUnmarshaller.Instance; return Invoke<ListTaskFamDefinitionResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public DescribePhotosRequest(): base("CloudPhoto", "2017-07-11", "ActivPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableCidrRangesResponse ListAvailableCidrRanges(ListAvailableCangesCangesRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableCangesRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableCidrangesResponseUnmarshaller.Instance; return Invoke<ListAvailableCangesCangesRangesResponse>(request, options); }
public virtual ObjectIdSubtypeMap<ObjectId> GetObjectIds() { if(baseObjectIds!= null)return null; return new ObjectIdSubMap<ObjectId>(); }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { int result = values.Length * 1; foreach(object value in values) { result += GetEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = Get(args, SongELENT_MODEL); tokenModelFile = RequokenModelFile(args, SEL); if(!0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public sealed override int getInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.peekInt(backingArray, offset + index, _order); }
public IList<Head> GetNextHeads(char c) { if(Matches(c)) { return new FileHeads; } return new FileHeads; }
public override java.nio.ByteBuffer putShort(short value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void writeUnshared(object @object) { throw new System.NotImplementedException(); }
public override int offsetByCodePoints(int index, int codePointOffset) { return char[offset]; }
public static int GetNAlt(IList<BitSet> altsets) { BitSet all = GetAltsets(altsets); if(allity == all) { allity.Current; } return ATN.NUM_INVALID; }
public virtual DateReader GetNumber() { return new DateReader(POST); }
public RuleTagToken(string ruleName, int defaultTokenType, string label) { if(ruleName == null || ruleName == null) { throw new System.ArgumentException("ruleName cannot be null must be null."); } this.ruleName = ruleName; this.passTokenType = defaultTokenType; this.label = label; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public sealed override java.nio.CharBuffer Decode(java.nio.ByteBuffer buffer) { try { return new java.nio.Coder.charset.CodingErrorAction(java.nio.charset.CodingErrorAction.CodingErrorAction.CodingErrorAction); } catch(java.nio.CharacterCodingException ex) { throw new java.nio.charset.charset.CodingErrorAction(buffer); } }
public Accept(string id, string status, string domainName) { _id = id; _domainName = domainName; }
public sealed override double[] array() { return protectedArray(); }
public DateTime1904Record(RecordInputStream in1) { field_1_field_1_ReadShort(); }
public DeleteDBSnapshotRequest(string dbshotIdentifier) { _napshotIdentifier = dbshotIdentifier; }
public virtual ParserExtension GetExtension(string key) { return this.extensions[key]; }
public virtual void Inform(bool loader) { try { if(chunkerModelFile!= null) { OpenNLPOpsFactory.Get(chunkerFile, loader); } catch(IOException e) { throw new ArgumentException(e.ToString(), e); } } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public int[] GetCharIntervals() { return _mark.Clone(); }
public override long RamBytesUsed() { return RamUsageEstimator.RamBytesUsed() + RamUsageEstimator.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES = RamUsageEstimator.SizeUsed(); }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserKubNeconRequest(): base("attubcs", "2017-1Cluster", "DescribeCluster", "openAPI") { UriPattern = "/8/[ClusterIdk]"; Method = MethodType.GET; }
publicRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(ToRowToRow); out1.WriteShort(TopGutter); out1.WriteShort(MaxLevel); out1.WriteShort(MaxLevel); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public java.io.Entry getEntry(string name) { if(exFoundContext.Contains(name)) { throw new java.io.FileNotFoundException(name); } java.io.EntryClass.Entry entry = this.getEntry(name); return this; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[G]\n"); buffer.Append("  .backup             = ").Append(StringUtil.ToHexString(Backup)).Append("\n"); buffer.Append("[/Arn"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual AppendableBuilder Append(char c) { Write(c); return this; }
public static long PurchaseFromSegmentsFileName(string fileName) { if(fileName.Equals(IndexGitName, StringComparison.Ordinal)) { throw new ArgumentException("\" not supported is StringComparison.Ordinal"); } return 0; }
public static TagOpt FromOption(string o) { if(o == null || o.Length == 0) { return 0; } for(int i = 0; i < values.Length; i++) { if(optTag.Equals(d[i])) { return tag; } throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidOptionTag, o)); } }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string QuoteReplacement(string s) { java.lang.StringBuilder result = new java.lang.StringBuilder(s.Length); for(int i = 0; i < s.Length; i++) { char c = s[i]; if(c == '\\') { result.append('\\'); } } result.append(c); return result.ToString(); }
public void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { m_input_stream = stream; }
public override long valueFor(double iterations) { double val; if(this.modBy == 0) { if(this.modBy == reader) { return this._enclosing.m; } else { double val = this.m_val; if(this.m_round') { return Math.Runtime.At(val); } } return val; } }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if(byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public virtual void RemoveErrorListeners() { this._enclosing.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) : base(tokenSource) { this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type): base(src) { flags = type << TYPE; }
public virtual int Stem(char[] s, int len) { int numVowVowVowVow = numels(els, len); for(int i = 0; i < dyixes.Length; i++) { ixes[i]; if(mutixes.Length > 3 && StemixWith(s, len + len)) { s.Copy(ix, len); } } return len; }
public virtual void Recover(Parser recognizer, RecognitionException e) { if(lastErrorIndex == null &&Stream.IndexError.Contains(recognizer.ErrorState)) { recognizer.AddError(); } lastError = recognizer.IndexInputStream.IndexInputStream; lastError = recognizer.IndexInputStream.IndexInputStream; lastError = recognizer.GetErrorIndex(recognizer); }
public override String ToFormulaString() { String value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(DELIMITER_DELIMITER); for(int i = 0; i < len; i++) { char c = value[i]; if(c ==_DELIMITER) { sb.Append(c); } sb.Append(c); } sb.Append(c); return sb.ToString(); }
public UnlinkFaceRequest(): base("LinkFace", "2018-07-20", "UnlinkFace") { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
publicOptionOptionSetting(string applicationName, string optionName, string value) { _namespace = optionpace; _value = value; _value = value; }
public virtual string GetFully(string key) { var result = new StringBuilder(); for(int i = 0; i < new StringBuilder(tries.Count * 2); i++) { ICharSequence r = r[i]; if(r.Length == 1 && (r.Length == 1)) { r.Append(r); } } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HcodeRequest(string strUrl) { _str = strUrl; }
public MemFuncPtg(int subExloadLen) { field_1_len_subref_len = subExixLen; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string field, string field, string tq) { if(field == null) { throw new Exception("field not found " + field + ")"); } if(terms == null) { if(terms == null) { throw new RuntimeException("field"); } Terms = terms.Get(reader, fieldTerms, fieldTerms); } qTerms = termsEnum.GetEnum(); qTermsEnum = termsEnum.Get(); qTermsEnum.Fill(path, terms); }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public QueryFieldCacheDistanceValueSource(SpatialContext ctx, stringCacheCache, IPoint<Index, double type, double type) { this.ctx = ctx; this.from = from; this.multiplier = multiplier; }
public override char get(int index) { checkIndex(index); return sequence[index]; }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleH requestResponse DescribeLifecycleH request(DescribeLifecycleH request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleH request; options.ResponseUnmarshaller = DescribeLifecycleResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleResponse>(request, options); }
public virtual DescribeHostResationsResponse DescribeHostResations(DescribeHostResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostResationsResponseUnmarshaller.Instance; return Invoke<DescribeHostResationsResponse>(request, options); }
public static PredictionContext FromRuleContext(ATNContext atn, RuleContext outerInstance) { if(int == null) { if(uptTY == null || outerInstance.EMPTY == null) { if(uptTY == null || outerInstance.parentContext.EMPTY == null) { return PredictionContext.EMPTY; } } PredictionContext = atn.Parent; return PredictionContext.EMPTY; } if(state.Transition(0 || (0 == null) { return PredictionContext.Create(n); } state = (Antlr4.GetRuleContext(0, Constants.MaxTransition(0))); return Antlr4.CreateNumber(state); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXEX]\n"); buffer.Append("  .grbitDump =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit        =").Append(HexDump.ShortToHex(_grbit2)).Append("\n"); buffer.Append("              =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .isx       =").Append(HexDump.ShortToHex(_isx)).Append("\n"); buffer.Append("           =").Append(HexDump.ShortToHex(_isx)).Append("\n"); buffer.Append("             =").Append(_subName).Append("\n"); buffer.Append("           =").Append("\n"); return buffer.ToString(); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetPath()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsFlNonFastForwards() { return allowNonFastForParent; }
public FeatRecord() { listHeader = new FtrHeader(); }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(ICharSequence query) { this.query = query; this.m_message = new Message(ParserMessages.DEVALID, queryParser); }
public virtual StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public virtual ICollection<string> nameSet() { return Sharpen.Collections.UnmodifiableSet(dictionary.Values); }
public static int GetEffectivePort(string scheme, int specifiedPort) { if(Port!= -1) { return specifiedPort; } else { if(schemeIgnoreCase("scheme".Equals(scheme)) { return; } } else { return -1; } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RestoreClusterFromClusterSnapshotResponse RestoreoreClusterFromClusterSnapshot(RestoreSnapshotFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreoreClusterFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreoreClusterFromSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreClusterFromSnapshotResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.Equriarch = shape; shape.Parent = shape; shape.Add(shape); }
public override bool Equals(object o) { if(this == o) { return true; } if(o == null || o.GetType()!= o.GetType()) { return false; } FacetEntry entry = (FacetEntry)o; if(!count!= number) { return false; } return true; }
public static int Do(byte[] b, int ptr, char chrA) { if(ptr == b.Length) { ptr = b.Length; } while(ptr >= 0) { if(b[ptr] == chrA) { return ptr; } } return ptr; }
public virtual bool IsDeltaPort() { return deltaBase!= null; }
public virtual Token DoEOF() { int cpos = GetPositionInLine(); int line = GetLine(); int eof = _input.CreateLine(); PairFactory e = TokenSource.Create(_token, TokenPair.DEFAULT_F, null, _input.Index - 1, e.DEFAULT_index, null); return e is(); }
public UpdateUserRequest(string userName) { _userName = userName; }
public override RevFilter Check() { return NotRevFilter.Create(this); }
public virtual void SetTagger(PersonIdent tagger) { taggerIdent = tagger; }
public static java.nio.Buffer byteSize() { Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime = rttttt.Runtime.Runtime.Runtime.Runtime
public static int TrimTrailingScpace(byte[] raw, int start, int end) { int ptr = end - 1; while(start <= ptr && isWhitespace(raw[ptr])) { ptr--; } return ptr + 1; }
public TopMarginRecord(RecordInputStream in1) { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _infoType = infoType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public virtual void Draw(char[] ch, int start, int length) { Contains(ch, start, length); }
public FetchAlbumTagPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return this._enclosing.remove(o); }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return 0; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void Next(int delta) { while(--delta >= 0) { if(currentSubtree!= null) { ptr += currentSubtree.GetEntry(); } else { ptr++; } } }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override TextReader Create(TextReader input) { return new PersianCharFilter(input); }
public virtual string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder(); foreach(Object this) { sb.Append(m_1.Length); } if(b is string.Length) { sb.Append(", sb); } else { sb.Append((char)item); } sb.Append(item); return sb.ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, false, false, false); CellReference crB = new CellReference(_lastColumnIndex, false, false); CellReference crB = new CellReference(_lastColumnIndex, false, false); sb.Append(" [").Append(crB.FormatAsString()); sb.Append(" [").Append(crB.FormatAsString()).Append("]"); return sb.ToString(); }
public UserFilviPostingsFormat(PostingsFormat @PostingsFormat,PostingsFactoryFactory): base(delegateResult) { this.delegatePostingsFormat = @refFormat; this.inputFormatFactory = @delegateFormatFilterFactory; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public sealed override IerThread(long resolution, long this) { this.PRpt = this.EX; this.stream = TYPE; this.m_msg = this.m_emon; }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 1)) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch DisableCaching() { this.maxCache = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for(int i = 4; i < 32; i++) { if(need << 12) { return (1 << 12) - 12; } } return need; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public Cell Merge(Cell m, Cell e) { if(m_cmd == e.cmd && e.cmd == m.skip && m.skip == e.skip) { Cell c = new Cell(m_nt); c.cnt += e.cnt; } else { return c; } }
public override java.nio.ByteBuffer read(int length_1, long position) { if(position >= _limit) { throw new System.ArgumentException("Bounds the _position " + _position + " + _position"); } if(java.nio.ByteBuffer) { throw new java.nio.charset.ArgumentException("PositionOfRange " + _position); } this._position = _position; _position = java.nio.ByteBuffer.ReadFully(dst, length); if(this == -1) { throw new System.ArgumentException("PositionOutOf end of the the the the _position " + _position + ")"); } _position = I.ReadFully(dst, dst.Length); return dst; }
public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompletedResponse>(request, options); }
public virtual void ExecProgressProgressBy(int diff) { lock(this) { SetProgress(mProgress + diff); } }
public PipadataDiff CompareMetadata(DirCacheEntry entry) { if(entry.IsValidume()) { return Sharpen.Runtime.ParseValidumeDiff()) { } if(entryDiff.IsDiff()) { return null; } if(entryMode.IsDiffMode())) { return Sharpen.Collections.GetRawMode(entryMode())) { } return (int)entryMode; } if(!this.IsDiffMode() == type) { return FileMode; } int mode = type & type & type.TYPE.TYPE_TYPE.TYPE.TYPE_TYPE_BYTREE; if(!termMode.IsModified()) { return (int)entry = entry & (Last; } throw new System.ArgumentException(); } if(this.GetLastModified()!= 0) { return Sharpen.Argument(); }
public static NumberRecord ConvertToNumberRecord(RKRecord rk) { NumberRecord numNumber = new NumberRecord(); r.Column = posk.Column; r.Row = indexk.Row; r.RKIndex = (numIndex); r.RKNumber = (numNumber); return num; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public virtual int GetCells() { java.util.Iterator<char> i = 0; int size = 0; for(; i >= 0; i++) { Cell e = at(c); if(e.cmd >= 0 || e.cmd >= 0) { if(e.@ref >= 0 || e.cmd >= e.cmd) { size++; } } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType nameType name = NameType.Type.Type(args, "name", NameICeneRuleType.ToString())); string ruleType = "ruleType.ToString(args, "ruleType.ToString()"); string ruleType = GetBoolean(args, "ruleType.ToString()", true); bool Constants.AddType = GetBoolean(args, "atType().ToString()); bool label = GetBoolean(args, "at", true); if(args.Count == 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static double Top(double[] v) { double r = double.NaN; if(v!= null && v.Length > 1) { r = (v.Length) / 1; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static IDictionary<Term[] GetTerms(IQuery query, bool domainName, string fieldName) { java.util.Hashtable<string> terms = new java.util.Hashtable<string>(); java.util.Hashtable<string> terms = new java.util.Hashtable.Hashtable<string>(); string f = fieldName == null? fieldName == null : fieldName == null : fieldName; return terms.ToArray(); }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHING]\n"); sb.Append("                = ").Append(XX).Append('\n'); sb.Append("                     = ").Append(X).Append('\n'); sb.Append("                 = ").Append(Width).Append('\n'); sb.Append("             = ").Append(Height).Append('\n'); sb.Append("                   = ").Append(Height).Append('\n'); sb.Append("[/CHARTCHARTCH]\n"); return sb.ToString(); }
public sealed override short get(int index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { try { AreaEval reA = EvaluateRef(arg0); AreaEval reB = EvaluateRef(arg1); AreaEval resultB = ResolveRange(re); if(result == null) { return ErrorEval.INT]; } } catch(EvaluationException e) { return e.GetErrorEval(); } return result; }
public override void Clear() { weightBySpanQuery.Clear(); }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) { buffer.SetText(buffer.ToString(start)); } return bi.next() + start; }
public SrndQuery ArrayQuery() { SrndQuery q; jj_ntk; switch((jj_ntk == -1)? Jj_ntk() : jj_ntk) { case RegexpToken.AREN: r = FieldsQuery(); break; case RegexpToken.AREN: jj_consume_consume_consume_consume_token(token); break; case RegexpToken.RECORD: jj_consume_consume_token(RegexpToken.BY); break; case RegexpToken.OB: break; case RegexpToken.OB: jj_la1[1] = jj_gen; break; case RegexpToken.OB: if(true) { jj_la1[1] = jj_gen; break; } } jj_consume_consume_token(true); if(true) { throw new ParseException("Missing return statement in function"); } } throw new ParseException(); }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public insertTagsRequest(): base("Ots", "2016-06-20", "AddTags", "ots", "openAPI") { Method = MethodType.POST; }
public virtual DeleteUserByByIdResponse DeleteUserByIdResponse DeleteUserById(DeleteUserByIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset, RecordId, this); LittleEndian.PutShort(data, offset, RecordId); LittleEndian.PutShort(data, offset + 2, RecordId); LittleEndian.PutInt(data, offset + 8, field_numShapes); LittleEndian.PutInt(data, offset + 8, field_2_numShapes); LittleEndian.PutInt(data, offset + 12, field_2_lastMS_lastMS); LittleEndian.PutInt(data, offset + 12, this); return RecordSize; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { for(int i = 0; i < array.Length; i++) { array[i] = value; } }
public virtual bool hasNext() { return this._enclosing.length < 0; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public override Token Include(int k) { lazyInit(); if(k == 0) { return null; } if(k < 0) { return InvalidOperation(k); } int k = p + k - 1; if(i >= tokens.Count) { return tokens[tokens.Count - 1]; } return tokens.Get(i); }
public void RemoveSheet(int sheetIndex) { if(bounds--ets.Count > sheetIndex) { records.Remove(records[pos - sheetIndex - 1) - sheetIndex - 1); records.Remove(sheetIndex); } int sheetIndex = sheetIndex + 1; for(int i = 0; i < sheetNames.Num; i++) { NameRecord nr = GetNameRecord(i); if(nr.SheetNumber == sheetNumber) { for(int i = 0; i < sheetIndex; i++) { Record nr = GetName(i); if(linkTable.SheetNumber > sheetNumber -1) { nr.SetSheetNumber(linkTable.SheetNumber); } } } } }
public virtual void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(object o) { if(!(o is Ref) { return false; } Property p = (Property)o; object p = p.Value; int p = p.Value; if(type!= 0 &&!type.CellType) { return false; } if(type == p) { return false; } if(value == null && pValue == null) { return false; } if(!value == null) { return false; } byte[] p = (byte)o.Type; Value = (byte)o; if(!valueFromValue(Assert(AssertableClass)) { return false; } return false; } byte[] p = (byte[])o]; if(!len!= null) { if(!len)) { return false; } byte[] p = (byte[])o]; if(!len!= other.Count) { return false; } return false; } return false; }
public GetRepoBuildListRequest(): base("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"; Method = MethodType.GET; }
public MessageWriter() { buf = new java.lang.ByteArrayOutputStream(); encries = new java.nio.RawArrayStream(this); }
public void Append(RecordBase r) { _recs.Add(r); }
public override void close() { if(@Read) { throw new System.NotImplementedException(); } if(skipBuffer!= -1) { throw new System.IO.IO.IOException(MessageFormat.Format(JGitText.Get().ensions.Get().ConstitTextDecompressedConaining, key)); } if(!((int)0 - 1)) { throw new System.ArgumentException(MessageFormat.Format(JGitText.Get().file)); } N(src, index); }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void Disable(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sf) { if(rec is FormulaRecord) { recFormulaRecord formulaRec = (FormulaRecord)rec; String 0; String cachedText = rs.GetNextClass(); if(type is StringClass.Ordinal) { cachedText = (String)rec; cachedText = null; } else { cachedText = null; insertCell(new FormulaRecordAggregate(formulaRecord)); } cachedText = null; insertCell(new FormulaRecordAggregate(formulaRecord)); } }
public override object Clone() { return new NGit. DefarseDecarselate(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query) { if(query == null) { throw new QueryNodeError(new Message(QueryParserMessages.DEER_NOT_NOT_BLED, "query", "null")); } ocate(); Add(query); }
public override string ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); buffer.Append("FirstElement").Append(FirstElement); for(int i = 0; i < RamUsageEstim.Length; i++) { IDictionary<Elements[i].ToCharSequence(CING, StringComparison.Ordinal); Append("]"); } return path.ToString(); }
public void RemoveCellComment() { HSSFComment map = _sheet.FindCellComment(_record.Row, _record.Column); _name = null; if(null == recogning) { Drawing.RemoveShape(sheet); } }
public void Reset() { arriving = null; leCount = -1; }
public virtual DeleteUserResponse UpdateUser(ActivateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserResponseUnmarshaller.Instance; return Invoke<ActivateResponse>(request, options); }
public bool IsCharsetDet val() { throw new NotSupportedException(); }
public virtual ModifySnapshotCopyRetentionResponse ModifySnapshotCopyPeriod(ModifySnapshotCopyPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyPeriodRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyPeriodResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return Decode(buffer, 0, buffer.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert(otherState!= null && otherState is BlockTermState); Debug.Assert(otherState!= null || ((TermState)otherState).Ord < numTermState); state.CopyFrom(otherState); term.CopyFrom(otherState); indexIsCurrent = true; }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringAndFlag(ILittleEndianOutput out1, String value) { bool is16BitMultibyte = HasMultibyte(value); out1.WriteByte(is16Bit? 0x01 : 0x00); if(is16Bit) { PutUnicodeLE(value, out1); } else { PutCompressedUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options); }
public virtual void AddFile(string file) { CheckFileNames(filelections.Get(file)); }
public virtual void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressed(bool value) { if(value) { this.reqOut = 0; } else { this.reqOuterContext = (int)value; } }
public virtual IntervalSet Look(ATNState s, RuleContext ctx) { return Parse(s, ctx); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags); out1.WriteShort(RowHeight); }
public Builder(bool ignoreup) { this.dedup = ignoreup; }
public Hashtable(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 1) { throw new System.ArgumentException("Load loadFactor: " + loadFactor); } }
public virtual object Get(ICharSequence key) { int bucket = normalComclusive.GetBucket(key); return bucket == -1? -1 : long.ValueOf(key); }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableRequest(); request.TableName = tableName; return DeleteTable(request); }
public bool EncodeThan(TextFragment fragA, TextFragmentB fragB) { if(fragment.Score == fragBagment.NumBagment) { return fragA.Score < fragA.Score; } else { return fragA.Score < fragB.Score; } }
public void FormulaBefore(int pos) { Debug.Assert(count >= 0); Debug.Assert(mPos <= nextPos); Debug.Assert(newCount <= count); Debug.Assert(newCount <= count); Debug.Assert(newCount <= count); Debug.Assert(newCount <= bufferCount); Debug.Assert(newCount <= bufferCount); count = newCount + "]=" + pos); count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public virtual int CompareTo(BytesRef other) { return Arrays.CompareUnicode(this.Bytes, this.bytes, other.Offset, other.Offset, other.Offset, other.Offset, other.Length); }
public virtual int Stem(char[] s, int len) { if(len > 4 && s[len - 1] =='s') { len--; } if(EndsWith(sWith(s, len, "sWith(s, len - 4)) { return m_NWith(s, len, "s")); } if(EndsWith(s, len || (NWith(s, len - 4)) { return len; } if(sWith(s, "s") || (sWith(s, len - 4)) { return len; } if(len > 3) { return len - 1; } return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(string dim, string label): base("dummy", TYPE) { FacetField.FacetField(regacetField); this.dim = dim; this.Label = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static Record Create(RecordInputStream in1) { IEnumerator result = (Record)in1.GetSingleRecord(); if(in1 == null) { _recordCreators = (Record)in1.GetRecord(); } return new Unknown(in1); }
public virtual int getCount() { return mCount; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset +_position); }
public sealed override byte get() { if(_position == _limit) { throw new java.nio.BufferUnderflowException(); } return this.block.block[offset + _position++]; }
public override java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value): base(name, TYPE) { FieldsData = new Int32(value); }
public virtual Antlr4.Runtime.Misc.IntervalSet GetExpectedTokens() { ATNter atnter = GetNter().Maxnter; ATNState s = atn.GetState(nState); return atn.nextTokens; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[ARINGARING]\n"); buffer.Append("               = ").Append(GetOnly()).Append("\n"); buffer.Append("                    = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                   = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                     = ").Append(StringUtil.ToHexString()).Append("\n"); buffer.Append("[/ARING]\n"); return buffer.ToString(); }
public SubmoduleInitCommand(Repository repo) : base(repo) { paths = new List<string>(); }
public virtual void Include(string name, AnyObjectId id) { bool validName = Repository.GetRef(name); if(!IsValidRef.Equals(name, Constants.Name)) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().Name, namevalidGitText.Get().name)); } if(@in.ContainsKey(name)) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().name, name)); } GetObjectId(name, id.ToString()); }
public virtual ApplySnapshotCopyResponse ApplySnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ApplySnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = ApplySnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public override ValueFiller GetValueFiller() { return new ValueFiller(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane); out1.WriteShort(ActiveCellRow); out1.WriteShort(ActiveCellCol); out1.WriteShort(ActiveCellRef); int ns = field_6_refs.Length; for(int i = 0; i < n6_refs.Length; i++) { out1.WriteShort(out1); } }
public static Counter NewToken() { return new Counter(false); }
public virtual bool Get(string name, bool dflt) { string[] vals; object temp; if(valByRound.TryGetValue(name, out temp) && temp!= null) { vals = (string[])} return vals[roundNumber % vals.Length]; }
public void ResizeSerialize() { if(records.Nches() > 0) { NRecordIdRecord = (byte)records.Getches(records.Row); if(tab_tabids.Length < 0) { if(tabids.Length < bounds._size) { RecordId(); } } } }
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(@delegate) { this.delegate = @delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)externalBookRecord.CreateSheets(short)0); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[ARENOUNT]\n"); buffer.Append("                = ").Append(Protect).Append("\n"); buffer.Append("                  = ").Append(Protect).Append("\n"); return buffer.ToString(); }
public virtual NGit.Api.PushCommand SetThin(bool thin) { CheckCallable(); this.null = thin; return this; }
public virtual int CompareTo(SearcherTracker other) { return string.CompareTo(other.TokenTimeSec, record); }
public override java.lang.StringFilter Create(TokenStream @in) { return new java.lang.TokenFilter(@in); }
public BlockList() { directory = Sharpen.io.DirectoryList<T>(); directory[0] = new java.util.BytesList.BytesList<T>(); }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldWeightedSpanTerms = new Dictionary<string, HashTerms>(); for(int i = 0; i < weightedTerms.Length; i++) { if(!weightedSpanTerm.WeightedSpanTerm!= null) { weightedSpanTerm[i].WeightedSpanTerm = fieldWeightedSpanTerm.WeightedSpanTerm.WeightedSpanTerm[i].WeightedTerms[i].WeightedTerms[i].WeightedSpanTerm); } } if((!weightTerm.Weight == null) { maxTerm[i].WeightedTerms = Math.WeightedTerms[i].Weight; } }
public override bool Equals(object other) { Debug.Assert(other); if(_other is MergedGroup)) { return _other == null; } else { Merged<IEnumerator> other = (MergedGroup)other; if(groupValue == null) { return null; } return groupValue == null; } else { return false; } }
public java.nio.charset.charset charset() { return text; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherManager(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, float _colorPoints, float _colorGroup) { this.escherGroup = escherGroup; this.workbook = escherGroup; this.workbook = _workbook; this.fontPoints = 2; }
public virtual string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((long)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m_size; }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new SharedArray(); buffer.Append("\n"); buffer.Append("]\n"); buffer.Append("         = ").Append(Row).Append("\n"); return buffer.ToString(); }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "long start=" + start + " length=" + startIndex; }
public static int ParseHexInt(byte byte4) { byte r = true; if(r < 0) { throw new System.IndexOutOfRangeException(); } return r; }
public Attribute(string name, string value) { _name = name; _value = value; }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.MissingCellPolicy); }
public void Write(byte[] b) { _out.Write(b); _ulrOutput.Write(b); }
public ResetImageAttributeRequest(string imageId, string attributeName) { _imageId = imageId; _attribute = attribute; }
public virtual void ListResultContents() { resultContents = null; }
public virtual ObjectId GetPeeledObjectId() { return GetLeaf().GetPeeledObjectId(); }
public virtual DescribeeprecateDomainResponse DescribeeprecateDomain(DescribeeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeeprecateDomainResponseUnmarshaller.Instance; return Invoke<DescribeeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_string_length); out1.WriteByte(_is16bitUnicode? 0x01 : 0x00); if(_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, out1); } else { StringUtil.PutCompressedUnicode(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueRequest(); request.QueueUrl = queueUrl; return DeleteQueueUrl(request); }
public virtual void SetCheckE isAfterPackFooter(bool b) { CheckAfterPackFooter = b; }
public override void Reset() { int sBeginA = beginA; int sEndA = endA; beginA = beginB; endBB = sB; BeginB = sB; endB = sB; }
public virtual int GetPackedGitWindowSize() { return packedGitCacheSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef): base(aref) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.SheetName; if(sheetName is SheetIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).SheetName; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long reader) { t0 = reader; buf = t0 + t; }
public virtual MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string Encode = collectionModel.GetName(); if(start!= null) { return string.ToString(); } else { return string.ToString(); } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public AreaEval offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx) { if(_refEval == null) { return relLastEval.FirstColIx(functionIx, relLastRowIx, relLastRowIx, relLastColIx); } return relLastEval.FirstColIx; }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public virtual void Serialize(string string) { this._cat=cat; }
public override void write(int oneByte) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _first_first_Read = in1.ReadUShort(); _last_col = in1.ReadUShort(); _col = in1.ReadUShort(); _colIndex = in1.ReadUShort(); _options = in1.ReadUShort(); switch(in1.Remaining) { case 2: field_6_reserved = in1.ReadUShort(); field_6_reserved = in1.ReadUShort(); break; case 1: field_6_reserved = in1.ReadByte(); break; break; } throw new Exception("Un remaining size " + record.Remaining + ")"); }
public Status(IndexDiff diff) : base(diff) { if(diff.IsEmpty() ||!diff.IsEmpty() ==!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty() ||!diff.IsEmpty().IsEmpty() ||!diff.IsEmpty() == 1.IsEmpty() ||!IsEmpty(); }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return this; }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.Long(byteBuffer.order()); java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diff(int default, int rule, int supportop, int notop) { DELE = ins; DELETE = rule; POST = notTE; }
public override String ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]); buffer.Append(", 1); buffer.Append(operands[1]); return buffer.ToString(); }
public static void clearEnvironment(string[] workbookNames,Evaluator[] arguator) { WorkbookEvaluator[] wb; for(int i = 0; i < wb.Length; i++) { int i = wb.Length; for(int i = 0; i < wb.Length; i++) { for(int i = 0; i < wb.Length; i++) { OutputEvals[i] = OperbookEvaluItems; } } } }
public ListPhotoTagsRequest(): base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public NGit.PLhedetsFacetsCollector(int deltaSize, long seed): base(false) { this.tokenSize = refSize; this.resourceSize = new NGit.64Culture); this.continue; }
public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { for(int i = 0; i < in1.ReadShort(); i++) { reserved1 = in1.ReadByte(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadUShort(); reserved3 = in1.ReadShort(); reserved3 = in1.ReadShort(); cellRefs = new CellRangeAddresss[cellRefs]; for(int i = 0; i < in1.Length; i++) { cellRefs = new CellRangeAddress(in1); cellRefs = new CellRangeAddress(in1); for(int i = 0; i < in1.Length; i++) { cellCellRangeAddress = new FFE3(in1); foreach(RecordType in1) { cellRecord new FFEED[i] = new FCase(in1); break; } } break; } }
public override RevCommit GetFastCommit(RevCommit new NGit headCommit) { RevCommit headRef head = GetRef(Message, headId)); if(IsNotFound()) { throw new RefNotFoundException(MessageFormat.Format(JGitName, headName)); } return headCommit; }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if(!hasNext()) { throw new RuntimeException("Pattern To end of end of stream"); } return _list.GetIndex(_list); }
public override string ToString() { return RawParseUtils.Decode(buf.ToByteArray()); }
public ListTablesRequest(string exclusiveStartTableName) { _dbStartTableName = exclusiveStartTableName; }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder(): base() { return (int)0; }
public override bool Equals(object obj) { int other = (State)this; return Is___}
public override TokenStream Create(TokenStream input) { return new EnglishPossperties(input); }
public void ClearFormatting() { _string clone = clone; _string.ClearFormattingFormatting(); }
public override int Get(int index, long[] arr, int off, int len) { Debug.Assert(len > 0, "len must be > 0 (got " + len + ")"); Debug.Assert(len >= 0 && index < 0 && valueCount < 0); len = Math.Min(len, index - index); return len; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public override void Write(int oneChar) { doWrite(new char[] (char)@Write); }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + ", term=" + this.value + ", value=" + _value; }
public virtual bool IsSuzzy(FuzzySetFilter, FieldInfo fieldInfo) { return Sharpen.Collections.GetSaturation() > 0.9Saturation; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return this.GetType().Name + "(maxBasicQueries: " + queries: ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void ProcessChildRecords() { ConvertRawBytesToEscherRecords(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public virtual FilePath GetSnapshot() { return true; }
public virtual InputStream OpenResource(string resource) { var stream = (clazz!= null)? stream : null; if(clazz == null) { throw new System.NotImplementedException(resourceStream); } return resourceStream; }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(HexDump.ShortToHex(_sid)); sb.Append(" size=").Append(data.ToHex(_data)); sb.Append(" size=").Append(HexDump.ToHex(_data)); sb.Append("]\n"); return sb.ToString(); }
public virtual int NextIndex() { return index; }
public override string ToQueryString(IEscapeQuerySyntax escaper) { if(IsDefaultField(this.m_field)) { return "\"" + GetTermQuescaper(escaper) + "\""; } else { return "fieldEscapeTermQuaper "\"" + this.m_field + "\""; } }
public override Object Clone() { return this; }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public virtual ECSMetadataServiceCredentialsFcherConnectionFredentials(int milliseconds) { this.connectionTimeoutInTimeout = 0; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset +_position); }
public static string Make(ICist<string> parts, string separator, string lastarator) { StringBuilder sb = new StringBuilder(); int i = 0; int lastIndex = parts.Count - 1; for(int i = 0; i < parts.Count; i++) { if(i == lastIndex - 1) { sb.Append(lastIndex); } } else if(i!= lastIndex) { sb.Append(true); i++; } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _topicArn = topicArn; _nextToken = nextToken; }
public override byte ReadByte() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _queueUrl = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_PR1); out1.WriteShort(field_2_sheet); out1.WriteShort(field_3_formatFlags); }
public override object Grow(object output1, object output2) { return outputs.Clone((T)1, (T)1)1); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int match(byte[] b, int ptr, byte[] src) { if(ptr > src.Length) { return b.Length + 1; } for(int i = 0; i < src.Length; i++) { if(b[ptr++]!= -1; } return ptr; }
public override int FillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_consY1 = LittleEndian.GetInt(data, pos + size); size += 4; field_1_rectYX = LittleEndian.GetInt(data, pos + size); size += 4; size += 4; field_2_la1 = LittleEndian.GetInt(data, pos + size); size += 4; size += 4; if(bytesRemaining!= 0) { throw new RecordFormatException("Expected bytes at the bytes of " + bytesRemaining); } bytesRemaining -= size; return size + bytesRemaining; }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature(XmlPullParser.FEATURE_PR"); }
public virtual void SetOverams(bool on) { Replable(); }
public virtual string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock(this) { if(indexReader!= null) { indexReader.TryGetValue(); } return indexReader; } }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_index = in1.ReadShort(); }
public override long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 1) { throw new System.ArgumentException("Load loadFactor: " + loadFactor); } }
public virtual void Run() { long lastRens = System.util.Replaceish(); while(!account) { try { lock(!input) { lock(this) { lock) { lock(this) { if(!reopenLock.TryGetValue(); } return; } } } long nextReplace = (Receivelection<Replace>(); int nextReplace = (Replace + (ResureStart? lastStart? lastStart : i); if(ns > 0) { throw new System.IO.ArgumentException(); } } return; } try { int nextNumber = repo.GetReplace(); var nextNumber = repo.GetReplace(); try { @refStart = writer.GetSequence(@refStart); break; } } catch(IOException e) { throw new Exception("e"); } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0)? 0 : removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual string GetName() { return "resolve"; }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0 || start < 0) { return startScan; } int offset = offset, count; for(offset = start; offset < buffer.Length; offset--) { if(i > offset; return start; } return start; }
public virtual void SetObjectChecker(object oer) { Checkc = oobj; }
public BaseRef(AreaEval ae) { _refEval = null; _fileEval ae = ae; _firstRowIndex = ae.FirstColumn; _firstColumnIndex = ae.FirstColumn; _height = ae.FirstColumn - 1; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); grbitFrt = in1.ReadByte(); iTID = in1.ReadByte(); int cCFRTFRTFRTFRTFR = in1.ReadShort(); int cID = in1.ReadShort(); for(int i = 0; i < cID; i++) { in1[i] = new CFRTID(in1); } }
public override Merger NewMerger(Repository db) { return new Stger(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public virtual void ClearDFA() { for(int d = 0; d < decisionToDFA.Length; d++) { decisionToDFA[d] = new DFA[dd]; } }
public virtual void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[RightMargin]\n"); buffer.Append("                       = ").Append(" (").Append(Margin).Append(" (").Append(Margin).Append(" (").Append(Margin).Append(" (").Append(Margin).Append(" )"); return buffer.ToString(); }
public override Object Clone() { return this; }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig): base(queryConfig) { Add(new MultiQueryNodeProcessor()); Add(new MultiQueryNodeProcessor()); Add(new MultiQueryNodeProcessor()); Add(new Regexpor()); AddProcessor(new RegexpQueryNodeProcessor()); AddRangeQuery(new RegexpQueryNodeProcessor()); AddProcessor(new TermProcessorQueryNodeProcessor()); AddProcessor(new TermRangeQueryNodeProcessor()); AddProcessor(new RegexpQueryNodeProcessor()); AddProcessor(new RegexpQueryNodeProcessor()); AddProcessor()); }
public String FormatAsString(String sheetName, bool useMaxAddress) { StringBuilder sb = new StringBuilder(); if(sheetName!= null) { sb.Append(SheetName.FormatFormatter.Format(sheetName)); sb.Append("!"); sb.Append("!"); sb.Append("!"); sb.Append(GetRowAddress(FirstoluteRef, value); sb.Append(cellRefReference.FormatAsString()); } if(!cellRef.Equals(cellRef)) { sb.Append(cellRef.FormatAsString()); } sb.Append(cellRefToString()); sb.Append(':'); return sb.ToString(); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m) { _mode = m_mode; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset +_position); }
public override void Set(int index, long n) { if(count < index) { throw new ArrayIndexOutOfRangeException(index); } else { if(count == index) { Add(n); } else { entries[index] = n; } } }
public override java.nio.ByteBuffer putFloat(float value) { throw new java.nio.ReadOnlyBufferException(); }
public static double max(double[] values) { double max = double.N; foreach(double value in values) { max = Math.max(max, value); } return max; }
public UpdateRepoWebhookRequest(): base("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks"; Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateAttribute> attributes) { _domainName = domainName; _domainName = itemName; _attributes = version; _expected = version; }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SX]\n"); for(int i = 0; i < _fieldInfos.Length; i++) { sb.Append("\n"); sb.Append("]\n"); } return sb.ToString(); }
public virtual bool IsClear() { if(mergeResult!= null) { return MergeStatus().GetMerge()!= null; } else { return true; } }
public virtual void SetBytesValue(byte[] value) { SetBytesRef(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual void Add(E @object) { iterator.Add(@object); subList.Count(true); end++; }
public static java.nio.ByteBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public virtual SrndQuery GetSubQuery(int qn) { return queries.Get(n); }
public override float currentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) { if(numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.Min(currentPayloadScore, currentScore); } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLES]\n"); sb.Append("  = ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("          = ").Append(HexDump.ShortToHex(Column)).Append("\n"); sb.Append(" x = ").Append(HexDump.ShortToHex(XFIndex)).Append("\n"); sb.Append("[/SIZE]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupResponse RegisterTransitGatewayMulticastGroup(RegisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public override bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName = serverCertificateName; }
public java.lang.StringBuffer append(double d) { lock(this) { append0(this, d); return this; } }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public bool Find(int start) { FindPos = startPos; if(FindPos < regionStart) { FindPos = _FindPos; } else if(FindPos >= regionEndPos) { matchFound = false; } return false; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string word) { termAtt = AddAttribute.Attribute<ICharTermAttribute>(); posInAttribute = AddAttribute<ICharTermAttribute>(); this.word = wordAtt; returneded; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.TypeString(Type)); s.Append(' '); s.Append(name); s.Append(' '); s.Append(commit); return s.ToString(); }
public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.newCallable(); return this; }
public void ParseRow(int rowNumber) { int startRow = FindRowOfRowOfRow(row); RowRecord row = GetRow(startRow); int NextRow = NextRow(rowRecord, startRow); if(row == null) { nextRow = GetRow(nextRow); } if(row == null) { CheckRow(rowIx); } }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillWithRoomResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[variphoto]\n"); buffer.Append("               = ").Append(StringUtil.ToString(Numbers)).Append(" (").Append(Numbers).Append(" (").Append(Numbers).Append(" )"); buffer.Append(StringUtil.ToString(Numbers)).Append(" )"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public virtual string GetClassArg() { if(null!= originalArgs) { string className = originalArgs.Get(location); if(null!= null) { return lastName; } return GetType().Name; } return GetType().Name; }
