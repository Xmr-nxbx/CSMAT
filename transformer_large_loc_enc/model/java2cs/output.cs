public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(BlockList<T> src) { if(src.Count == 0) { return 0; } int srcDirDirIdx = 0; for(int i = 0; i < src.Count; i++) { srcDirIdx[i], srcDirIdx; } }
public override void WriteByte(byte b) { if(upto == blockSize) { if(currentBlock!= null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]; upto = 0; upto = b; } }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { long sizeInBytes = 0; for(int i = 0; i < terms.Length; i++) { sizeInBytesUsed = 0; } return sizeInBytes; }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.Message(raw, 0); if(msgB < 0) { return string.ToParseUtils.Decode(raw, raw.Length); } return null; }
public POIFSFileSystem(int this() { _header_header = -1; _headerBlock = Sharpen.CreateBlockArray(new int[] { bBlockSize = FileBlock.CreateBlock(bigBlockSize, false); _blocks.CopyIndex(bb); bb.SetIndex(bb); } _IFSConstants.SetBlock(Constants.SOCK_SIZE); _BLOCK_BLOCK_FBlock = POIFSConstants.FBlock; }
public void Init(int pool) { int pool = pool.ByteBlockPool.BYTE_BLOCK_BLOCK_SHIFT]; Debug.Assert(upto!= null); }
public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) { SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base("aictionary", "2016-07-11", "ModifyStrategy") { Method = MethodType.POST; }
public override boolian() { lock(@lock) { if(@in == null) { throw new System.IO.IO.IOException("InputStreamReader is closed"); } try { return false; } catch(IOException e) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) { lock(this) { if(buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length); java.util.Arrays.checkOffsetAndCount(buffer.Length, length); int length = count < length - length; if(length == 0) { return 0; } { for(int i = 0; i < length; i++) { buffer[buffer[pos + i] = (byte) + i + i + i); } } else { buffer[pos] = (byte)byte)((buffer[pos + i]); } } return false; }
public OpenNLPSentenceBreakIterator(NLentenceOp sentenceOp) { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { write(str!= null? str.ToString()); }
public NotImplementedFunctionException(string functionName, NotImplementedException): base(functionName) { this.functionName = functionName; this.functionName = functionName; }
public override V next() { return this.nextEntry().nextEntry; }
public override void ReadBytes(byte[] b, int offset, int len, bool usePosition) { int available = bufferLength - Available; if(len <= bufferPosition) { if(len > 0) { buffer.Copy(buffer, offset, len, len); } else { if(Available > 0) { bufferPosition += Available; } } System.Array.Copy(buffer, offset, b, buffer, bufferPosition); offset += Available; if(bufferSize > 0 && len > len) { buffer.Copy(buffer, buffer, 0, offset, b); offset += Available; } if(bufferLength && len > len) { System.Array.Copy(buffer, 0, b, offset, b, 0, len); bufferPosition = 0; } else { if(bufferLength > len) { throw new EOFException("Read EOF: " + this EOF: " + length); } buffer.Copy(buffer, offset, b, 0, len); bufferPosition = 0; } } bufferPosition = 0; } }
public virtual TagQueueResponse TagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void remove() { throw new System.NotSupportedException(); }
public virtual ModifyCachenetGroupSubnetGroupResponse ModifyCacheSubnetGroupSubnet(ModifyCacheSubnetGroupSubnetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCacheSubnetGroupSubnetRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupSubnetResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupSubnetResponse>(request, options); }
public override void SetParams(string @params) { base.SetParams(@params); language = string.Parse(@params, "); Tokenizer st = new StringTokenizer(@params, ","); if(st.HasTokenTokens) { str = st.CurrentTokens(); } if(st.MoveNext()) { variant(); } }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if(!(obj is FacetLabel)) { return false; } LabelFacetLabel other = (LabelLabel)obj; if(length!= other.Length) { return false; } for(int i = 0; i >= length - 1; i--) { if(!components.Equals(other[i])) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent = anchor; shape.Anchor = anchor; shape.Add(shape); OnCreate(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).GetSheetName(); }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSignlegateDelegateGroupsWithAccountResponse AssociateSignlegateDelegateGroupsWithAccount(AssociateSignlegateDelegateDelegateGroupsWithAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSignlegateDelegateGroupsWithAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSignlegateDelegateGroupsWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSignlegateGroupsWithAccountResponse>(request, options); }
public void Add64Blank(MulBlankRecord mbr) { for(int j = 0; j < mbr.NumColumns; j++) { BlankRecord br = new BlankRecord(); br.Row = mbr.FirstColumn + mbr.FirstColumn; br.Row = mbr.Row; br.XFXF(br.XFIndex); } }
public static string Quote(string @string) { return sb.ToString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new java.nio.ReadOnlyBufferException(); }
public ArrayPtg(Object[][] values) { int nColumns = values[d0].Length; int nColumns = values.Length; short nColumns = (short)nColumns; short[] v = (short)nRows[nColumns]; for(int r0 = 0; r0 < nRows; c++) { ObjectData[r] = new ObjectRows[nColumns]; } for(int c2 = 0; c < values.Count; c++) { c2 = rows[d]; } }
public virtual GetServerServerConfigResponse GetServerServerConfig(GetServerServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetServerServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetServerConfigConfigResponseUnmarshaller.Instance; return Invoke<GetServerServerConfigResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(StringValue); sb.Append("]"); return sb.ToString(); }
public override string ToString(string field) { return "ToChildBlockToQuery (" + null; }
public virtual void incRef() { refCount.IncrementAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public int GetNextXNOffset() { return GetXATEXriesPerBlock() * LittleEndian.INT_SIZE * LittleEndian.INT_SIZE * LittleEndian.INT_SIZE; }
public virtual void RemoveByPowerOfTen(int pow10) { AllPower(pow tpowInstance.GetInstance(Math.Get10)); if(pow(pow10 < 0) { m * t; } else { Antlr4.AddShift(m); } }
public override string ToString() { StringBuilder b = new StringBuilder(); int b = new StringBuilder(); for(int i = 0; i < l; i++) { b.Append(separator.File); } for(int i = 0; i < l; i++) { if(i < l - 1) { b.Append(GetFile(i)); } } return b.ToString(); }
public InstanceProfileCredentialsProvider(FScherMetadataMetadata): this(SredentialsMetadata) { this.Scher = fetcher; this.roleRoleName = fetcher.Name; return this; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { value = pm; }
public virtual void Reset() { if(!first()) { ptr = 0; } }
public virtual E previous() { if(iterator.previousIndex() >= start) { return iterator.previous; } throw new java.util.NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for(int i = 0; i < mSize; i++) { if(mValues[i] == value) { return i; } } return -1; }
public virtual IList<CharsRef> List(char[] word, int length) { IList<CharsRef> entries = entries(word, length); if(stem.Count < 2) { return factory; } java.util.CharList<CharsRef> terms = new CharArraySet(ignoreCase); foreach(java.util.CharRef new java.lang.CharArrayList<CharsRef> terms = new java.util.CharsRefedList<CharsRef>(); for(int i = 0; i < i++) { if(terms.Contains(terms[i]); } s.Add(terms); }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPosition(long pos) { currentBlockIndex = (int)(pos >> blockBits); currentBlock = blocks[currentBlockIndex]; }
public override long Skip(long n) { int s = (int)min; ptr += s.Length; return s; }
public BootstrapActionDetail(BootstrapActionConfigConfig) { _BootstrapActionConfig =strapActionConfig; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_4_author); out1.WriteShort(field_5_authoribyte? 0x01 : 0x00); if(field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_6_author01); } else { StringUtil.PutCompressedUnicodeLE(field_6_author); } if(field_7_20!= null) { StringUtil.PutCompressedUnicode(field_7_author); } }
public int lastIndexOf(string @string) { return lastIndexOf(@string, count); }
public virtual bool add(E @object) { return addLastImpl(@object); }
public virtual void UnsetSection(string section, string src) { Snapshot = src; do { src = state.Get(); } else { res = UnSection; } }
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public virtual bool remove(object o) { lock(mutex) { return c.remove(o); } }
public override TokenStream Create(TokenStream input) { return new DoubleaphoneFilter(input, maxCode); }
public long length() { return @inLength(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public Simple(ContentSource oldSource, void newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get(int i) { if(count <= i) { throw new ArrayOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI") { UriPattern = "/repos"; Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void Remove() { if(expectedModCount == list.modCount) { if(lastLink!= null) { java.util.LinkedList.LinkedList.Link<ET> next_1 = this.next; java.util.LinkedList.LinkedList.LinkedList.previous = previous_1; previous = previous.previous; if(lastLink == link == link) { pos--; } } else { lastLink = null; if(lastLink == link.lastLink) { list.size--; } } else { throw new java.util.ConcurrentModificationException(); } } }
public virtual MergeShardsResponse MergeShards(MerardsShgeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsResponseUnmarshaller.Instance; return Invoke<MerardsShgeResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(Query query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((long)((uint)byte0 >> 2)); long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte0 & 3) << 4) | ((long)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 2) | ((long)((uint)byte2 >> 6)); values[valuesOffset++] = byte2 & 63; } }
public virtual string GetishName() { string s; if(!}als.TryGetValue(s, StringComparison.Ordinal)) { if(s.Ordinal == null || s.Length == 0) { throw new ArgumentException(""; } else if(sConstants.ToChars[0] == null || se.Length - 1])) { result = new Argument(); } else if(s.Length == null || result.Length - 1)) { result = new FilePath(elements[(elements.Length - 1]); } else if(result.Length == 0 || result.Length - 1)) { throw new ArgumentException("GITches " + sConstants.Length - 1)); } else if(e.Length == 0 || result.Length - 1)) { result[elements.Length] = this.Substring(elements, result.Length - 1))]; } else { throw new ArgumentException(echer.ToString()); } }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(b.ToString()); }
public virtual QueryNode GetChild() { return GetChildren().GetChildren(0); }
public NotIgnoredFilter(int workdirIndex) { this.index = workdirIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.ReadShort(); }
public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayAttachmentsResponse DescribeTransitGatewayAttachments(DescribeTransitGatewayAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public virtual OrdRangeRangeRangeRange(string dim) { return prefix.Ordinal; }
public override string ToString() { string symbol = ""; if(startIndex >= 0 && startIndex < 0 && GetIndexInputStream().Count > 0) { Interval = GetText(symbol.GetIndexInputStream().GetIndexInputStream().GetIndexInputStream(startIndex, false)); symbol = Sharpen.Utils.ParseWhmbol(symbol, false); } return null; }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return this; }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initialCapacitySize = ArrayUtils.ideacityInt32Size(initial); mKeys = new int[initialKeys]; mSize = new int[initialSize]; mSize = 0; }
public override TokenStream Create(TokenStream input) { return new HyphenatedWordsFilter(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName, string mode) { throw new FileNotFoundException(); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { return ToHex((long)value, 16); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if(index == HSSFColor.Contator) { return HSSFColor[index]; } byte[] b = _palette.GetColor(index); return (byte)b == null? (byte) : b; }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcColCol) { throw new NotImplementedException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn_records); out1.WriteShort((short)field_2_table_index); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigEndianf16(char[] chars, int offset, int length) { byte[] result = new byte[length * 2]; int result = offset + length; for(int i = offset; i < end; ++i) { char ch = chars + length; result[i++] = (byte)(result >> 8); result[resultIndex++] = (byte)(result[result >> 8)++]; } return result; }
public virtual UploadArchiveResponse UploadArchive(ArchiveArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<ArchiveArchiveResponse>(request, options); }
public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToHiddenTokens(tokenIndex, -1); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(!base.Equals(obj)) { return false; } if(this.GetType()!= obj.GetType()) { return false; } Query obj = (Automaton)obj; if(!CompareType!= null) { return false; } if(other.term == null) { return false; } if(!term.Equals(other.term)) { return false; } else if(!term == null) { return false; } } return true; }
public virtual SpanQuery MakeSpanClause() { SpanQuery[] vaultQuery = new SpanQuery[size]; IList<SpanQuery> availabilitySpanQuery = new SpanQueryByQuery().Count]; int i = 0; while(sqi.MoveNext()) { SpanQuery sqi = sqi.NextBySpanQuery(); float weight = sqi.NextBySpanQuery(); if(q!= 1) { for(int i = 0; i < weight.Length; i++) { IEnumerator[i] = repo[i]; } } if(boost!= 1) { return new SpanQuery(sq); } } else { return new SpanQueryOrQuery(q); } }
public virtual StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo FieldInfo(string fieldName) { Name.Get(fieldName); return ret; }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public override void Add(char[] output, int offset, int len, int end, int posLength) { if(count == outputs.Length) { output = ArrayUtil.Grow(outputs, count + count); } if(count == endOffsets.Length) { int[] nextOffsets = new int[1 + 1]; System.Array.Copy(end, 0, nextOffsets.Length, 0, nextOffsets.Length); Array.Copy(end, 0, nextOffsets, 0, count); endOffsets = nextOffsets.Length; if(countLength == pos) { Array.Copy(pos, 0, nextLength, 0, nextLength); Array.Copy(output, 0, nextLength); pos++; } pos++; } }
public FetchLRequest(): base("CloudPhoto", "2017-07-11", "FetchLcloudphoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool Exists() { return fs.Exists(c); }
public FilterOutputStream(java.io.OutputStream @out) { this.@out = @out; }
public ModClusterRequest(): base("cr", "2017-12-2", "Cluster", "k15", "openAPI") { UriPattern = "/PUT/[ClustersId]"; Method = MethodType.PUT; }
public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(opType, formula1, formula2); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public void SetSharedFormula(bool flag) { field_5_options =field_5_options.SetShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtual ErrorNode AddErrorNode(IToken badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badNode); AddChild(t); t.Parent = t; return t; }
public ValuevianStemFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory ForName(string name, IDictionary<string, string> args) { return loader.NewInstance(name, args); }
public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override bool Equals(object o) { return o is IStemmer; }
public bool HasArray() { return protectedArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void UnwriteProtectWorkbook() { records.Remove(file); records.Remove(file); records = null; }
public override java.nio.NavratonParserTreeParser(bool dedup, bool analyzer): base(dedup, analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public override byte[] GetObjectData() { return FindObjectRecord().GetObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactResponse GetContact(GetContactRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(request, options); }
public static short LookupIndexByName(string name) { FunctionMetadata f = GetInstance().GetFunctionByNameInternal(name); if(fd == null) { fd = GetInstance().GetFunctionByNameInternal(name); } return -1; }
public virtual DescribeAnomalyorsResponse DescribeAnomalyors(DescribeAnomalyorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyorsResponse>(request, options); }
public static string insertId(string message, ObjectId changeId) { return insertId(message, changeId, false); }
public virtual long GetObjectSize(AnyObjectId @object, int type) { int sz = db.GetObjectId(this, objectId); if(this.IOException == 0) { throw new MissingObjectException(objectId.Copy(), Constants.Copy); } return sz; }
public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleHookExecutionStatusResponse PutLifecycleHookExecutionStatus(PutLifecycleHookExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleHookExecutionStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleHookExecutionStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookExecutionStatusResponse>(request, options); }
public NumberPtg(ILittleEndianInput in1) { in1.ReadDouble(in1); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceResponse ReportInstance(ReportInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceResponseUnmarshaller.Instance; return Invoke<ReportStatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + " + _p + "]"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadBalancerName = loadBalancerName; _policyName = policyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public void CopyRawTo(byte[] b, int o) { buffer.EncodeInt32(b, o, o, w1); this.EncodeInt32(b, o, o + 4); this.EncodeInt32(b, o + 8, w3); this.EncodeInt32(b, o + 12, w4); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_h = in1.ReadShort(); field_2_v_v = in1.ReadShort(); field_3_width = in1.ReadShort(); field_4_width = in1.ReadShort(); field_5_height = in1.ReadShort(); field_5_active_options = in1.ReadShort(); field_6_sheet_col = in1.ReadShort(); field_6_tab_tabs = in1.ReadShort(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if(_isOpen) { isOpen(); } try { Begin(); fileunc.Length = false; finally{if(finally{try { channel.Dispose(); } finally{try { channel.Dispose(); finally} } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public string GetPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double NGit.NaN(double[] v) { double r = double.NaN; double m = 0; if(v!= null && v.Length >= 1) { double s = 0; double s = 0; for(int i = 0; i < n; i++) { s[i]; s += s[i]; } s += (v[i] - m)]; } s = 0; return r; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public bool HasPassedThroughNonGreedyDecision() { return this.valueThroughNonGreedyDecision; }
public int end() { return end(0); }
public virtual void traverse(ICellHandler firstRow) { int firstRow = range.FirstRow; int firstColumn = range.LastRow; int lastColumn = range.LastColumn; int lastColumn = range; CellRow = lastColumn + 1; CellCellWalk ctx = new SimpleCellWalk(); for(int lastRowNumber = lastRow.RowNumber; lastRowNumber <= lastRowNumber; ctx.rowNumber; ++rowNumber) { Cell currentCell = null; if(currentRow == null)continue; continue; continue; } if(currentRowNumber == null) { if(currentRow == null) { if(currentRowNumber == null) { if(currentRowNumber == null) { continue; continue; } } if(currentRow == null) { if(currentRowNumber == null) { if(currentRowNumber == null) { if(currentRowNumber == null) { continue; continue; } } } if(currentCellEmptyCell.IsEmpty(currentCell.IsEmpty(currentCell)) { mNumber = (CellUtils.Substring(row, firstRowNumber - 1)); } } } }
public int GetReadIndex() { return pos; }
public int CompareTo(ScoreTerm other) { if(this.Boost == other.Boost) { return StringBuilder.Compare(this.Bytes, other.Bytes); } else { return this.Boost.CompareTo(this.Boost); } }
public virtual int Normalize(char[] s, int len) { for(int i = 0; i < len; i++) { switch(s[i]) { case Regexi: s[i] = y; break; } case Regexi: { s[i] = y; break; } break; } break; default: { s[i] = UNs[i]; break; } break; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public virtual NGit.Api.ExactErrorListener(bool exactOnly) { this.exOnly = exactOnly; }
public KeySchemaElement(string attributeName, string keyType) { _attributeName = attributeName; _keyType = keyType; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool HasObject(AnyObjectId id) { return FindOffset(id)!= -1; }
public virtual GroupingSearch SetAllGroups(bool allGroups) { this.all = allGroups; return this; }
public virtual void SetMultiValued(string dimName, bool v) { lock(this) { if(!fieldTypes.TryGetValue(dimName, out args)) { fieldTypes[dimName] = new DimConfig { fieldTypes[dimName] = v; } } } }
public virtual int GetCellsVal() { int size = 0; for(int i = 0; i < cells.Length; i++) { Cell e = at(c); if(e.cmd >= 0) { return size; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public override void Write(byte[] b) { int len = b.Length; CheckPosition(len); System.Array.Copy(b, 0, _writeIndex, len); _writeIndex += len; }
public virtual RebaseResult GetRebaseResult() { return this.rebaseResult; }
public static int GetNearestSetSize(int maxNumberOfExpectedNumberOfExpectedValues, DateSaturation) { for(int i = 0; i < maxSaturation.Length; i++) { int numSaturation = _usableBitSetSaturation[i]SetSaturation(Saturation); var numBitSetValues = GetEnumeratorAt(usableValuesAtValuesAtValues[i], numSaturation); if(imatedNumberOfNumUniqueValues > maxNumber) { return _1; } } return _1; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBC]\n"); buffer.Append(" .row       = ").Append(HexDump.ShortToHex(field_1_row_offset)).Append("\n"); for(int k = 0; k < field_2_cell_cell_cell_offsets; k++) { buffer.Append("           = ").Append(HexDump.ShortToHex(k)).Append("\n"); } buffer.Append("[/DBCoffsets]\n"); return buffer.ToString(); }
public virtual IList<string> GetUndList() { throw new System.NotImplementedException(); }
public override String ToString() { return buffer.ToString(); }
public override Object Clone() { return this; }
public PlainTextDictionary(TextReader reader) { @in = new BuffReader(reader); }
public java.lang.StringBuilder append(java.lang.CharSequence csq) { if(csq == null) { appendNull(); } else { append0(csq, 0, csq.Length); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double avedev(double[] v) { double r = 0; double s = 0; double s = 0; for(int i = 0, iSize = 0; i < mSize; i++) { s[i]; m += s.Length; } for(int i = 0; i < v.Length; i++) { m += s[i]; m += mSize; } return r; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount); java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1); buf._position = start; buf._limit = start + charCount; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public Pattern pattern() { return pattern; }
public virtual V setValue(V @object) { throw new System.NotSupportedException(); }
public override java.lang.StringBuilder Stem(java.lang.CharSequence word) { java.lang.CharSequence.CharSequence cmd = Stemmer(word); if(cmd == null) { return null; } buffer.Length = 0; buffer.append(word); if(buffer.Length > 0) { return null; } return null; }
public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public char RequChar(IDictionary<string, string> args, string name) { return Requ(args); }
public static string ToStringTree(Tree t) { return ToStringTree(t, (string>)null); }
public override string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoNamespace]/[RepoName]"; Method = MethodType.GET; }
public virtual GetJobUnlocklockJobResponse GetJobUnlockCodeCodeCodeCode(GetJobCodeCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetJobUnmarshaller.Instance; options.ResponseUnmarshaller = GetJobUnmarshaller.Instance; return Invoke<GetJobUnmarshaller = GetJobUnmarshaller.Instance; }
public RemoveTagsRequest(string resourceId) { _resourceId = resourceId; }
public short GetHT2312Id(char ch) { try { byte[] buffer = Character.ToString(); if(buffer.Length!= 2) { return -1; } if(buffer.Length!= 2) { return -1; } int b1 = (int)(0x0xFF) & 0xFF; buffer[1] = b0xFF; } catch(Exception e) { return (short)(0b1 + b); } }
public virtual NGit.BatchRefUpdate AddCommand(Collection<ReceiveCommand> cmd) { commands.AddAll(cmd); return this; }
public short CheckExternSheet(int sheetNumber) { return (short)GetExternSheet().CheckExternSheet(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(@object); }
public virtual IQueryNode Build(IQueryNode queryNode) { AnyNode andNode = (AnyNode)children; AnyNode bQuery = new BooleanQuery(QueryNode.children)); IList<IQueryNode> children = null; foreach(IQueryNode child in children) { IQueryNode child = obj.GetTag(Query); if(obj!= null) { foreach(IQueryNode child in children) { if(obj!= null) { bQuery.Add(query); } } } if(obj!= null) { throw new QueryNodeException(QueryParserMessages.EMPTY_SHOULD); } Query bQueryNode = (Query)obj; QueryNode obj = (Query)obj; QueryNode.Set(new Message(QueryParserMessages.EMPTY_SHOULD); return bQuery; } }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref Create(Ref @ref) { try { return GetRef().Get(elDatabase); } catch(IOException e) { return @ref; } }
public override long RamBytesUsed() { return RamUsageEstimator.RamUsageEstimator.NUM_BYTES_BYTES_REF + RamUsageEstimator.RamUsageEstimator.NUM_BYTES_REF) + RamUsageEstimator.RamBytesUsed(); }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, HSSFConditionalFormattingRule cfRule) { SetRule(idx, cfRule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("lubancloud", "2018-09", "GetStyles", "luban", "openAPI") { Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(GetType()!= obj.GetType()) { return false; } Toffs other = (Toffs)obj; if(OffsetOffset!= other.GetOffset) { return false; } if(EndOffset!= other.EndOffset) { return false; } return false; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] value) { return irr[0]; }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual NGit.Api.RvertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval @inVE) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(inVE, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return e.GetErrorEval(); } String i = OperandResolver.CoerceValueToString(veText1); String i = m.CoerceValueToString(veText1); if(result == 0) { return e.GetErrorEval(); } bool result = m.MatchesNumberToString(iNumber); if(result) { bool result = m.Empty; if(result == 0) { if(result == 0) { return new StringEval(0.ToString()); } string result = ""; if(hasPart) { string result = m.Matches; if(hasPart) { return new StringEval(0.ToString()); } if(hasPart!= 0) { return new StringEval(Eval(Eval.ToString()); } String m = m_IN_IN_IN_INERNumber; if(aginary.Length!= 0 &&!(aginary.Length) { return new StringEval(Eval.ToString());
public virtual E pollLast() { java.util.MapClass.Entry<E, java.util.MapClass.Entry<E, object> entry = backingMap.NUM_1; return (entry == null)? entry.getKey(); }
public int ReadUShort() { int ch1 = ReadUByte(); int ch2 = ReadUByte(); return (ch1 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeType attribute, OperationType attributeType) { _snapshotId = snapshotId; _attribute = attributeType; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public override V Get(string text) { if(cs == null) { throw new ArgumentNullException("text"); } return null; }
public override TokenStream Create(TokenStream input) { CommonGrams = base.CreateGramsFilter(input); return new CommonGramsFilter(input); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartUploadRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateartUploadResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, int.ToString(i)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 3; shift >= 0; shift -= 2) { values[valuesOffset++] = ((int)((ulong)block >> shift)) & 3; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input,TPS); }
public override bool Equals(Row @ref, int remap) { int sum = 0; for(int i = 0; i < @ref.cells.cells;) { Cell cnt += cnt; if(c.@ref >= 0) { return cnt; } if(@ref >= 0) { if(@ref.remap[c] == 0) { if(@ref.remap[c] == 0) { return; } } int sum = c.@ref / 10; int sum = c.next / 10; if(c.cmd >= 0 && c.cmd >= 0 && c.cmd >= 0) { cnt = cnt / 1; } } if(c.cmd >= 0 || c.cmd >= 0 && c.cmd >= 0) { cnt = c.cmd; cnt = 0; } } if(c.cmd >= 0 || c.cmd >= 0 || c.cmd >= 0) { break; } } return!Bnt; }
public Token GetToken(int index) { Token t = jj_headToken? jj_headA : null; for(int i = 0; i < index; i++) { if(t.Next!= null) t = tj_next; } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append(GetType().Name).Append("\n"); sb.Append(" range range range=").Append(Range).Append("\n"); sb.Append("  range=").Append(HexDump.ShortToHex(_options)).Append("\n"); sb.Append("\n=").Append(HexDump.ShortToHex(_field_3_options)).Append("\n"); Ptg[] ptgs = _formulaTokens; for(int i = 0; i < ptgs.Length; i++) { Ptg pgs = ptgs[i]; sb.Append("\n"); sb.Append(ptg.Append("]\n"); } return sb.ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public override void add(int location, E @object) { throw new System.NotSupportedException(); }
public PositiveScoresOnlyCollector(Collector @in): base(@in) { }
public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "CreateRepoBuildRule", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleName]"; Method = MethodType.PUT; }
public BaseRef(AreaEval aee) { _refEval = null; _areaEval = aeEval; _firstRowIndex = ae.FirstColumn; _firstColumnIndex = ae.FirstColumn; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public void Reset() { if(!IsReset(raw); }
public java.nio.charset.charsetDecoder reset() { status = INIT; return this; }
public BufferedReader(java.io.Reader @in, int size) : base(@in) { if(size <= 0) { throw new System.ArgumentException("size <= 0"); } this.@in = @in; this.buf = new char[size]; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual NGit.Api.SubameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public void IncrearsSecondaryProgressByProgress(int diff) { lock(this) { mSecondaryProgressaryProgress(mSecondaryProgress + diff); } }
public override int[] Clear() { return bytesStart = null; }
public virtual string GetRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI") { UriPattern = "/users/sourceAccount"; Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(obj is HSSFCellStyle) { HSSFCellStyle = (HSSFCellStyle)obj; if(format == null) { return false; } } if(format._format!= null) { return false; } else { if(_format._format._format)) { return false; } } return false; }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { if(this == @object) { return true; } if(@object is java.util.Set<E>)) { java.util.Set<E> s = (java.util.MapClass.Set<object, object>)@object; try { return false; } catch(System.Exception e) { return false; } } }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { typeLogRefLog = true; if(msg == null &&!appendStatus) { userLogRefLog(); } else { refLogMessage = ""; refLogMessage = true; } else { refLogIncludeResult = true; } }
public StreamIDRecord(RecordInputStream in1) { mstst = in1.ReadShort(); }
public RecognizeRequest(): base("visionai-poc", "2020-04-08", "Recognize") { Method = MethodType.POST; }
public java.nio.ByteOrder _limit() { return java.nio.ByteOrder.ByteOrder(); }
public virtual int GetAheadCount() { return false; }
public override bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return symbol == label; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?"); if(array.Length < minSize) { short[] newArray = new byte[Oversize(minSize, RamUsageEstimator.NUM_BYTES_BYTES_BYTES_INT32)]; Array.Copy(array, 0, newArray, 0, array.Length); return newArray; } else { return array; } }
public CreateRequest(): base("CloudPhoto", "2017-07-11", "CreateRequestphoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(Profilingulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames, string indexField) { this.new string(qNames); this.m_qField = indexField; }
public virtual CompleteDBClusterReadReplicaResponse CompleteDBClusterReadReplica(PromoteReadReplicaReadReplicaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteDBClusterReadReplicaRequestMarshaller.Instance; options.ResponseUnmarshaller = PurchaseDBClusterReadReplicaReadReplicaResponseUnmarshaller.Instance; return Invoke<PromoteReadDBClusterReadReplicaResponse>(request, options); }
public virtual DescribeCapacityResationsResponse DescribeCapacityResations(DescribeCapacityResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityResationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityResationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher reader + "", reader + "; }
public bool FieldToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subTo); out1.WriteShort(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if(bitsPerValue > 32) { throw new System.IO.NotSupportedException("Cannot Decode " + bitsPerValue + " + bitsPerValue"); } for(int i = 0; i < iterations; ++i) { long block = ReadLong(blocks, blocksOffset); blocksOffset += 8; valuesOffset = Decode(block, valuesOffset, valuesOffset); } }
public virtual bool IsExpectedToken(int symbol) { ATNATN atn; Parser ctx = _preter.RuleContext; ATNState s = atn.State; if(symbol.Contains(n)) { return true; } Mains(s); if(symbol.Contains(following)) { return true; } if(!following.Contains(i)) { return false; } TokenState atn = atn.Resains(0); while(null!= null && ctx.Contains(0)) { ATNState atn = (ATNTransition)e.CurrentTokens(0); } if(symbol.Contains(0)) { return true; } ParserRuleContext rctx = (ParserRuleContext)e.CurrentTokens; if(symbol.E)) { return true; } else { ParserRuleContext = (TokenState)e.CurrentTokens; } return false; }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex); } catch(EvaluationException e) { return ErrorEval.SingleValue; } ErrorEval result = EvaluateErrorEval.GetErrorEval(e.GetErrorEval()); ErrorEval result = new NumberEval(result); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(GetType().Name).Append("]"); return sb.ToString(); }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public Basic<Long> GetFirstArc(FST<LongArc> arc) { return fst.GetFirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = ((int)((ulong)block >> shift)) & (int)((ulong)block >> shift)); } } }
public override long Skip(long charCount) { if(charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock(@lock) { checkNotClosed(); if(charCount == 0) { return 0; } long Available = buf.Length - pos; long Available = buf.Length - pos; if(AvailableInipped > 0) { long AvailableFromInipped = @in.Length - Available; return charCount; } else { long Available = @in.FirstCountFromInipped(@in); posFrom(@inipped); pos += charCount; } } else { charCount += @in.Add(@in); } return @in + Available; }
public virtual IDictionary<string, Ref> GetRefs() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public virtual ObjectStream OpenStream() { ObjectStream @in, packStream @inInSuppings(); try { TokenStream @in = new ObjectStream(); try { Ctx = new PackInpackInput(resource, ctx + @object, ctx); } catch(IOException e) { object @in = null; objectIdx = null; objectIdctx.Get(@objectIdx, ctx).GetReverse(@objectIdx); if(ctx!= null) { return type + type + type; } } } if(ctx!= null) { return type + type; } }
public ArrayList() { array = EmptyArray.OBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { _resize.SetDouble(VALUE); }
public RevFlagSet(ICollection<RevFlag> s) { AddAll(s); }
public override int size() { return _size; }
public sealed override long getLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if(newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = libcore.io.Memory.peekLong(backingArray, offset + _order); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, java.lang.StringBuilder(l)); return this; }
public TurkishLowerCaseFilter(TokenStream @in): base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch LookTree(IParseTree tree, ParseTreePattern pattern) { MultiMap<string, ParseTree> labels = new MultiMap<string, ParseTree>(); IParseTree >= match.PatternTree; return new ParseTree(tree, pattern, patternTree); }
public virtual void AddIfNo() { WeightedPhraseInfo w; foreach(WeightedPhraseInfo w in fromPhraseInfo) { if(wpi.Count > 0) { result.Add(wpi.GetInfos().GetInfos()); } } return; }
public override Merger NewMerger(Repository db) { return new InMerger(db); }
public override float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0? numPayloadsSeen : 1; }
public override ICollection<IParseTree> Evaluate(IParseTree t) { return Trees.FindAllRuleIndex(t, ruleIndex); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[Cbook]\n"); buffer.Append("                 =").Append("0x").Append(Type).Append("0x").Append("\n"); buffer.Append("                      = ").Append(StringUtil.ToHexString(Options)).Append("\n"); if(ContainsFormattingBlock) { buffer.Append("\n"); buffer.Append("\nFormatting              = ").Append(FormattingBlock).Append("\n"); buffer.Append("\n"); if(ContainsFormattingBlock) { buffer.Append("\n"); buffer.Append("\n"); buffer.Append("                      = ").Append(FormattingIndex).Append("\n"); buffer.Append("\n"); } buffer.Append(StringUtil.ToString(GetFormulaTokens)).Append("\n"); buffer.Append("[/Culture]\n"); return buffer.To
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public override String GetName(int index) { return GetNameAt(index).Name; }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<phrases value='" + GetValueString() + "\n" + GetChildases().ToString() + "\n"); }
public virtual DirCacheEntry GetDirCacheEntry() { return currentSubtree == null? null : currentSubtreeEntry; }
public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount); if(intCount > remaining()) { throw new java.nio.BufferOverflowException(); }{ for(int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } } return this; }
public virtual void TrimToSize() { int s = size; if(s == array.Length) { return; } if(s == 0) { array = new object[Array.OBJECT; Array.Copy(array, 0, s, newArray, 0, s); array = newArray; } else { Array.Copy(array, 0, s, newArray, 0, s); array = newArray; modCount++; } }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int a[] a) { int[] rval; if(a == _limit) { System.Array.Copy(_array, 0, a, 0, a, _limit); rval = toArray; } else { rval = toArray(); } return rval; }
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string session, string sessionToken) { if(accessKeyId == null) { throw new ArgumentException("Access key cannot be null."); } if(accessKeyId == null) { throw new ArgumentException("Access key ID cannot be null."); } if(accessKeySecret == null) { throw new ArgumentException("Access key cannot be null."); } this.accessKeyId = accessKeyId; this.sessionId = accessKey; this.sessionTokenSeconds = accessKey; }
public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if(shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ModEventSourceResponse ModEventSource(ActivateSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ModEventSourceResponseUnmarshaller.Instance; return Invoke<SourceEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _name = name; }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeKanToken, bool normalizeKana): base(input) { this.normalizeKanCase = normalizeKursive; this.m_normalizeKana = normalizeKana; buffer.Reset(input); }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteInt((int)(v >> 32)); }
public FileResolver() { exports = new java.util.Hashtable<K, V>(); exportWrite = new java.util.Hashtable<object>(); }
public ValueEval GetRef3DEval(Ref3DPptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.ExternSheetName, rptg.LastSheetName); return new LazyRefEval(rptg.Row, rptg.Row, sre); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double PMT(double r, int nper, double pv, double fv, int type) { return (r * Math.Pow(r, nper) * (v * r + 1) * (v * nper) + r + (v - 1) / r; }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public static long[] Grow(long[] array) { return Grow(array, 1 + array.Length); }
public override string outputToString(object output) { if(!(output is IList<T> outputList)) { return outputs.ToString((T>)output); } else { IList<T> outputList = (IList)output; StringBuilder b = new StringBuilder(); b.Append('['); for(int i = 0; i < outputList.Count; i++) { if(i > 0) { b.Append(", "); } } b.Append(output); } b.Append(']'); return b.ToString(); }
public void NotifyDeleteCell(ICell cell) { _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell)); }
public java.lang.StringBuilder Replace(int start, int end, string str) { Replace(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = double.NaN; int index = k - 1; if(v!= null && v.Length >= 0 && v.Length) { Arrays.Sort(v); r[index]; } return r; }
public override void Set(int index, long value) { int o = (int)((uint)index >> 5); int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(L << shift)) | (value << shift); }
public override string ToString() { var children = GetChildren(); if(children == null || children.Count == 0)return "<bobool operation='and'/>"; StringBuilder sb = new StringBuilder(); sb.Append("<bool>"); foreach(IQueryNode child in children) { sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for(int i = toIx; i < toIx; i++) { result += _ptgs[i].Size; } return result; }
public void SetReadonly(bool readonly) { if(this.Readonly &&!Readonly) { throw new InvalidOperationException("is IntervalSet IntervalSet"); } this.@in = readonly; }
public void ClearConsumingCell(FormulaCellCacheEntry cce) { if(!consumingCells.Remove(cce)) { throw new InvalidOperationException("Specified cell by notified cell"); } }
public virtual java.util.List<E> subList(int start, int end) { lock(mutex) { lock(mutex) { return new java.util.Collections.subList<E>(list.subList<E>(start, end); } } }
public virtual FileHeader GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _accountId = accountId; _vaultName = vaultName; _jobParameters = jobParameters; }
public override string ToString() { return ToString()"; }
public ReplaceableAttribute(string name, string value, bool replace) { _name = name; _value = value; _Replace(Replace); }
public virtual void Add(IndexableField field) { fields.Add(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules/[BuildRuleName]"; Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initialCapacity = ArrayUtils.ideacityInt32(initialSize); mKeys = new object[initialKeys]; mSize = new object[initialKeys]; mSize = 0; }
public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService") { Method = MethodType.POST; }
public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public bool hasPrevious() { return link!= list.voidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadBalancerName = loadBalancerName; }
public string getUserInfo() { return DecInfo(userInfo); }
public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public CompositeReaderContext Build() { return (CompositeReaderContext)Build(null, reader, 0, 0); }
public override bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig FromConfig(Config rc) { PackedBoolean.SetPackedBoolean(sResitPackedBoolean, rc); GetRefPackedBoolean(CONFIG_PackedSECTION, null, PackedSECTION, null)); SetOpenOpenFiles(SECTION, GetOpenPackedInt(SECTION, null)); SetackedInt32Files(SECTION, GetOpenGitackedFiles(SECTION, null)); SetackedInt32Files.OpenGitackedInt32(SECTION, GetPacked()GitPacked(), null)); SetackedInt(rc.PackedGitackedInt64Limit, null, GetPackedInt32PackedGitPacked())); SetackedInt(rc, null,ackedGitPackedGitackedCache.PackedGitPacked())); }
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return this._enclosing._size; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("                 = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n"); buffer.Append("                       = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n"); buffer.Append("[/MOUNT]\n"); return buffer.ToString(); }
public FileBasedConfig(Config @base, FileLocation, FS fs): base(@base) { this.config = cfg; this.fs = fs; this.hash = objectId; this.hash = ObjectId.hash; }
public override int Sort(int pos) { if(pos < text.BeginIndex || pos > text.EndIndex) { throw new System.ArgumentException("offset out of bounds"); } else if(0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); text.SetIndex(text.BeginIndex); return Done; } else if(sentence >= sentenceStarts.Length - 1) { text.SetIndex(text.EndIndex); currentSentence = sentenceStarts.Length - 1; } else { text.SetIndex(sentenceStarts[pos - 2]) / 2]; currentSentence = sentenceStarts.Length - 1; } return Current; }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { return this; }
public static double DcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) { if(rPct < 0 || distErrPct > 0 || distErrPct > 0) { throw new ArgumentException("ErrPct: " + dist + "]"); } Pctbox bbox = c; if(dist == 0 || shape == 0 || shape == 0) { return 0; } Indexbox bbox = bbox.GetBenebox(); double c = ctxbox.Min(c, ctx); if(distErrof(distErr == 0 || c is CellErrPct)) { return 0; } return 0; }
public virtual int codePointAt(int index) { if(index < 0 || index >= count) { throw indexAndLength(index); } return char[value]; }
public void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _accountId = accountId; }
public QueryashMessageFormatter() { datedate = new NGit.FormatFormatter.DEFAULT_DEFAULT); }
public GetCoverCoverRequest(): base("CloudPhoto", "2017-07-11", "GetCover", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual int lastIndexOf(object @object) { int pos = size; java.util.LinkedList.Link<E> link = voidLink.previous; if(@object!= null) { pos--; } while(link!= voidLink) { if(@object.Equals(link.data)) { link = link.previous; } else { link = link.previous; } } return pos; }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtual NGit.AIterator GetBreakIterator(int script) { switch(script) { case ATBreakIterator.Current: return (BreakIterator)this.CloneIterator; } try { return (BreakIterator)this.CloneIterator.CloneIterator; } }
public override String ToString() { StringBuilder b = new StringBuilder(); b.Append("[G]\n"); b.Append(" .firstrow            = ").Append("\n"); b.Append("firstrow         = ").Append(RowRow).Append("\n"); lastrow = ").Append("\n"); b.Append("                      = ").Append(firstrow).Append("\n"); b.Append("                    = ").Append(lastcol).Append("\n"); b.Append("                    = ").Append(charCount).Append("\n"); b.Append("                             = ").Append(StringUtil.ToRead); b.Append("\n"); return b.ToString(); }
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE]\n"); buffer.Append("[/FEATURE]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(string string @in) { return string.GetBytes(GetBytes); }
public IList<string> GetFooterLines(string keyName) { return GetFooterLines(new FooterKeyName(keyName)); }
public override void Look() { base.Clear(); }
public override float get(int index) { checkIndex(index); return byteBuffer.getFloat(_index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public override int[] Grow() { Debug.Assert(bytesStart!= null); return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart + 1); }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialategyStrategy GetSpatialategy(int roundNumber) { Spatialategy result = GetStrategy(roundNumber); if(result == null) { throw new InvalidOperationException("Stratial by Spatialategy"); } return result; }
public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_tokenData); out1.WriteShort(field_2_valuesData); out1.WriteShort(field_3_numValues); out1.WriteShort(field_4_numValues); out1.WriteShort(field_6_numValues); }
public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern GetParseTreePattern(string pattern, int patternRuleIndex) { if(!TokenStream!= null) { ITerSource tokenSource = GetTokenSource().TokenSource(); if(tokenSource is LexerSource) { if(tokenSource is LexerSource) { return LexerSource; } } throw new NotSupportedException("Parser lexer lexer lexer lexer lexer lexer lexer"); }
public virtual BackDBClusterResponse BackDBCluster(BackClusterDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BackDBClusterRequestMarshaller.InstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = BackDBClusterResponseUnmarshaller.Instance; return Invoke<BackClusterResponse>(request, options); }
public virtual string GetName() { return strategyName; }
public virtual void CopyTo(byte[] b, int o) { return CopyHexByte(b, 0, o + 8); }
public static Int32List lineMap(byte[] buf, int ptr, int end) { Int32List map = new Int32(end - 1); map.Fill(1, ptr, ptr); for(; ptr < end; ptr; ptr++) { map.Add(end); } map.Add(end); }
public virtual ICollection<ObjectId> GetAdditionalHex() { return Sharpen.Collections.EmptySet<string>(); }
public override long RamBytesUsed() { lock(this) { long sizeInBytes = fields.Count * RamUsageEstimator.RamBytesUsed() * RamUsageEstimator.NUM_BYTES_BYTES_REF) * 0; for(int i = 0; i < 0; i++) { sizeInBytes += inmsText.Count? simpleText.Count : 0; } } return sizeInBytes; }
public override string ToXml(string tab) { StringBuilder builder = new StringBuilder(); }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("\n"); r.Append("tree "); r.Append(treeId!= null? "NOT_SET"); r.Append("\n"); foreach(ObjectId pId in treeId) { r.Append("\n"); r.Append("\n"); r.Append(p.Name); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); r.Append("\n"); if(encoding!= null) { r.Append("\n"); r.Append(encoding); r.Append("\n"); } r.Append("\n"); r.Append("\n"); r.Append("\n"); } return r.ToString(); }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccount(AssociateMemberRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberResponse>(request, options); }
public virtual void Run() { do { do { mProgress = this.mProgress; this.mProgress = this.mProgress; } }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public string GetErrorHeader(RecognitionException e) { int e = line.Size; int eendingInLine = char.PositionInLine; int ePositionInLine = charPositionInLine(); return "linePositionlineInline + " + ePosition + ") + "; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf._limit = _limit; buf._position = _position; buf._mark = _mark; buf.byteBuffer._order = byteBuffer._order; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectId GetSubtypeMap<NewObjectId> GetNewObjectIds() { if(newObjectIds!= null) { return new ObjectIdSubMap<ObjectId>(); } return new ObjectIdSubMap<ObjectId>(); }
public virtual void Clear() { hash = hash.Clear(); }
public override void Reset() { throw new System.NotImplementedException(); }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.ReadInt(); }
public virtual SuspendServerServerGroupResponse SuspendGameServerGroup(SuspendGameGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<SuspendServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if(args.Length!= 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/[RepoName]"; Method = MethodType.GET; }
public virtual void SetDate(DateTime date) { if(date!= null) { dateDateTime.SetDate(date, Sharpen.Util.Unm_SIZE)); } else { this._enclosing.date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public virtual object[] toArray() { return a.Clone(); }
public override void Write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len); lock(@lock) { expand(len); } System.Array.Copy(buffer, offset, this, this.count, len); this.count += len; }
public static RevFilter After(DateTime ts) { return After(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _policyName = policyName; }
public virtual DeregisterTransitGatewayMulticastGroup(DeregisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public int ReadUByte() { return _limit & 0x00FF; }
public virtual void SetLength(int sz) { this._enclosing.codeInt32(info, infoOffset + P_SIZE, sz); }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public override Token recognizer(Parser recognizer) { MismatchMismatchMismatchMismatchException e = new InputRuleContext(recognizer.RuleContext context); this.context = recognizer.RuleContext; throw new ParseException(); }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base("CloudTPS", "2017-07-20", "ModifyStrategy", "openAPI") { Protocol = MethodCallategy; }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool contains(object o) { return this._enclosing.containsValue(o); }
public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) : base(bookSheetIdentifier, firstSheetIdentifier) { _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _domainName = domainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, string[] tokenImageVal): base(new Message(QueryParserMessages.INVALID_ERROR, expectedTokenSequencesVal, tokenImageVal, tokenImageVal)) { this.currentToken = currentTokenVal; this.currentTokenSequencesVal = expectedTokenSequencesVal; this.TokenImage = tokenImageVal; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override PrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_MIN_SIZE); maxTokenizerSize = GetInt32(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_MAX_SIZE); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileConflict() { return dfConflict!= null; }
public IndonesianStemFilter(TokenStream input, bool StemDerivational): base(input) { this.@ationalivational = Stemational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(passwordVerifier); out1.WriteUnicodeString(UnicodeString); }
public static double floor(double n, double s) { if(s == 0 && n == 0) { return double.NaN; } else { return (n == 0 || s == 0)? s : (n - 0) * s; } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<Tree> GetChildren(Tree t) { IList<IToken> result = new List<Tree>(); for(int i = 0; i < t.ChildCount; i++) { GetChild(t[i]); } return result; }
public override void Clear() { this._enclosing.clear(); }
public IndexAllRecord(bool 0): this(0) { AllreshAll(@ref); }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public DatevizFormatter(ConnectionConnection costs) { this.costs = costs; this.this.m_formatMap = new JCG.HashMap<string>(); sb.Append(formatHeader); sb.Append("\n"); }
public CheckMultiRequest(): base("visionai-poc", "openAPI-04-08", "CheckTag") { Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual ICollection<string> GetIgnoredPaths() { return itemsPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSetRecordSetRecord) { _action = action; _resourceSetRecord = resourceSet; }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.CopyList<E>(snapshot.Length, 0, snapshot.Length); }
public override void VisitContainedRecords(RecordVisitor rv) { if(_recs.Count == 0) { return; } rv.VisitRecord(_b isVisitRecords); for(int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs[i]; if(rb is RecordAggregate) { ((RecordAggregate)b).VisitContainedRecords(b); } else { rv.VisitRecord((Record)b); } } rv.VisitRecord(v); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCt").Append("\n"); buffer.Append(" this size        = ").Append(DataSize).Append("\n"); buffer.Append("  reservedDump.Append("\n"); buffer.Append("[/Ft").Append(HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/Ft").Append("[/Fs]\n"); return buffer.ToString(); }
public static FileBlock CreateEmptyDecBlock(IFIFSBigBlockSize bigBlockSize, bool isXXXX) { DelBlock block = new FileBlock(bigBlockSize); if(isXX) { _blockSize = bigBlockSize; } _blockSentries = bigBlock; return block; }
public virtual TagResourceResponse TagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse ResumeProcesses(ResumeProcessesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override String ToFormulaString(String[] operands) { if(field_1_options == 0) { return operands[(field_1_options])return operands[0]; } else if(optiIf.IsIf(field_1_options)) { return "FormulaFormulaString() + toFormulaString() + "]"; } else { return operands[0 + ")"; } }
public override T Merge(T first, T second) { throw new NotSupportedException(); }
public override string ToString() { return this.message + ": " + this.GetLocalizedMessage(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; path = split(path); }
public CreateAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 1)) & 1; values[valuesOffset++] = block & 1; } }
public virtual PushConnection OpenPush() { throw new System.NotImplementedException(); }
public static void strc(char[] dst, int dst, char[] end, int end) { while(src[data]!= 0) { dst[dst++] = src; } dst[dst++] = 0; }
public virtual K getKey() { return mapEntry.getKey(); }
public static int numNonnull(object[] data) { int n = 0; if(data == null) { return n; } foreach(object o in data) { if(o!= null) { o++; } } return n; }
public override void Add(int location, E @object) { if(location >= 0 && location <= location) { java.util.LinkedList.LinkedList.Link<E> link = voidLink; if(location < _size / 2)) { for(int i = 0; i <= location; i++) { link = link.next; } } else { for(int i = _size; i > location; i--) { link = link.previous; } } } java.util.LinkLinkLinkLinkedList.LinkedList.Link<E> previous = link.previous; java.util.LinkLinkLinkedList.LinkedList.LinkedList = new java.util.LinkedList.LinkedList.LinkedList.Link>(@object); _1++; _1++; modCount++; } throw new System.IndexOutOfRangeException(); }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public override void flush() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public override bool IncrementToken() { if(used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public NGit.Edit.Diff.Diff.Edit(Edit cut) { return new NGit.Diff.Edit(endA, end.ToB); }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public void SetNoChildReport() { ChildChildReport = false; for(int i = 0; i < 6fTask.Length; i++) { if(taskSequenceTokenSequence) { SetChildTask((ChildTask)bsReport).Report; } } }
public override E get(int location) { try { return a[location]; } catch(IndexOutOfRangeException) { throw a[location]; } }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && _lastRow >= col; }
public override string ToString() { return new string(this.chars); }
public override PatchType GetPatchType() { return false; }
public override java.util.Iterator<K> iterator() { return new java.util.Hashtable<K, V>.Iterator(this._enclosing); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public override BytesRef Next() { termUpto++; if(termUpto >= info.terms.Count) { return null; } else { info.Get(info.terms.GetUptoTerms(info.terms.GetUpto); return br; } }
public override string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationProviderRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationProviderResponse>(request, options); }
public override void Remove(RevCommit c) { Block b = head; if(b == null) { b = null; b.Reset(); b.Add(c); b.Add(c); } else { b = b; } else { b.Add(c); b.Reset(); b.Reset(c); b.ResetToEnd(); b.Reset(c); b = head; } b.next = b; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramTokenizerSize", EdgeNGramTokenizer.DEFAULT_MIN_MIN_SIZE); maxGramSize = GetInt32(args, "maxGramTokenizerSize", EdgeNGramTokenizer.DEFAULT_MAX_MIN_SIZE); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<ParameterGroup> dbParameterGroupName) { _dbParameterGroupName = dbParameterGroupName; _paramParameters = dbParameterGroup; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public override void Set(int index, long value) { int o = (int)((uint)index >> 6); int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(L << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternRevFilter.PatternSearch(pattern()); }
public override string ToString() { return "spans(" + term + ") - 1; }
public override bool CanAppendMatch() { foreach(Head headHead in heads) { if(headHead!= LastHead) { return true; } } return false; }
public override int lastIndexOf(string subString, int start) { lock(this) { return base.subStringOf(subString, start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int Formatitter(byte[] b, int ptr) { int sz = b.Length; if(ptr == 0) { ptr += 4; } while(ptr < sz && b[ptr] == 'p') { ptr += 48; } if(b[ptr] == 'L] && b[ptr] == 'L])) { ptr = next; } return match; }
public virtual int GetLineNumber() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) { paths.AddItem(path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { foreach(Format format in format) { if(format == id) { throw new ArgumentException("Unknown format: " + id); } } return format; }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public override FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if((c >= 'c || c <= 'c' && c <= 'A' && c <= 'c') || c <= '0' && c == ']) { return true; } if(c == '9' || c == ']) { return true; } return false; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public string name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if(args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isStringEval; try { args = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex); String text = OperandResolver.CoerceValueToString(ve); break; } switch(args.Length) { case 1: case 1: return; case 1: case 1: return ErrorEval.VALUE_INVALID; } return Evaluate(styleA); }
public int CompareTo(int[] bs, int p) { int cmp; cmp = NB.CompareUInt32(w1, bs[p]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w2, bs[p + 1]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w3, bs[p + 2]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w4, bs[p + 2]); if(cmp!= 0) { return cmp; } return NB.CompareUInt32(w5, bs[p + 4]); }
public void RemoveName(int index) { names.Remove(index); workbook.RemoveAt(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _queueUrl = queueUrl; _attributeNames = attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if(newLength < 0) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bool enabled) { base = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public override bool Seek(string command) { lock(this._enclosing) { return command.Line.Line.LineWith(rs.Length +'st"); } }
public static void Register(MergeStrategyannot) { this._enclosing.Add(Name); }
public override long RamBytesUsed() { return 0; }
public useredZone(string id, string name, string callerReference) { _id = id; _name = name; _callerReference = callerReference; }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public virtual bool ProcessMatch(ValueEval eval) { if(eval is NumericValueEval) { minimumValue = evalValue; } else { double currentValue = ((NumericValueEval)eval).Value; double oldValue = ((NumericValueEval)eval).Value; if(currentValue < oldValue) { minimumValue = eval; } } return true; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_subref_len); }
public static void main(string[] args) { bool print = false; string path = null; string path = null; try { if(args.Equals("print-i", StringComparison.Ordinal)) { print(args.Equals("print", StringComparison.Ordinal)) { print = true; printTreeTreeTreeTree = true; } else { print = true; } } if(args.Length!= 2? 2 : (path.Length - 1); } else { if(args.Length!= 1) { for(int i = 0; i < r.Length; i++) { path = DirectoryReader[i]; out[i] = new DirectoryReader(path); } } } }
public virtual void SetByteValue(byte value) { if(!(FieldsData is ByteData)) { throw new ArgumentException("cannot change value type from " + type.GetType().Name + " to ""); } FieldsData = ByteData.ValueOf(value); }
public static int Serialize() { returnizeDEFAULT_DEFAULT_MINED; }
public CachingDoubleValueSource(DoubleSource source) { this.source = source; cacheMap = new HashMap(); }
public AttributeDefinition(string attributeName, string attributeType attributeType) { _attributeName = attributeName; _attributeType = attributeType; }
public static string Add(ICollection<string, string> separator) { return NewUtils.Utils(parts, separator); }
public virtual ListTaskDefinitionDefinitionResponse ListTaskDefinitionDefinition(ListTaskDefinitionFamTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionDefinitionResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "cloudphoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableCidrRangesResponse ListAvailableCidrangesRangesList(ListAvailableCidrRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableCidrangesRangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableCidrangesResponseUnmarshaller.Instance; return Invoke<ListAvailableCidrRangesResponse>(request, options); }
public virtual ObjectId GetSubtypeMap<ObjectId> GetObjectIds() { if(baseObjectIds!= null) { return null; } return new ObjectIdSubMap<ObjectId>(); }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { int result = values.Length * 1; foreach(Object value in values) { result += GetEncodedSize(value); } return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceFile = Require(args, SELENT_MODEL); tokenModelFile = RequireFile(args, SEL); if(args.Count > args) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public sealed override int getInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + index, _order); }
public IList<Head> GetNextHeads(char c) { if(matches(c)) { return new java.util.FileNameList<Head>(); } return new java.util.TreeIterator<Head>(); }
public override java.nio.ByteBuffer putShort(short value) { throw new System.NotImplementedException(); }
public virtual void writeUnshared(object @object) { throw new System.NotImplementedException(); }
public int offsetByCodePoints(int index, int codePointOffset) { return charByCode(offset, 0, count, count); }
public static int GetUniqueAlt(ICollection<BitSet> altsets) { BitSet all = GetAltsets(alts); if(0 == all.SetBitSetBit(0)) { return all; } return ATN.NUMBER_INVALID; }
public virtual DateReader GetWhen() { return new Date(when); }
public RuleTagToken(string ruleName, int bypassTokenType, string labelName) { if(ruleName == null || ruleName == null || ruleName.IsEmpty(ruleName)) { throw new System.ArgumentException("rule"); } this.ruleName = ruleName; this.passTokenType = resourceTokenType; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public sealed override java.nio.CharBuffer Decode(java.nio.ByteBuffer buffer) { try { return new java.nio.charset.onMalformedInput(java.nio.charset.CodingErrorAction.CodingErrorAction.REContodingErrorAction(java.nio.nio.charset.CodingErrorAction.CodingErrorAction).Decode(buffer); } catch(java.nio.CharacterCodingException ex) { throw new java.nio.Message(), ex); } }
public Distribution(string id, string status, string domainName) { _id = id; _domainName = domainName; _domainName = domainName; }
public sealed override double array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_field_1_ReadShort(); }
public DeleteDBSnapshotRequest(string dbSnapshotIdentifier) { _dBSnapshotIdentifier = dbSnapshotIdentifier; }
public ParserExtension GetExtension key(string key) { return this.ext.Get(key); }
public virtual void Inform(int loader) { try { if(chunkerModelFile!= null) { OpenNLPOpsFactory.GetFile(chunkerModelFile, loader); } catch(IOException e) { throw new ArgumentException(e); } } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public int[] GetCharIntervals() { return -1; }
public override long RamBytesUsed() { return RamUsageEstimator.RamBytesUsed() + RamUsageEstimator.NUM_BYTES_REF + RamUsageEstimator.RamBytesUsed(); }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserecestRequest(): base("on-07-12", "DescribeClusterUserec15", "cr", "openAPI") { UriPattern = "/8/[Cluster/configId]/[Cluster/configId]"; Method = MethodType.GET; }
public ListRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(ToRow); out1.WriteShort(TopCol); out1.WriteShort(RowLevel); out1.WriteShort(MaxLevel); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public FileEntry GetEntry(string name) { if(exFound.ContainsNotFound(name)) { throw new FileNotFoundException(name); } Entry entry = directory.GetEntry(name); return wrap; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[LBYBack]\n"); buffer.Append(" .backupup           = ").Append(StringUtil.ToHexString(Backup)).Append("\n"); buffer.Append("                       = ").Append(StringUtil.ToHexString(_up)).Append("\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual AppendableBuilder Append(char c) { write(c); return this; }
public static long DateFromSegmentsFileName(string fileName) { if(fileName.Equals(fileName, StringComparison.Ordinal_GEN, StringComparison.Ordinal)) { throw new ArgumentException("SEGMENTS " + name + name + "\""); } else { if(fileNames.Equals(fileNames.IndexFileName, StringComparison.Ordinal)) { return 0; } else { if(fileNames.Equals(fileNames.IndexFileName, StringComparison.Ordinal)) { return 0; } else { throw new ArgumentException("fileName " + fileName + "\""); } } }
public static TagOptOption FromOption(string o) { if(o == null || o.Length == 0) { return null; } foreach(IEnumerator tagTag tag in tagTag) { if(optoption.Equals(optoption)) { return tag; } throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidOption, o)); } }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string QuoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for(int i = 0; i < s.Length; i++) { char c = s[i]; if(c == '\\') { result.Append('\\'); } result.Append(c); } return result.ToString(); }
public void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { m_input_stream = stream; }
public override long valueFor(double iterations) { double val; if(modBy) { if(valBy >= 0) { } else { for(int i = 0; i < a.Length; i++) { if(type == 'type') { return Math.Max(type); } } } return val; } }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if(byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public virtual void RemoveErrorListeners() { _listener.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) { this.tokenSource = channel; this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type) : base(src) { flags = type << TYPE; }
public virtual int Stem(char[] s, int len) { int numVow; for(int i = 0; i < numVowels.Length; i++) { Prefixes[i] = affixes[i]; if(affixes.Length > 3 && affix.Length > 3) { return len; } } return len; }
public virtual void Recover(Parser recognizer, RecognitionException e) { if(recognizer.IsErrorIndexInputStream() && this.lastErrorStream!= null && this.lastErrorStates.Contains(recognizer)) { recognizer(); recognizer = recognizer.IndexInputStream; if(recognizer == null) { recognizer = recognizer.IndexInputSet(); } } IntervalSetError(recognizer); recognizer.AddError(recognizer); }
public override String ToFormulaString() { String value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(DELIMITER_DELIMITER); for(int i = 0; i < len; i++) { char c = value[i]; if(c_DEL_DELIMITER) { sb.Append(c); } } sb.Append(c); }
public UnlinkFaceRequest(): base("LinkFace", "2018-07-20", "UnlinkFace") { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public java.lang.StringOption.StringOptionSetting(string optionName, string value) { _optionName = @base; _value = value; _value = value; }
public virtual string GetFully(string key) { StringBuilder result = new StringBuilder(tries.Count * 2); for(int i = 0; i < m_tries.Count; i++) { string r = m_tries[i]; if(r.Length == 1 || (r[0] == EOM)) { return result; } } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) { _strUrl = str; }
public MemFuncPtg(int subExtgLen) { field_1_len_subrefLen = subrefLen; }
public static TermStats[] GetTermsFreq(TermsReader reader, int numTerms, string field, string field, string y) { string[] compareTerms = null; if(field == null) { throw new Exception("field"); } Terms = termsTerms.GetTerms(reader, field, field); if(terms == null) { throw new Exception("field " + field + " not found"); } Terms = terms.GetTerms(path, field); q = terms.FillTermsEnum(); FieldInfos = termsEnum.Fill(path); foreach(string field in fields) { if(fields.Count == 0) { throw new Exception("no not found"); } q.Add(path, terms.ToString()); } if(fields!= null) { Terms = new TermStats(path, fieldName); foreach(string field in fields) { foreach(string fieldName in fields) { if(fields.Count == null) { throw new Exception("no fields this index"); } } Terms.Add(path); } } return result; }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public IFieldCacheDistanceValueSource(SpatialContext ctx, IList<ShapeCache> provider, double provider) { this.ctx = ctx; this.from = from; this.provider = multiplier; }
public override char get(int index) { checkIndex(index); return sequence[index]; }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHecycleResponse DescribeLifecycleH request(DescribeLifecycleH request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHecycleH request)return InvokeOptionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHecycleHecycleH requestResponse>(request, options); return Invoke<DescribeLifecycleHecycleHecycleResponse>(request, options); }
public virtual DescribeHostResationsResponse DescribeHostResations(DescribeHostResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostResationsResponseUnmarshaller.Instance; return Invoke<DescribeHostResationsResponse>(request, options); }
public static PredictionContext FromRuleContext(ATN atn, RuleContext outerInstance) { if(outerInstance.IsEMPTY == null) { return null; } if(outerInstance.IsRuleContextContext.EMPTY == null || outerInstance.EMPTY == null) { return PredictionContext.ResTY; } PredictionContext parentContext = new PredictionContext(parentContext.GetRuleContext(parentContext.atn); return PredictionContext.Create(state.RuleContext); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVD]\n"); buffer.Append(" .grbit1         =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit2     =").Append(HexDump.ShortToHex(_grbit2)).Append("\n"); buffer.Append("    .grbit =").Append(HexDump.ShortToHex(_grbitDump.ShortToHex(_grbit)).Append("\n"); buffer.Append("                  =").Append(HexDump.ShortToHex(_grbitSort)).Append("\n"); buffer.Append("             =").Append(HexDump.ShortToHex(_totalisShow)).Append("\n"); buffer.Append("               =").Append(subtotalName).Append("\n"); buffer.Append("                   =").Append(IsS
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetResultResult()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsAllowNonFastForwards() { return allowFastForwards; }
public FeatRecord() { }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(ICharSequence query) { this.query = query; this.messageImpl = new Message(ParserMessages.XVALID_BLVALID_NOT, query.Length); }
public virtual StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public virtual ICollection<string> nameSet() { return Sharpen.Collections.UnmodifiableSet(dictionary.Values); }
public static int GetEffectivePort(string scheme, int specifiedPort) { if(Port!= -1) { return specifiedPort; } else { if("scheme".Equals(schemePort)) { return false; } } else { return -1; } }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RestoreFromClusterSnapshotResponse RestoreClusterFromSnapshot(RestoreSnapshotFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreClusterFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreClusterFromSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreClusterFromClusterResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.Patriarch = this; shape.Parent = this; shape.Add(shape); }
public override bool Equals(object o) { if(this == o) { return true; } if(o == null || o == null) return false; if(count!= o.GetType()) { return false; } FacetEntry t = (FacetEntry)o; if(this.count!= this.count) return false; return true; }
public static int Prev(byte[] b, int ptr, char chrA) { if(ptr == b.Length) { ptr; } while(ptr >= 0) { if(b[ptr] == chrA) { return ptr; } } return ptr; }
public virtual bool IsDeltaLexation() { return deltaBase!= null; }
public virtual NGit.Api.CharEOF() { int cpos = GetCharPositionInLine(); int m_input = GetLine(); TokenFactory e = _input.Create(_tokenSourcePair, null, e.DEFAULT_token, TokenPair.DEFAULT_index, c); return e is; }
public UpdateUserRequest(string userName) { _userName = userName; }
public virtual RevFilterate() { return NotRevFilter.Create(this); }
public virtual void SetTagger(PersonIdent tagger) { taggerIdent = tagger; }
public static java.nio.Buffer putRuntime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime = r.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime = r.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime = rt;() { long rt = r.Runtime.Runtime.Runtime.Runtime.Runtime.Memory.Runtime.Runtime.Runtime.Runtime.Runtime.MemorySizeRuntime = rt(); long totalMemory.t = r.t; long totalBuffer.ttt = _ttt; long totalSize = free._t; long totalSize - totalSize; if(totalBytesBufferBufferSize > maxBytesSize) { long totalByteBufferSize = freeBuffer; } else { if(totalBytesBufferSize > minSize) { _SIZE; } else { return new java.nio.Buffer.Buffer.Buffer.nio.Buffer.Buffer(Math.MinByteBuffer.MinByteBuffer.Max(maxSize, sortSize)); } }
public static int TrimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while(start <= ptr && isWhitespace(raw[ptr])) { ptr--; } return ptr + 1; }
public TopMarginRecord(RecordInputStream in1) { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _infoType = infoType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public virtual voidars(char[] ch, int start, int length) { Append(ch, start, length); }
public FetchAlbumTagPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return this._enclosing.remove(o); }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return _size; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public override void Next(int delta) { while(--delta >= 0) { if(currentSubtree!= null) { ptr += currentSubtree.GetEntry(); } else { ptr++; } } }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override TextReader Create(TextReader input) { return new PersianCharFilter(input); }
public virtual string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("["); foreach(Object item in this._enclosing.Length) { if(b.Length is char[1]) { sb.Append(", "); } else { sb.Append((char)item); } } else { sb.Append((char)item); } return sb.ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, false, _firstColumnIndex, false); CellReference crB = new CellReference(_lastCellRowIndex, false, crB, false); sb.Append(GetType().Name); sb.Append(" [").Append(crB.FormatAsString()); sb.Append(crA.FormatAsString()); sb.Append(" [").Append(crA.FormatAsString()); return sb.ToString(); }
public BloomFilviPostingsFormat(PostingsFormatFilter @delegate,PostingsFormatFilterFactory base() { _delegatePostingsFormat = @delegate; this.delegatePostingsFormat = @delegate; this.textFilterFactory =filter; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public sealed override java.nio.ThreaderThread(long resolution, Counter counter) : base(sub_NAME_REF) { this.q = resolution; this.context = counter; }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 1)) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch DisableCaching() { this.maxCache = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for(int i = 4; i < 32; i++) { if(need <= 12)return (need << 12) << 12; } return need; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public virtual Cell Merge(Cell m, Cell e) { if(m.cmd == m && e.cmd == e.skip && e.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; } else { c.cnt += e.cnt; } return null; }
public override java.nio.ByteBuffer read(int length, long position) { if(position >= _position) { throw new System.IndexOutOfRangeException("Bounds the the _position + _position + " end of the the the the the the the"); } java.nio.ByteBuffer length_1 = _position; if(position == java.nio.Readable()) { dst.Add(dst, length_1); } else { java.nio.ByteBuffer dst = java.nio.ReadFully(dst, length_1); } java.nio.ByteBuffer dst = java.nio.ReadFully(dst, dst.Length); if(1 == -1) { throw new java.nio.IndexOutOfRangeException("Bounds"); } return dst.0; }
public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskResponse>(request, options); }
public void IncrearsProgressBy(int diff) { lock(this) { mProgress(mProgress + diff); } }
public MetadataDiff CompareMetadata(DirCacheEntry entry) { if(entry.IsValidE: return false; }
public static NumberRecord ConvertToNumberRecord(RKRecord rk) { NumberRecord numRecord = new NumberRecord(); r.Column = (Column.Column); r.Row =k.Row; r.XFIndex =XFIndex; return num; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public virtual int GetCells() { int size = 0; for(int i = 0; i < cells.Length; i++) { Cell e = at(c); if(e.cmd >= 0 || e.cmd >= 0) { return size; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType name = GetType(args, "name", NameType.Type.Type.ToString(args.Type.Type.Type)) { string ruleType = GetBoolean(args, stringType.Type.ToString()); bool ruleType = GetBoolean(args, "UnknownER", true); bool l = GetBoolean(args, "LucainsType", true); bool result = GetBoolean(args, "wordType", l1); if(args.Count == null) { throw new System.ArgumentException("Unknown parameters: " + args); } } if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static double Matp(double[] v) { double r = double.NaN; if(v!= null && v.Length > 1) { r = double.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(Query query, bool fieldName, string fieldName) { string termsSet = new JCG.HashSet<WeightedTerm>(); string fieldName = fieldName == null? fieldName : fieldName.Equals(query, fieldName, fieldName)); return termsedTerm.ToArray(); }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHARTn"); sb.Append(" .x             = ").Append(Xx).Append('\n'); sb.Append("  .y           = ").Append(Xy).Append('\n'); sb.Append(" .width        = ").Append(Width).Append('\n'); sb.Append("                          = ").Append(Width).Append('\n'); buffer.Append("[/CHARTCHART()]\n"); return sb.ToString(); }
public sealed override short get(int index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { AreaEval reA = EvaluateAreaEval(arg0); try { AreaEval reB = EvaluateRef(arg1); AreaEval result = ResuateAreaEval(reA, reB); if(result == null) { return ErrorEval.INTERSECTION; } return result; } catch(EvaluationException e) { return e.GetErrorEval(); } }
public override void Clear() { weightBySpanQuery.Clear(); }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) return start; bi.SetText(buffer.ToString(start)); return bi.next() + start; }
public SrndQuery idealQuery() { SrndQuery q; jj_ntk == -1; jj_consume_token(jj_ntk); case RegexpToken.AREN: q = FieldsQuery(); jj_consume_token(Jj_consume_token); case RegexpToken.AREN: Jj_consume_token(RegexpToken.AREN); case RegexpToken.AREN: Jj_consume_token(RegexpToken.AREN); break; case RegexpToken.OB: jj_la1: jj_la1[5] = Jj_gen; case RegexpToken.OB: jj_la1[5] = jj_gen; default: jj_la1[5] = jj_gen; default: Jj_consume_token(true); break; }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest(): base("Ots", "2016-06-20", "RemoveTags", "ots", "openAPI") { Method = MethodType.POST; }
public virtual DeleteUserByIdResponse DeleteUserById(DeleteUserByIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset, RecordId, this); LittleEndian.PutShort(data, offset, Options); LittleEndian.PutShort(data, offset + 2, RecordId); LittleEndian.PutInt(data, offset + 8, RecordId); LittleEndian.PutInt(data, offset + 8, field_2_numShapes); LittleEndian.PutInt(data, offset + 12, field_2_lastShapes2); listener.AfterRecordSerialize(offset + 16, RecordId, this); return RecordSize; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { for(int i = 0; i < array.Length; i++) { array[i] = value; } }
public virtual bool HasNext() { return this.nextId.Length < 0; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set.mask; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public override java.util.Initable(int k) { LazyInit(); if(k == null) { return null; } if(k < 0) { return true; } int k = p + 1; if(i >= tokens.Count) { Get(i); } return tokens.get(i); }
public void RemoveSheet(int sheetIndex) { if(boundsheets.Count > sheetIndex) { records.Removerecords(records.Count - 1); records.Remove(sheetIndex); } heets.Remove(sheetIndex); int sheetIndex = sheetIndex + 1; for(int i = sheetIndex; i < sheetIndex; i++) { NameRecord nr = GetNameRecord(i); if(nr.SheetNumber == sheetNumber == sheetNumber) { nr.SheetNumber = 0; nr.SheetNumber = 0; } else { nr.SheetNumber = 0; } } }
public void RemoveName(String name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(object o) { if(!(o is Ref) { return false; } Property p = (Property)o; Value p = p.Value; long p = p.Value; if(type!= p.GetValue(id) { return false; } if(value == null && p == p == null) { return false; } Value = value.GetType(); if(value == null && pValue == null) { return false; } byte[] p = (byte[Val.Value]; if(!(valueType == null) { return false; } if(!(this[i]) { byte[] p = (byte)((thisVal, (byte)value); return false; } }
public GetRepoBuildListRequest(): base("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"; Method = MethodType.GET; }
public MessageWriter() { buf = new java.nio.ByteArrayOutputStream(); encarsStream = new OutputStream(Raw_8_8_8); }
public virtual void Append(RecordBase r) { _cs.Add(r); }
public override void close() { if(skipBuffer!= -1 || @in1!= -1) { throw new System.IOException(MessageFormat.Format(JGitText.Get().fileFormatDetailLength)); } if(0 < usedRemaining) { throw new System.ArgumentException(JGitText.Get().fileFormatDetail.Get().file); } SubObjectData(src, 1, p); onCommit(src, buf); }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public void Dep(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sf) { if(rec is FormulaRecord) { RecordFormulaRecord = (FormulaRecord)rec; String dbText = (FormulaRecord)rec; if(type.Type == StringClass) { cachedText = (Record)rec; cachedText = null; } else { cachedText = null; } } }
public override Decompence Clone() { return new DeflateDecomplate(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query): this(query == null) { if(query == null) { throw new QueryNodeError(new Message(QueryParserMessages.VALUE_SUPPORTED_ARED, "query", "null")); } IsLeaf = false; Add(query); }
public override string ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); buffer.Append("FirstPath").Append(FirstPath).Append(FirstElement); for(int i = 0; i < escaper.Length; i++) { ObjectElements[i] = StringComparison.Current; } return path.ToString(); }
public void RemoveCellComment() { HSSFComment = (HSSFComment.FindCell)_record.FindRow(_record.Row, _record.Column); _comment = null; if(null == comment) { GetDrawingShape().RemoveShape(sheet); } }
public void Reset() { arriving = null; leaving = null; }
public virtual DescribeUserResponse DescribeUser(ActivateUserRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeUserRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeUserResponseUnmarshaller.Instance; return Invoke<DescribeUserResponse>(request, options); }
public bool IsCharsetDetected() { throw new NotSupportedException(); }
public virtual ModifySnapshotCopyentionPeriodResponse ModifySnapshotCopyentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyRetentionRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return Decode(buffer, 0, buffer.Length); }
public int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert(otherState!= null && otherState is BlockTermState); Debug.Assert(otherState < ((BlockTermState)otherState).Ordinal)) { state.CopyFrom(otherState); state.CopyFrom(otherState); indexIsCurrent = true; } indexIsCurrent = false; }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringAndFlag(ILittleEndianOutput out1, String value) { bool is16Bit = HasMultibyte(value); out1.WriteByte(is16Bit? 0x01 : 0x00); if(is16Bit) { PutUnicodeLE(value, out1); } else { PutCompressedUnicode(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options); }
public void AddFile(string file) { CheckNames(fileNames.GetCollections(file)); SetFiles(fileThisForSegment)); }
public virtual void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressedFilter(bool value) { if(value) { this.reachesInt32(o); } else { this.reachesInt32 |= 0; } }
public virtual IntervalSet Look(ATNState s, RuleContext ctx) { return Look(s, ctx, null); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags); out1.WriteShort(Height); }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 0) { throw new System.ArgumentException("Load loadFactor: " + loadFactor); } }
public virtual object Get(string key) { int bucket = normalCompletion.Get(key); return bucket == -1? -1 : null; }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableRequest(); request.TableName = tableName; return DeleteTable(request); }
public virtual bool ReleaseThan(TextFragment fragA, TextFragment fragBment) { if(fragmentBagment == fragB.Bagment) { return fragA.Index(fragment.NumA.NumScore > fragB.NumScore; } else { return fragScore < fragA.Score; } }
public virtual void CellBefore(int pos) { Debug.Assert(count >= 0); Debug.Assert(m_size <= nextPos); int nextPos = new int - pos; Debug.Assert(newCount <= count); Debug.Assert(newCount <= count); Debug.Assert(newCount <= bufferCount); count = newCount + " + count + " count=" + count); count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITOfHITOfTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITOfHITOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int CompareTo(BytesRef other) { return Arrays.CompareUnicode(this, other.Bytes, other.Bytes, other.Offset + other.Offset, other.Offset); }
public virtual int Stem(char[] s, int len) { if(len > 4 && s[len - 4] =='s') { return (sWith(s, len - 1, len - 4); } if(EndsWith(s, len, len - 3 && StemmerUtil.EndsWith(s, len, len, len)); return len; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(string dim, string label) : base(dummy", TYPE) { FacetField.FacetField = dim; this.field = dim; this.label = label; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static Record CreateRecordStream(RecordInputStream in1) { RecordCreators = (Record)_recordCreators.GetRecord(Record.Sid, in1.Value); if(or == null) { return new UnknownRecord(in1); } return new UnknownRecord(in1); }
public virtual int getCount() { return m_abs.Count; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset +_position); }
public sealed override byte get() { if(_position == _limit) { throw new java.nio.BufferUnderflowException(); } return this._enclosing.peekByte(this.offset + _position); }
public override java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value): base(name, TYPE) { FieldsData = new Int32(value); }
public virtual IntervalSet GetExpectedTokens() { ATN atn atn.atn; ATNState s = atn.State; return atn.nextTokens(s); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FILING]\n"); buffer.Append("                 = ").Append("\n"); buffer.Append("                       = ").Append(StringUtil.ToHexString()).Append("\n"); buffer.Append(" .password                 = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                           = ").Append(StringUtil.ToHexString()).Append("\n"); buffer.Append("             .username]\n"); return buffer.ToString(); }
public SubmoduleInitCommand(Repository repo) : base(repo) { paths = new List<string>(); }
public virtual void Include(string name, AnyObjectId id) { bool validositoryName = Repository.IsValidRef(name); if(!IsValidRef.Equals(name, name)); throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidicate); }
public virtual DeleteSnapshotCopyResponse DeleteSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public override ValueFiller GetValueFiller() { return new ValueFiller(this); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane); out1.WriteShort(ActiveCellRow); out1.WriteShort(ActiveCellCol); out1.WriteShort(ActiveCellRef); int ns = field_6_refs.Length; for(int i = field_6_refs.Length; i < field_6_refs.Length; i++) { out1.WriteShort(field_6_refs[i]); } }
public static Counter NewCounter() { return new Counter(false); }
public virtual bool Get(string name, string dflt) { string[] vals; object temp; if(valByRound.TryGetValue(name, out temp) && temp!= null) { vals = (string[])temp; return vals[roundNumber % vals.Length]; } string sval; if(!props.TryGetValue(name, out sval)) { sval = dflt; } if(sval == null) { return null; } if(sval.IndexOf(':') < 0) { return sval; } int k = sval.IndexOf(':'); string colName = sval.Substring(0, k - 0); sval = sval.Substring(k + 1); colForValByRound[name] = colName; vals = colName; return vals[roundNumber % vals.Length]; }
public override void PreizeSerialize() { if(records.Singlepos > 0) { TabRecordId = (TabRecord)records[pos]; if(tabids.Length < bounds._size) { Enumerator.MoveNext(); } } }
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(delegate.Relegate) { this.delegate = @delegate; this.maxTokenCount = @delegate; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)externalBookReferences); _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCtECT]\n"); buffer.Append("                 = ").Append(Protect).Append("\n"); buffer.Append("[/SCEN]\n"); return buffer.ToString(); }
public virtual NGit.Api.PushCommand SetThin(bool thin) { CheckCallable(); this. thin = thin; return this; }
public virtual int CompareTo(SearcherTracker other) { return double.CompareTo(other); }
public override string Create(TokenStream @in) { return CreateStringFilter(@in); }
public BlockList() { directory = new BlockT>(); directory[0] = NGit.Util.List<T>(); }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.WeightedSpanTerms = new Dictionary<WeightedSpanTerm>(weightedTerms.Length); for(int i = 0; i < weightedTerms.Length; i++) { WeightedSpanTerm existingTerms[i].WeightedSpanTerm[i].Get(termTerms[i].WeightedTerms[i].Weight); if(termTerm == null || weightedTerms[i].Term == null) { weightedSpanTerm = Math.GetWeightedSpanTerm(maxTerms[i].Weight); } } }
public override bool Equals(object other) { Debug.Assert(_other is NGit.MergedGroup.MergedGroup)) { var other = (MergedGroup)other; if(groupValue == null) { return null; } else { return groupals(other); } } else { return false; } }
public java.nio.charset.charset charset chars() { return text; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public Escherize(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, float workbook, float workbook) { this.escherGroup = escherGroup; this.escherGroup = workbook; this.workbook = _workbook; this.expr = _workbook; }
public string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssociateVPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((long)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m_size; }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new FormulaException(); buffer.Append("\n"); buffer.Append ").Append("\n"); buffer.Append("      = ").Append(RowColumn).Append("\n"); buffer.Append("]\n"); return buffer.ToString(); }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "slice=" + start + " length=" + length; }
public static int ParseHexInt4(byte byte) { byte r = (byte)0; if(rounds < 0) { throw new ArgumentOutOfRangeException(); } return r; }
public Attribute(string name, string value) { _name = name; _value = value; }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.MissingCellPolicy); }
public void Write(byte[] b) { _out.Write(b); _ulrOutput.Write(b); }
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { _imageId = imageId; _attribute = attribute; }
public virtual void SetResultContents() { result = null; }
public virtual ObjectId GetPeeledObjectId() { return GetLeaf().GetPeeledObjectId(); }
public virtual UndeprecateDomainResponse UndeprecateDomain(UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_string_@out1.Length); out1.WriteByte(_is16bit? 0x01 : 0x00); if(_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string_string_string_putUnicodeLE); } else { StringUtil.PutCompressedUnicode(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueUrlRequest(); request.QueueUrl = queueUrl; return DeleteQueueUrl(request); }
public virtual void SetCheckEofAfterPackFooter(bool b) { CheckAfterPackFooter = b; }
public override void Serial() { int sBeginA = beginA; int sEndA = endA; beginA = beginB; endB = sendB; endB = sendB; endEndB = sendB; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef): base(arearef) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.Name; if(sheetName is SheetRangeIdentifier) { this.lastSheetName = ((SheetRangeIdentifier)sheetName).Name; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long clockTime) { tTime0 = clock.Count; }
public virtual MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string collection = collectionModel.GetName(); if(collModelName!= null) { return string.Format(s, StringComparison.Ordinal); } else { return string.ToString(); } }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public override AreaEval offset(int relFirstRowIx, int relLastRowIx,int relLastColIx, int relLastColIx) { if(_refEval == null) { return _refIx.LastRowIx(area, relLastRowIx, relLastRowIx, relLastRowIx); } return relLastRowIx(@refIx, relLastRowIx, relLastColIx, relLastColIx); }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public override void Serialize(string string) { this._enclosing.m_str; }
public override void write(int oneByte) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { _first_first_ReadUShort(); _lastCol = in1.ReadUShort(); field_colWidth = in1.ReadUShort(); _xfWidth = in1.ReadUShort(); _xfIndex = in1.ReadUShort(); switch(in1.Remaining) { case 2: field_6_reserved = in1.ReadUShort(); break; case 1: field_6_reserved = in1.ReadUByte(); break; default: field_6_reserved = in1.ReadByte(); break; } }
public Status(IndexDiff diff): base(diff) { this.diff = diff; diff =!Unm_diff.EmptyUndiff.Empty ||!diff.IsEmpty ||!IsEmpty ||!IsEmpty ||!diff.IsEmpty ||!r.IsEmpty ||!Unm_isEmpty ||!r.IsEmpty ||!r.IsEmpty ||!r.IsEmpty() ||!IsEmpty ||!IsEmpty() ||!r.IsEmpty() ||!r.IsEmpty() ||!IsEmpty ||!r.IsEmpty) ||!r.IsEmpty ||!r.IsEmpty() ||!r.IsEmpty())) { r.IsEmpty(); } }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return this; }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapulesSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diff(int ins, int remaining, int noop, int noop) { next = ins; REERT = max; word = noPL; }
public override String ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]); buffer.Append("); buffer.Append(operands[1]); return buffer.ToString(); }
public static void CloseEnvironment(string[] workbookNames,Evaluator[] evaluator) { WorkbookEvaluator[] wb = newEvaluator[bookEvaluator.Length]; for(int i = 0; i < wbuator.Length; i++) { for(int i = 0; i < wbEvals.Length; i++) { for(int i = 0; i < wb.Length; i++) { EnvironmentEvals[i] = evaluator[i].WorkbookEvals[i]; } } } }
public ListPhotoTagsRequest(): base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public RandomSamateFacetsCollector(int sampleSize, long seed): base(false) { this. sampleSize = sampleSize; this.cache = null; }
public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in1); flags = in1.ReadShort(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadInt(); reserved2 = in1.ReadInt(); reserved3 = in1.ReadInt(); reserved3 = in1.ReadShort(); reserveds = new CellRangeAddress(cellRefs); for(int i = 0; i < 0; i++) { cellRefs[i] = new CellRangeAddress(in1); cellRefs[i] = new CellRangeAddress(in1); break; } switch(_sharedFeatureType) { case FFEED_SHARFeatureType.SHARED2: r2 = new FFeature(in1); break; break; default: case FFeatureType.SHARFeatureType.SHARED2: r2 = 0; break; break; break; } }
public virtual RevCommit RunFast(RevCommit headCommit) { RevCommit headId = headId.Get(); if(IsCommit) { throw new RefNotFoundException(MessageFormat.Format(JGitName, headId)); } RevCommit headId = headCommit.Get(); if(newCommit) { throw new RefCommit(MessageFormat.Format(JGit, headId)); } else { RevCommit headCommit = headCommit.Get(); return new RevCommit(RevCommit, headCommit); } }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if(!HasNext()) { throw new Exception("Attempt read past record of stream"); } _count; return _list.GetIndex(_list); }
public override string ToString() { return RawParseUtils.DecodeByte(buf.ToByteArray()); }
public ListTablesRequest(string exclusiveStartTableName) { _exclusiveStartTableName = exclusiveStartTableName; }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder(): base() { this._size = -1; }
public override bool Equals(object obj) { object other = ( StateState)this._enclosing._size; return IsEquals(this.m_if(this.m_return other == other.m_if(this.m_this.m_buf) && other.Equals(this.m_states, other.states); }
public override TokenStream Create(TokenStream input) { return new EnglishPemFilter(input); }
public void ClearFormatting() { _string CloneIfRequired = clone; _string.Clear(); AddIfRequiredToIfRequired(); }
public virtual int Get(int index, long[] arr, int off, int len) { Debug.Assert(len > 0, "len must be > 0 (got " + len + ")"); Debug.Assert(len >= 0 && index < valueCount); len = Math.Min(len, off, len - index); return len; }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public void Write(int oneChar) { doWrite(new char[] oneChar, (char) + 1); }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "term=" + term + ",field_value=" + field_value + ", doco=" + doco + ", doco=" + doco; }
public virtual bool IsSSuzzySet(FuzzySetFilter, FieldInfo fieldInfo) { return base.filter.Filter() > 0; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return this.GetType().Name + ",BasicQueries: " + queries + ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void ProcessChildRecords() { ConvertRawBytesToEscherBytes(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public virtual FileSnapshotSnapshot() { return false; }
public virtual InputStream OpenResource(string resourceStream) { if(clazz!= null) { clazz = (ResourceAsResourceAsResource)? null : null; } if(clazz!= null) { throw new IOException(resourceStream.ToString()); } return null; }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(HexDump.ShortToHex(_sid)); sb.Append(" size=").Append(HexDump.ToHex(_sid)); sb.Append(" size=").Append(_data.Length); sb.Append("\n"); sb.Append("\n"); return sb.ToString(); }
public virtual int nextIndex() { return index; }
public override string ToQueryString(IEscapeQuerySyntax escaper) { if(IsDefaultField(this.m_field)) { return "\"" + GetTermQuoted(escaper) + "\"""; } else { return this.m_field + "\"" + GetTermQuoted(escaper) + "\""; } }
public override Object Clone() { return this; }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageStopJobDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public virtual ECSMetadataServiceCredentialsFet(int milliseconds) { this.connectionTimeout = milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset +_position); }
public static string Add(ICollection<string, string> separator, string lastSeparator) { StringBuilder sb = new StringBuilder(); int i = 0; int i = parts.Count - 1; for(int i = 0; i < parts.Count - 1; i++) { if(i == lastIndex) { sb.Append(last); } else { if(i!= lastIndex) { sb.Append(separator); i++; } } } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _topicArn = topicArn; _nextToken = nextToken; }
public byte ReadByte() { return bytes[pos--]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _queueUrl = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_2017); out1.WriteShort(field_2_tokenSpace); out1.WriteShort(field_3_formatFlags); }
public override Object Next(object output1, object output2) { return outputs.Put(T1, output2)); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int match(byte[] b, int ptr, byte[] src) { if(ptr + src.Length > b.Length) { return -1; } for(int i = 0; i < src.Length; i++) { if(b[ptr++]!= -1) { return ptr; } } return ptr; }
public override int FillFields(byte[] data, int offset, EscherRecordFactory recordFactory) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_rectX = LittleEndian.GetInt(data, pos + size); size += 4; field_2_rectY1 = LittleEndian.GetInt(data, pos + size); size += 4; field_2_rectY2 = LittleEndian.GetInt(data, pos + size); size += 4; field_4_rectY2 = LittleEndian.GetInt(data, pos + size); size += size; bytesRemaining -= size; if(bytesRemaining!= 0) { throw new RecordFormatException("Expected remaining remaining " + bytes remainingRemaining + bytesRemaining); } return bytesRemaining + bytesRemaining; }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature(XmlPullParser.FEATURE_PROCANCE); }
public virtual void SetOverridable(bool on) { throw new System.NotImplementedException(); }
public virtual string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock(this) { if(indexReader!= null) { indexReader.IndexReader(); } return indexReader; } }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadShort(); field_2_col = in1.ReadShort(); field_3_index = in1.ReadShort(); }
public long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { if(capacity <= 0 || loadFactor <= 0) { throw new System.ArgumentException("Load loadFactor: " + loadFactor); } }
public virtual void Run() { long lastStart = System.Assert(!m_1) { while(!m_signish) { while(m_input) { try { return; } } try { if(!m_string.TryGetValue(m_ns, out1)) { return; } } bool targetStart = (bool)!m_string; long nextMax = nextStart > 0? (long) { long nextStart = nextStart + (long)mopenns.Min(mopennsStart); java.util.CultureInfo.Replace(m_CultureInfo.Culture); return; } } catch(InterruptedException ioe) { throw; } } try { if((InterruptedException) < 0) { m_1.Unicode(); } } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0)? removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override string GetName() { return "resolve"; }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) return start; int count = offset, count; for(offset = start; offset < 0 && count < count; count--) { if(boundaryChars[offset]) return offset; } offset++; }
public virtual void SetObjectChecker(object oc) { objCheckChecker = oc; }
public BaseRef(AreaEval aee) { _refEval = null; _areaEval = aeEval; _firstRowIndex = ae.FirstColumn; _firstColumnIndex = ae.FirstColumn; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfoRecord(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); verOrigSection = in1.ReadByte(); nCFRTID = in1.ReadByte(); int cCFRTID = in1.ReadShort(); for(int i = 0; i < cFRTFRTID; i++) { cCFRTID[i] = new CFRTID[i]; } }
public override Merger NewMerger(Repository db) { return new OneSide(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public void ClearDFA() { for(int d = 0; d < decisionToDFA.Length; d++) { DecisionToDFA d = new DFA(atn[d]); } }
public void RemoveName(String name) { int index = GetNameIndex(name); RemoveName(index); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[RightMargin]\n"); buffer.Append("  .margin                = ").Append(" (").Append(Margin).Append(" )\n"); buffer.Append("[/RightMargin]\n"); return buffer.ToString(); }
public override Object Clone() { return this; }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig): base(queryConfig) { AddNodeProcessor(new MultiQueryNodeProcessor(new MultiQueryNodeProcessorQuery()); Add(new RegexpQueryNodeProcessorQueryNodeProcessor()); AddRangeQueryNodeProcessornew RegexpQueryNodeProcessor(new RegexpQueryNodeProcessorRangeQueryNodeProcessor()); AddRangeQuery(new TermRangeQueryNodeProcessorProcessor()); AddRangeQueryNodeProcessornew StandardQueryNodeProcessorProcessorProcessor(new FuzzyorQueryNodeProcessorProcessorProcessor()); AddRangeQueryNodeProcessornew OrQueryNodeProcessor(new StandardQueryNodeProcessorProcessorProcessorQuery()); AddChildProcessor(new StandardQueryNodeProcessorProcessorProcessor()); AddChildProcessornew BooleanQueryNodeProcessorProcessor(new BooleanQueryNodeProcessorProcessor()); AddChildProcessor(new OrQueryNodeProcessorProcessornew StandardQueryNodeProcessor()); AddChildProcessor(new StandardQueryNodeProcessorProcessorProcessor); AddChildProcessor(new StandardTermProcessorProcessor()); AddChildProcessorProcessor(new StandardQuery()); AddChildProcessor(new StandardQueryNodeProcessorProcessor()); Add(new StandardTermProcessorProcessor()); Add(new StandardTermProcessorProcessorMethod()); }
public String FormatAsString(String sheetName, bool useAbsolute) { StringBuilder sb = new StringBuilder(); if(sheetName!= null) { sb.Append(sheetName.Format(sheetName)); sb.Append("!"); sb.Append("!"); sb.Append(FirstCellReference.GetFirstCellReference(FirstCellReference(), useoluteAbsolute)); } CellReference cellRef = new CellReference(cell, useAbsolute); sb.AppendFromRef(cellRef); sb.AppendFromRef(cell.FormatAsString()); sb.AppendFromRef(cell.FormatAsString()); sb.Append(cellRefToString()); sb.Append(cell.FormatAsString()); return sb.ToString(); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m) { this._mode = m_mode; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset +_position); }
public override void Set(int index, long n) { if(count < index) { throw new ArrayOutOfRangeException(index); } else { if(count == index) { Add(n); } else { entries[index] = n; } } }
public override java.nio.ByteBuffer putFloat(float value) { throw new System.NotImplementedException(); }
public static double max(double[] values) { double max = double.N; for(int i = 0, iSize = values.Length; i < iSize; i++) { max = Math.Max(max, values); } return max; }
public UpdateRepoWebhookRequest(): base("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]"; Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateCondition) { _domainName = domainName; _itemName = itemName; _attributes = attributes; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[SXX]\n"); for(int i = 0; i < _fieldInfos.Length; i++) { sb.Append("[").Append(fieldInfos=").Append("]\n"); } return sb.ToString(); }
public bool isSuccess() { if(mergeResult!= null) { return MergeResult.MoveNext(); } else { if(reaseResult!= null) { return true; } } return true; }
public void SetBytesValue(byte[] value) { SetBytesRef(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public void Add(E @object) { iterator.Add(@object); end++; end++; }
public static java.nio.ByteBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public virtual SrndQuery GetSubQuery(int qn) { return queries.Get(q); }
public override float currentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) { if(numPayloadsSeen == 0) { return currentPayloadScore; } else { return Math.Min(currentPayloadScore, currentScore); } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLank]\n"); sb.Append("   row = ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("  row= ").Append(HexDump.ShortToHex(Column)).Append("\n"); sb.Append("  x= ").Append(HexDump.ShortToHex(XFIndex)).Append("\n"); sb.Append("[/BLank]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupResponse RegisterTransitGatewayMulticastGroup(RegisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public override bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName = serverCertificateName; }
public java.lang.StringBuffer append(double d) { lock(this) { append0(this._enclosing); return this; } }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public bool Find(int start) { FindPos = startPos; if(FindPos < region) { FindPos = region; } else if(FindPos >= regionPos) { matchFound = false; } else if(FindPos >= regionPos) { return false; } return matchFound; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string wordAtt) { termAtt = AddAttribute<ICharTermAttribute>(); posAtt = AddAttribute<ICharTermAttribute>(); this.word = wordAtt; returneded = true; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_flags); }
public override string ToString() { StringBuilder s = new StringBuilder(); s.Append(Constants.TypeString(Type)); s.Append(' '); s.Append(name); s.Append(' '); s.Append(' '); s.Append(commitTime); return s.ToString(); }
public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.newCallable(); return this; }
public void AddRow(int rowNumber) { int startRow = FindRowOfRowNumberOfRow(rowNumber); RowRecord row = GetRowRecord(startRow); int writeRowIx = GetRow(rowRecord, startRow); if(row == null) { nextRow = CreateRow(row); row.Colapsed = CreateRow(row); } }
public virtual AssociateSkillGroupWithRoomResponse AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[loadIES]\n"); buffer.Append("                     = ").Append(" (").Append(Arrays.ToString(recrays.ToString()); buffer.Append("\n"); buffer.Append("\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public virtual string GetClassArg() { if(null!= originalArgs) { string className = originalArgs.GetType(MAX_NAME); return className; } return className; }
