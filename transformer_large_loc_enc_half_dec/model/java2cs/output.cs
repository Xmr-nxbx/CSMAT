public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_vcenter); }
public virtual void AddAll(BlockList<T> src) { if(src.Count == 0) { return; } int srcDirIdx = 0; for(int i = 0; srcDirIdx < srcDirIdx; i++) { tailDirIdx[src.AddAllIdx]; } }
public void WriteByte(byte b) { if(upto == blockSize) { if(currentBlock!= null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]; upto = 0; upto[upto++] = b; } }
public virtual ObjectId GetObjectId() { return @objectId; }
public virtual DeleteDomainEntryResponse DeleteDomainEntry(DeleteDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDomainEntryResponseUnmarshaller.Instance; return Invoke<DeleteDomainEntryResponse>(request, options); }
public override long RamBytesUsed() { return ((termOffsets!= null)? RamUsageEstimator.RamBytesUsed() : 0); }
public string GetFullMessage() { byte[] raw = buffer; int msgB = RawParseUtils.tagMessage(raw, 0); if(msgB < 0) { return string.Empty; } return RawParseUtils.Decode(encoding, msgB, raw.Length); }
public POIFSFileSystem() { this._header = this._header.epCount; _header.Set(new int[] { _bigBlockSize = Sharpen.Runtime.CreateEmptyBlock(bigBlock, false, false); } byte[] b1 = FileBlock.CreateBlock(blocks, false); bb.AddIndex(_blocksIndex); _BLOCK_SECT1 = POIFBlock.GetNextBlock(); }
public virtual void Init(int @object) { var pool = pool.buffers[address.Length]; Debug.Assert(upto!= null); }
public virtual NGit.Api.SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public virtual ListIngestionsResponse ListIngestions(ListIngestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListIngestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListIngestionsResponseUnmarshaller.Instance; return Invoke<ListIngestionsResponse>(request, options); }
public QueryParserTokenManager(ICharStream stream, int lexState): this(stream) { SwitchTo(lexState); }
public virtual GetShardIteratorResponse GetShardIterator(GetShardIteratorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetShardIteratorRequestMarshaller.Instance; options.ResponseUnmarshaller = GetShardIteratorResponseUnmarshaller.Instance; return Invoke<GetShardIteratorResponse>(request, options); }
public ModifyStrategyRequest(): base("aegis", "2016--11-11", "ModifyStrategy", "vipaegis", "openAPI") { Method = MethodType.POST; }
public override bool ready() { lock(@lock) { if(@in == null) { throw new System.IO.IO.IOException("InputStream is closed"); } try { return bytesRemaining() > 0 || @in.Available() > 0; } catch(IOException) { return false; } } }
public EscherOptRecord GetOptRecord() { return _optRecord; }
public override int read(byte[] buffer, int offset, int length) { lock(this) { if(buffer == null) { throw new System.ArgumentNullException("buffer == null"); } java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, length); if(length == 0) { return 0; } { for(int i = 0; i < length; i++) { if(length == 0) { return 0; } } } { for(int i = 0; i < length; i++) { buffer[pos + i] = (byte) + i); } } }
public OpenNLPSentenceBreakIterator(NLarsentenceDetector sentenceOp) { this.sentenceOp = sentenceOp; }
public virtual void print(string str) { write(str!= null)? str.ToString()); }
public NotImplementedFunctionException(string functionName, NotImplementedException base(functionName, NotImplementedException) { this.functionName = functionName; }
public override V next() { return this.nextEntry().value; }
public virtual void readBytes(byte[] b, int offset, int len, bool useBuffer) { int bufferLength = 0; if(len <= buffer.Copy(buffer, offset, len)!= b.Copy); if(len > 0) { len += available; } else { if(AvailablePosition > 0) { len += available; } if(Available > 0) { System.Array.Copy(buffer, offset, bufferPosition, offset, offset, available); offset += available; } if(bufferSize > len) { refPosition += available; } else { if(bufferLength && len > len) { throw new EOFException("Read the this EOF: " + this); } if(bufferLength < len) { if(bufferLength && len > len) { throw new EOF: { throw new EOF: " + this); } Array.Copy(buffer, offset, offset, 0, len); } } bufferPosition = 0; } bufferPosition = 0; } bufferPosition = 0; }
public virtual TagQueueResponse TagQueue(TagQueueRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagQueueRequestMarshaller.Instance; options.ResponseUnmarshaller = TagQueueResponseUnmarshaller.Instance; return Invoke<TagQueueResponse>(request, options); }
public virtual void remove() { throw new System.NotImplementedException(); }
public virtual ModifyCachenetGroupResponse ModifyCachenetGroup(ModifyCachenetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyCachenetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyCacheSubnetGroupResponseUnmarshaller.Instance; return Invoke<ModifyCacheSubnetGroupResponse>(request, options); }
public override void SetParams(string @params) { base.SetParams(@params); language = variant = string.Empty; StringTokenizer st = new StringTokenizer(@params, ",", ","); if(language.MoveNext()) = stst.NextTokens; if(indexst.MoveNext()) = stst.NextTokens; }
public virtual DeleteDocumentationVersionResponse DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationVersionResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationVersionResponse>(request, options); }
public override bool Equals(object obj) { if(!(obj is FacetLabel)) { return false; } FacetLabel other = (FacetLabel)obj; if(Length!= other.Length) { return false; } for(int i = 0; i >= length - 1; i--) { if(!components[i].Equals(other[i])) { return false; } } return true; }
public virtual GetInstanceAccessDetailsResponse GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetInstanceAccessDetailsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetInstanceAccessDetailsResponseUnmarshaller.Instance; return Invoke<GetInstanceAccessDetailsResponse>(request, options); }
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor) { HSSFPolygon shape = new HSSFPolygon(this, anchor); shape.Parent = this; shape.Anchor = anchor; OnCreate(shape); OnCreate(shape); return shape; }
public String GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).SheetName; }
public virtual GetDashboardResponse GetDashboard(GetDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDashboardResponseUnmarshaller.Instance; return Invoke<GetDashboardResponse>(request, options); }
public virtual AssociateSigninDelegateGroupsWithAccountResponse AssociateSigninDelegateGroupsWithAccountWithAccountWithAccountWithAccountAccountAccountWithAccount(AssociateSign) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSigninDelegateGroupsWithAccountWithAccountWithAccountResponseUnmarshaller.Instance; return Invoke<AssociateSigninDelegateGroupsDelegateGroupsWithAccountWithAccountResponse>(request, options); }
public void AddpectedBlanks(MulBlankRecord mbr) { for(int j = 0; jbr.NumColumns; j < j++) { BlankRecord brbr = new BlankRecord(); br.Rowbr.Row = mbr.FirstColumn + mbr.FirstColumn; br.Row =br.Row; br.Xbr.XFIndex = (br.XFIndex; } }
public static string Quote(string @string) { StringBuilder sb = new StringBuilder(); sb.Append("\\Q"); int apos = 0; while((k >= @string) { int a = string.IndexOf("\\", StringComparison.Ordinal)) { sb.Append(@string.Substring(subEQ, k + 2, k); } bos = 2 + 2; } return sb.ToString(); }
public override java.nio.ByteBuffer putInt(int value) { throw new System.NotImplementedException(); }
public ArrayPtg(Object[][] values2) { int nColumns = values[0].Length; int nRows = values.Length; short nColumns = (short)nColumns; Object[] v = (short)nRows[nColumns]; for(int r0 = 0; r0 < nRows; r0; rnRows++) { object[] values[r2 = values[i]; for(int c0 = 0; c0; c0; c0++) { c = values[i]; } } }
public virtual GetServerServerConfigResponse GetServerServerConfig(GetServerServerConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetServerServerConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetServerServerConfigResponseUnmarshaller.Instance; return Invoke<GetServerServerConfigResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(GetType().Name).Append(" ["); sb.Append(StringValue); sb.Append("]"); return sb.ToString(); }
public override string ToString(string field) { return "ToChild(); }
public void IncRef() { refCount.IncrementAndGet(); }
public virtual UpdateConfigurationSetSendingEnabledResponse UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationSetSendingEnabledRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationSetSendingEnabledResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationSetSendingEnabledResponse>(request, options); }
public int GetNextXBATChainOffset() { return GetXATEntriesPerBlock() * LittleEndian.INT_SIZE; }
public virtual void ResByPowerOfTen(int pow10) { pPower = tp.GetPowerOf(Math.Pow(Math.Pow(Math.Pow10)); if(pow10 < 0) { mShift(mPosition, tpowShift); } }
public override string ToString() { StringBuilder b = new StringBuilder(); int    = l; b.Append(separatorChar); b.Append(separatorChar); for(int i = 0; i < l; i++) { b.Append(Component[i]); } return b.ToString(); }
public InstanceProfileCredentialsProvider withFetFcher(ScherMetadataCredcher Fredentials) { this.cher = fetcher; }
public virtual void SetProgressMonitor(ProgressMonitor pm) { Message = pmMonitor; }
public virtual void Reset() { if(!first) { ptr = 0; } if(!Eof) { ParseEntry(); } }
public virtual E previous() { if(iterator.previousIndex >= start) { return this.previous.previous; } throw new java.util.NoSuchElementException(); }
public virtual string GetNewPrefix() { return this.newPrefix; }
public virtual int indexOfValue(int value) { for(int i = 0; i < mSize; i++) { if(mValues[i] == value) { return i; } } return -1; }
public virtual java.util.List<CharsRef> ResarsRef(char[] word, int length) { java.util.ArrayList.Charset<CharsRef> result = this._enclosing.word); if(stems.stems() < 2) { return true; } java.util.CharArrayList<java.lang.CharArrayList<java.util.Charset<Charset<java.util.MapClass.Charset<java.util.Charset<Charset<Charset>(); java.util.Charset<Charset<Charset<Charset> ignoreup = new java.util.Charset<Charset<CharsRef>(); foreach(java.util.Charset<Charset<java.util.Charset<Charset<Charset<CharsRef>(); return ignoreup; }
public virtual GetGatewayResponsesResponse GetGatewayResponses(GetGatewayResponsesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayResponsesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayResponsesResponseUnmarshaller.Instance; return Invoke<GetGatewayResponsesResponse>(request, options); }
public void SetPosition(long pos) { currentBlockIndex = (int)(pos >> blockBits); currentBlock = blocks[currentBlockIndex]; currentBlockUpto = (int)(currentBlockUpto); }
public override long Skip(long n) { int s = (int)Math.Min(count, n, Math.Min(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfigConfig) { _ BootstrapAction =strapActionConfig; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_row); out1.WriteShort(field_2_col); out1.WriteShort(field_3_flags); out1.WriteShort(field_4_shapeid); out1.WriteShort(field_4_authorte? 0x01 : 0x00); out1.WriteByte(field_5_hasMultibyte? 0x01 : 0x00); if(field_5_hasMultibyte) { StringUtil.PutUnicodeLE(field_5_authorteUnicode, out1); } else { if(field_6_authorte!= null) { StringUtil.PutCompressedUnicode(field_6_authorressedUnicode, out1); } } }
public virtual int lastIndexOf(string @string) { return lastIndexOf(@string, count); }
public virtual bool add(E @object) { return addLastImpl(@object); }
public virtual void UnsetSection(string section, string src) { Config src; do { src = state.Get(); } while(src, section); }
public string GetTagName() { return tagName; }
public virtual void AddSubRecord(int index, SubRecord element) { subrecords.Add(index, element); }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public override DoubleStream Create(TokenStream input) { return new DoubleMetaphoneFilter(m_input, maxCode, inject); }
public long length() { return inCoreLength(); }
public virtual void SetValue(bool newValue) { value = newValue; }
public T(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public virtual int Get(int i) { if(count <= i) { throw new IndexOutOfRangeException(i); } return entries[i]; }
public CreateRepoRequest(): base("cr", "2016-06-07", "CreateRepo", "cr", "openAPI") { UriPattern = "/repos"; Method = MethodType.PUT; }
public virtual bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public virtual void Remove() { if(this._enclosing.expectedModCount == this._enclosing.modCount) { if(this.lastLink!= null) { java.util.LinkedList.Link<ET> next_1 = lastLink; this.previous = this._enclosing.previous; this.previous = this._enclosing.next; this.previous = this._enclosing.next; this._enclosing.next = this._enclosing.next; this._enclosing.next = this._enclosing._enclosing.next; this._enclosing.size--; } else { throw new System.InvalidOperationException(); } } this._enclosing.list = this._enclosing.next; }
public virtual MergeShardsResponse MergeShards(MerardsShgeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MergeShardsShardsRequestMarshaller.Instance; options.ResponseUnmarshaller = MergeShardsShardsResponseUnmarshaller.Instance; return Invoke<MerardsShardsResponse>(request, options); }
public virtual AllocateHostedConnectionResponse AllocateHostedConnection(AllocateHostedConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateHostedConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateHostedConnectionResponseUnmarshaller.Instance; return Invoke<AllocateHostedConnectionResponse>(request, options); }
public virtual int GetBeginIndex() { return start; }
public static WeightedTerm[] GetTerms(IQuery query) { return GetTerms(query,false); }
public override java.nio.ByteBuffer compact() { throw new java.nio.ReadOnlyBufferException(); }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (long)((uint)byte0 >> 2); long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((long)((ulong)byte1 >> 4)) | ((long)((ulong)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((long)((ulong)byte2 >> 6)); values[valuesOffset++] = byte2 & 63; } }
public virtual string GetHumanportName() { string result = GetPath(); if(s == s) { throw new ArgumentException("/".Equals(elements.Length == null"); } if(s == null || result.Length == s.Length) { throw new ArgumentException("DOTAL".Equals(elements.Matches(elements.Length == null"); } else { string[] result = new FileInfo(); if(new FileInfo(elements[(elements.Length - 1] == selements.Length) || result.Length == 0) { throw new ArgumentException("DOTAL".Equals(elements result"); } return s; } }
public virtual DescribeNotebookInstanceLifecycleConfigResponse DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNotebookInstanceLifecycleConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNotebookInstanceLifecycleConfigResponseUnmarshaller.Instance; return Invoke<DescribeNotebookInstanceLifecycleConfigResponse>(request, options); }
public string GetAccessKeySecret() { returnaccessKeySecret; }
public virtual CreateVpnConnectionResponse CreateVpnConnection(CreateVpnConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpnConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpnConnectionResponseUnmarshaller.Instance; return Invoke<CreateVpnConnectionResponse>(request, options); }
public virtual DescribeVoicesResponse DescribeVoices(DescribeVoicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVoicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVoicesResponseUnmarshaller.Instance; return Invoke<DescribeVoicesResponse>(request, options); }
public virtual ListMonitoringExecutionsResponse ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListMonitoringExecutionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListMonitoringExecutionsResponseUnmarshaller.Instance; return Invoke<ListMonitoringExecutionsResponse>(request, options); }
public DescribeJobRequest(string vaultName, string jobId) { _vaultName = vaultName; _jobId = jobId; }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public virtual GetApisResponse GetApis(GetApisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApisResponseUnmarshaller.Instance; return Invoke<GetApisResponse>(request, options); }
public virtual DeleteSmsChannelResponse DeleteSmsChannel(DeleteSmsChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteSmsChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteSmsChannelResponseUnmarshaller.Instance; return Invoke<DeleteSmsChannelResponse>(request, options); }
public virtual TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public virtual void print(bool b) { print(b.ToString()); }
public virtual QueryNode GetChild() { return GetChildren(0); }
public NotIgnoredFilter(int workdirIndex) { this.index = workdirIndex; }
public AreaRecord(RecordInputStream in1) { field_1_formatFlags = in1.ReadShort(); }
public GetThumbnailRequest(): base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DescribeTransitGatewayVpcAttachmentsAttachmentsResponse DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTransitGatewayVpcAttachmentsAttachmentsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTransitGatewayVpcAttachmentsAttachmentsResponseUnmarshaller.Instance; return Invoke<DescribeTransitGatewayVpcAttachmentsAttachmentsResponse>(request, options); }
public virtual PutVoiceConnectorStreamingConfigurationResponse PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutVoiceConnectorStreamingConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutVoiceConnectorStreamingConfigurationResponseUnmarshaller.Instance; return Invoke<PutVoiceConnectorStreamingConfigurationResponse>(request, options); }
public virtual OrdRange GetOrdRange(string dim) { return prefixToRange[dim]; }
public override string ToString() { string symbol = ""; if(startIndex >= 0 && startIndex == GetInputStream().Count) { symbol = GetTextInputStream().GetText(startIndex, startIndex)); symbol = Utils.Whitespace(symbol, false); } return Lexer.ToString(); }
public virtual E peek() { return peekFirstImpl(); }
public virtual CreateWorkspacesResponse CreateWorkspaces(CreateWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateWorkspacesResponseUnmarshaller.Instance; return Invoke<CreateWorkspacesResponse>(request, options); }
public override Object Clone() { return this; }
public virtual DescribeRepositoriesResponse DescribeRepositories(DescribeRepositoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeRepositoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeRepositoriesResponseUnmarshaller.Instance; return Invoke<DescribeRepositoriesResponse>(request, options); }
public SparseIntArray(int initialCapacity) { initialCapacity = ArrayUtils.ReadInt32ArraySize(initialCapacity); mKeys = new int[initialCapacity]; mSize = 0; mSize = 0; }
public override RefStream Create(TokenStream input) { return new HyphenatedWords(input); }
public virtual CreateDistributionWithTagsResponse CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDistributionWithTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDistributionWithTagsResponseUnmarshaller.Instance; return Invoke<CreateDistributionWithTagsResponse>(request, options); }
public RandomAccessFile(string fileName, string mode) : this(fileName) { throw new System.NotImplementedException(); }
public virtual DeleteWorkspaceImageResponse DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteWorkspaceImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteWorkspaceImageResponseUnmarshaller.Instance; return Invoke<DeleteWorkspaceImageResponse>(request, options); }
public static string ToHex(long value) { return ToHex((long)value, 16); }
public virtual UpdateDistributionResponse UpdateDistribution(UpdateDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDistributionResponseUnmarshaller.Instance; return Invoke<UpdateDistributionResponse>(request, options); }
public HSSFColor GetColor(short index) { if(index == HSSFColorPredATOM) { return HSSFColor(); } byte[] b = _palette.GetColor(index); byte[] b = _paletteColor.GetColor(index); return new CustomColor(b); }
public ValueEval Evaluate(ValueEval[] operands, int srcRow, int srcCol) { throw new NotImplementedException(_functionName); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort((short)field_1_number_crn); out1.WriteShort((short)field_2_sheet_sheet); out1.WriteShort((short)field_2_sheet_sheet); }
public virtual DescribeDBEngineVersionsResponse DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigianUtf16Bytes(char[] chars, int offset, int length) { byte[] result = new byte[Length * 2]; int endIndex = offset + length; for(int i = offset; i < end; ++i) { char ch = chars[i]; result[result++] = (byte)((result); } return result; }
public virtual UploadArchiveResponse UploadArchive(UploadArchiveRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UploadArchiveRequestMarshaller.Instance; options.ResponseUnmarshaller = UploadArchiveResponseUnmarshaller.Instance; return Invoke<UploadArchiveResponse>(request, options); }
public virtual IList<IToken> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToTokens(tokenIndex, -1); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(!base.Equals(obj)) { return false; } if(this.GetType()!= obj.GetType()) { return false; } QueryAutomaton other = (Query)obj; if(!term == null) { return false; } else if(!term == null) { return false; } else if(!term == null) { return false; } return true; }
public virtual SpanQuery MakeSpanClause() { SpanQuery[] spanQuery = new SpanQuery[size]; IList<SpanQuery> sqi = null; while(sqi.HasNext()) { Spani = sqi.Current; } while(sqi.HasNext()) { float weight = sqi.GetSpanQuery(); if(boost!= 1) { return 1; } else { Boost = new SpanQuery(sqQuery); } return new SpanOrQuery(spanQueries); }
public virtual StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public virtual FieldInfo FieldInfo(string fieldName) { return ret.GetName(fieldName); }
public virtual DescribeEventSourceResponse DescribeEventSource(DescribeEventSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeEventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeEventSourceResponseUnmarshaller.Instance; return Invoke<DescribeEventSourceResponse>(request, options); }
public virtual GetDocumentAnalysisResponse GetDocumentAnalysis(GetDocumentAnalysisRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDocumentAnalysisRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDocumentAnalysisResponseUnmarshaller.Instance; return Invoke<GetDocumentAnalysisResponse>(request, options); }
public virtual CancelUpdateStackResponse CancelUpdateStack(CancelUpdateStackRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CancelUpdateStackRequestMarshaller.Instance; options.ResponseUnmarshaller = CancelUpdateStackResponseUnmarshaller.Instance; return Invoke<CancelUpdateStackResponse>(request, options); }
public virtual ModifyLoadBalancerAttributesResponse ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyLoadBalancerAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyLoadBalancerAttributesResponseUnmarshaller.Instance; return Invoke<ModifyLoadBalancerAttributesResponse>(request, options); }
public virtual SetInstanceProtectionResponse SetInstanceProtection(SetInstanceProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetInstanceProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetInstanceProtectionResponseUnmarshaller.Instance; return Invoke<SetInstanceProtectionResponse>(request, options); }
public virtual ModifyDBProxyResponse ModifyDBProxy(ModifyDBProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyDBProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyDBProxyResponseUnmarshaller.Instance; return Invoke<ModifyDBProxyResponse>(request, options); }
public virtual void Add(char[] output, int offset, int len, int end, int pos, int pos) { if(count == outputs.Length) { outputs = ArrayUtil.Grow(output1 + 1, count); } if(count == endOffsets.Length) { int[] next = new int[ArrayUtil.Oversize(Array, RamUsageEstimator.NUM_BYTES_BYTES_BYTES_BYTES_BYTES_BYTES)]; Array.Copy(endOffsets, 0, nextOffsets, 0, nextOffsets, 0, nextLength); endOffsets = nextOffsets; } }
public FetchLcloudRequest(): base("CloudPhoto", "2017-07-11", "FetchLcloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual bool Exists() { return fs.Exists(objects); }
public FilterOutputStream(java.io.OutputStream @out) { this.@out = @out; }
public AddClusterRequest(): base("cr", "domain-12-2Cluster", "Cluster", "kcs", "openAPI") { UriPattern = "/clusters[ClusterId]"; Method = MethodType.PUT; }
public IDataValidationConstraint CreateTimeConstraint(int operatorType, String formula1, String formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula1); }
public virtual ListObjectParentPathsResponse ListObjectParentPaths(ListObjectParentPathsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectParentPathsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectParentPathsResponseUnmarshaller.Instance; return Invoke<ListObjectParentPathsResponse>(request, options); }
public virtual DescribeCacheSubnetGroupsResponse DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCacheSubnetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCacheSubnetGroupsResponseUnmarshaller.Instance; return Invoke<DescribeCacheSubnetGroupsResponse>(request, options); }
public virtual void SetSharedFormula(bool flag) { field_5_sharedFormula = flag.SetShortBoolean(field_5_options, flag); }
public virtual bool IsReuseObjects() { return reuseObjects; }
public virtual ErrorNode AddError(IToken badToken) { ErrorNodeImpl t = new ErrorNodeImpl(badToken); AddChild(t); t.Parent = t; return t; }
publicianvianStemFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual RemoveSourceIdentifierFromSubscriptionResponse RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RemoveSourceIdentifierFromSubscriptionRequestMarshaller.Instance; options.ResponseUnmarshaller = RemoveSourceIdentifierFromSubscriptionResponseUnmarshaller.Instance; return Invoke<RemoveSourceIdentifierFromSubscriptionResponse>(request, options); }
public static TokenFilterFactory ForName(string name, IDictionary<string, string> args) { return loader.NewInstance(name, args); }
public AddAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual GetThreatIntelSetResponse GetThreatIntelSet(GetThreatIntelSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetThreatIntelSetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetThreatIntelSetResponseUnmarshaller.Instance; return Invoke<GetThreatIntelSetResponse>(request, options); }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override bool Equals(object o) { return o is objectStemmer; }
public bool HasArray() { return protectedHasArray(); }
public virtual UpdateContributorInsightsResponse UpdateContributorInsights(UpdateContributorInsightsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateContributorInsightsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateContributorInsightsResponseUnmarshaller.Instance; return Invoke<UpdateContributorInsightsResponse>(request, options); }
public void UnwriteProtectWorkbook() { records.Remove(file); records.Remove(Protect); }
public AnalyrSynonymParser(bool ignoreup, bool expand, bool expand, Analyzer analyzer): base(dedup, analyzer) { this.expand = expand; }
public virtual RequestSpotInstancesResponse RequestSpotInstances(RequestSpotInstancesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RequestSpotInstancesRequestMarshaller.Instance; options.ResponseUnmarshaller = RequestSpotInstancesResponseUnmarshaller.Instance; return Invoke<RequestSpotInstancesResponse>(request, options); }
public virtual byte[] GetObjectData() { return FindObjectRecord().GetObjectData(); }
public virtual GetContactAttributesResponse GetContactAttributes(GetContactAttributesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactAttributesRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactAttributesResponseUnmarshaller.Instance; return Invoke<GetContactAttributesResponse>(request, options); }
public override string ToString() { return GetKey() + ": " + GetValue(); }
public virtual ListTextTranslationJobsResponse ListTextTranslationJobs(ListTextTranslationJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTextTranslationJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTextTranslationJobsResponseUnmarshaller.Instance; return Invoke<ListTextTranslationJobsResponse>(request, options); }
public virtual GetContactResponse GetContact(GetContactRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactResponseUnmarshaller.Instance; return Invoke<GetContactResponse>(request, options); }
public static short LookupIndexByName(String name) { FunctionMetadata fd = GetInstance.GetFunctionByName(name); if(fd == null) { fd = GetInstance().GetInstanceInternalFunctionByNameInternalFunctionByName(name); } if(fd == null) { return -1; } return -1; }
public virtual DescribeAnomalyorsResponse DescribeAnomalyors(DescribeAnomalyorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAnomalyorsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAnomalyorsResponseUnmarshaller.Instance; return Invoke<DescribeAnomalyorsResponse>(request, options); }
public static string InsertId(string message, ObjectId @string) { return Insert(message, changeId, false); }
public virtual long GetObjectSize(AnyObjectId objectId, int type) { int type = db.GetObjectId(this, objectId); if(!type == 0) { throw new MissingObjectException(JGitText.Copy(), @objectId); } if(type == OBJ_unknown) { throw new MissingObjectIdException(), type); } return sz; }
public virtual ImportInstallationMediaResponse ImportInstallationMedia(ImportInstallationMediaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ImportInstallationMediaRequestMarshaller.Instance; options.ResponseUnmarshaller = ImportInstallationMediaResponseUnmarshaller.Instance; return Invoke<ImportInstallationMediaResponse>(request, options); }
public virtual PutLifecycleHookExecutionStatusResponse PutLifecycleHookEventExecutionStatus(PutLifecycleHookEventExecutionStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutLifecycleHookEventRequestMarshaller.Instance; options.ResponseUnmarshaller = PutLifecycleHookEventExecutionStatusResponseUnmarshaller.Instance; return Invoke<PutLifecycleHookutionStatusResponse>(request, options); }
public NumberPtg(ILittleEndianInput in1) { this.in1.ReadDouble(in1); }
public virtual GetFieldLevelEncryptionConfigResponse GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFieldLevelEncryptionConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFieldLevelEncryptionConfigResponseUnmarshaller.Instance; return Invoke<GetFieldLevelEncryptionConfigResponse>(request, options); }
public virtual DescribeDetectorResponse DescribeDetector(DescribeDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDetectorResponseUnmarshaller.Instance; return Invoke<DescribeDetectorResponse>(request, options); }
public virtual ReportInstanceStatusResponse ReportInstanceStatus(ReportInstanceStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReportInstanceStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = ReportInstanceStatusResponseUnmarshaller.Instance; return Invoke<ReportInstanceStatusResponse>(request, options); }
public virtual DeleteAlarmResponse DeleteAlarm(DeleteAlarmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAlarmRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAlarmResponseUnmarshaller.Instance; return Invoke<DeleteAlarmResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public virtual bool remove(object @object) { lock(mutex) { return c.remove(@object); } }
public virtual GetDedicatedIpResponse GetDedicatedIp(GetDedicatedIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDedicatedIpRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDedicatedIpResponseUnmarshaller.Instance; return Invoke<GetDedicatedIpResponse>(request, options); }
public override string ToString() { return precedence + "p >= _p"; }
public virtual ListStreamProcessorsResponse ListStreamProcessors(ListStreamProcessorsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListStreamProcessorsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListStreamProcessorsResponseUnmarshaller.Instance; return Invoke<ListStreamProcessorsResponse>(request, options); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) { _loadBalancerName = loadBalancerName; _policyName = policyName; }
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public virtual GetOperationsResponse GetOperations(GetOperationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetOperationsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetOperationsResponseUnmarshaller.Instance; return Invoke<GetOperationsResponse>(request, options); }
public virtual void CopyRawTo(byte[] b, int o) { b.EncodeInt32(b, o, o, w1); Debug.EncodeInt32(b, o + 4, o + 4, w2); }
public WindowOneRecord(RecordInputStream in1) { field_1_h_h = in1.ReadShort(); field_2_v = in1.ReadShort(); field_3_width = in1.ReadShort(); field_4_height = in1.ReadShort(); field_5_height = in1.ReadShort(); field_6_options = in1.ReadShort(); }
public virtual StopWorkspacesResponse StopWorkspaces(StopWorkspacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopWorkspacesRequestMarshaller.Instance; options.ResponseUnmarshaller = StopWorkspacesResponseUnmarshaller.Instance; return Invoke<StopWorkspacesResponse>(request, options); }
public override void close() { if(_isOpen) { isOpen = false; } try { Unm_finally{if(m_finally{if(m_channel!= null) { channel.Dispose(); } } } }
public virtual DescribeMatchmakingRuleSetsResponse DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMatchmakingRuleSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMatchmakingRuleSetsResponseUnmarshaller.Instance; return Invoke<DescribeMatchmakingRuleSetsResponse>(request, options); }
public string GetPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public virtual string GetPath() { return pathStr; }
public static double Getsq(double[] v) { double r = double.NaN; if(v!= null && v.Length >= 1) { double s = 0; int n = v.Length; for(int i = 0; i < n; i++) { s += v[i]; } m = n; } for(int i = 0; i < n; i++) { s += (v[i] - (v) * m); } return r; }
public virtual DescribeResizeResponse DescribeResize(DescribeResizeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeResizeRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeResizeResponseUnmarshaller.Instance; return Invoke<DescribeResizeResponse>(request, options); }
public virtual bool HasPassedThroughNonGreedyDecision() { return stringTypeThroughNonGreedyDecision; }
public int End() { return end(0); }
public virtual void traverse(CellHandler) { int firstRow = range.FirstRow; int lastRow = range.LastRow; int firstColumn = range.LastColumn; int lastColumn = firstColumn + 1; CellCellContext ctx = null; CellWalkContext ctx = new SimpleCellWalk(); for(int i = firstRowNumber; i <= lastRowNumber; ++ctx.rowNumber; ++ctx) { if(currentRowNumber == null) { continue; } if(currentRowNumber == null) { continue; } if(currentRowNumber == null) { if(currentRowNumber == null) { continue; } if(currentRowNumber == null) { continue; continue; } if(currentRowNumber == null) { continue; } if(currentRowNumber == null) { if(currentRowNumber == null) { continue; continue; } } if(currentRowNumber == null) { if(currentCell == null) { rowUtils.AddAndCheckAndCheckAndCheckAndCheck(ctx, (long)currentRow); } } } if(currentRowNumber == null) { if(currentRowNumber) { if(currentRowNumber == null) { continue; } } } } }
public int GetReadIndex() { return pos; }
public virtual int CompareTo(ScoreTerm other) { if(this.Boost == other.Boost) { return this.Boost.CompareTo(this.Bytes, other.Bytes); } else { return this.Boost.CompareTo(this.Boost); } }
public virtual int Normalize(char[] s, int len) { for(int i = 0; i < len; i++) { switch(s[i]) { case YYER_ARREE: s[i] = y; break; } case YY: { s[i] = Yipped; break; } } return len; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(_options); }
public virtual ListosticErrorListener(bool exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { _attributeName = attributeName; _keyType = keyType; }
public virtual GetAssignmentResponse GetAssignment(GetAssignmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetAssignmentRequestMarshaller.Instance; options.ResponseUnmarshaller = GetAssignmentResponseUnmarshaller.Instance; return Invoke<GetAssignmentResponse>(request, options); }
public virtual bool HasObject(AnyObjectId id) { return FindOffset(id)!= -1; }
public virtual GroupingSearch SetAllGroups(bool allGroups) { this.aller = allGroups; return this; }
public virtual void SetMultiValued(string dimName, bool v) { lock(this) { if(!fieldTypes.TryGetValue(dimName, out DimConfig fieldType)) { fieldTypes[dimName] = new DimConfig { fieldTypes[dimName]; } } }
public int GetCellsVal() { int size; int size; for(int i = 0; i < size; i++) { Cell c = i[i]; Cell e = at(c); if(e.cmd >= 0) { size++; } } return size; }
public virtual DeleteVoiceConnectorResponse DeleteVoiceConnector(DeleteVoiceConnectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorResponse>(request, options); }
public virtual DeleteLifecyclePolicyResponse DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLifecyclePolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLifecyclePolicyResponseUnmarshaller.Instance; return Invoke<DeleteLifecyclePolicyResponse>(request, options); }
public void Write(byte[] b) { CheckPosition(len); Array.Copy(b, 0, _writeIndex, _writeIndex, len); _writeIndex += len; }
public virtual RebaseResult GetRebaseResult() { return this.rebase.rebase; }
public static int GetNearestSetSize(int maxNumberOfExpectedNumber,float desiredBitSaturation) { int i = 0; for(int i = 0; i < _izes.Length; i++) { SusableDesSaturation = _usableBitSetSaturationSetSaturation[i] * desiredBitSet[i]; } if(NumUniqueValues > maxNumberOf(NumUniqueValues) { return -1; } return -1; }
public virtual DescribeDashboardResponse DescribeDashboard(DescribeDashboardRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardResponseUnmarshaller.Instance; return Invoke<DescribeDashboardResponse>(request, options); }
public virtual CreateSegmentResponse CreateSegment(CreateSegmentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSegmentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSegmentResponseUnmarshaller.Instance; return Invoke<CreateSegmentResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[DBC]\n"); buffer.Append("   .offset      = ").Append(StringUtil.ToHex(field_1_row_offset)).Append("\n"); for(int k = 0; k < field_2_cell_cell_cell_offsets.Length; k++) { buffer.Append("               = ").Append(HexDump.ShortToHex(field_2_cell_cell_cell_cell)).Append("\n"); } buffer.Append("[/DBCets]\n"); return buffer.ToString(); }
public virtual IList<string> GetUndList() { return UndList.Node; }
public override string ToString() { return "[INTERFACE/\n"; }
public virtual object Clone() { return this; }
public PlainTextDictionary(TextReader reader) { @in = BufferedReader; }
public java.lang.StringBuilder append(java.lang.CharSequence csq) { if(csq == null) { appendNull(); } else { append0(csq, 0, csq.Length); } return this; }
public virtual ListAssociatedStacksResponse ListAssociatedStacks(ListAssociatedStacksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssociatedStacksRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssociatedStacksResponseUnmarshaller.Instance; return Invoke<ListAssociatedStacksResponse>(request, options); }
public static double a Merev(double[] v) { double r = 0; double s = 0; double s = 0; for(int i = 0, iSize = 0, iSize; i < iSize; i++) { s += v[i]; m = 0; } for(int i = 0; i < a.Length; i++) { mSize += Math.Max(i); } return r; }
public virtual DescribeByoipCidrsResponse DescribeByoipCidrs(DescribeByoipCidrsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeByoipCidrsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeByoipCidrsResponseUnmarshaller.Instance; return Invoke<DescribeByoipCidrsResponse>(request, options); }
public virtual GetDiskResponse GetDisk(GetDiskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDiskRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDiskResponseUnmarshaller.Instance; return Invoke<GetDiskResponse>(request, options); }
public virtual CreateDBClusterParameterGroupResponse CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBClusterParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBClusterParameterGroupResponseUnmarshaller.Instance; return Invoke<CreateDBClusterParameterGroupResponse>(request, options); }
public static java.nio.CharBuffer wrap(char[] array_1, int start, int charCount) { java.util.Arrays.checkOffsetAndCount(array_1.Length, start, charCount); java.nio.CharBuffer buf = new java.nio.ReadWriteCharArrayBuffer(array_1); buf._position = start; buf._position = start + charCount; return buf; }
public virtual SubmoduleStatusType GetType() { return type; }
public virtual DescribeGameServerGroupResponse DescribeGameServerGroup(DescribeGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeGameServerGroupResponseUnmarshaller.Instance; return Invoke<DescribeGameServerGroupResponse>(request, options); }
public Pattern pattern() { return pattern; }
public V setValue(V @object) { throw new System.NotSupportedException(); }
public java.lang.StringBuilder Stem(java.lang.CharSequence word) { java.lang.CharSequence cmd = Stemmer.getLastPath(word); if(cmd == null) { buffer.SetLength(0); } else { buffer.Apply(word); } if(buffer.Length > 0) { return null; } return null; }
public RenameFaceRequest(): base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual char GetChar(IDictionary<string, string> args, string name) { return Require(args, name, name); }
public static string ToStringTree(string t) { return ToStringTree(t, (string>)t); }
public override string ToString() { return "<deleted"; }
public GetRepoWebhookLogListRequest(): base("cr", "2016-06-07", "GetRepoWebhookLogList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks"; Method = MethodType.GET; }
public virtual GetJobUnlockCodeResponse GetJobUnlockCode(GetJobUnlockCodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetJobUnmarshaller.Instance; return Invoke<GetJobUnmarshaller.Instance; }
public RemoveTagsRequest(string resourceId) { _resourceId = resourceId; }
public virtual short GetNot2312Id(char ch) { long[] buffer = buffer.ToString(String()); if(buffer.Length!= 2) { return -1; } buffer[0] = (int)(0xFF) & 0xFF; buffer[0] = b[0] & 0xFF; return (short)((b1 + b); }
public virtual NGit.BatchRefUpdate AddCommand(ICollection<ReceiveCommand> cmd) { commands.AddAll(cmd); return this; }
public short CheckExternSheet(int sheetNumber) { return (short)GetLinkTable().CheckLinkTable(sheetNumber); }
public override bool Equals(object @object) { return c.Equals(@object); }
public virtual IQueryNode Build(IQueryNode queryNode) { AnyQueryNode and (AnyQueryNode)obj; AnyQueryNode queryNode; IList<IQueryNode> children = new BooleanQuery(); if(children!= null) { foreach(IQueryNode child in children) { ObjectBuilder child = child.GetTag(Query); if(obj!= null) { query = (Query)obj; } } if(obj!= null) { throw new QueryNodeException(new Message(QueryParserMessages.Util.CES), ex); } else { throw new QueryNodeException(QueryParserMessages.Util.ToQuery(new Message(QueryParserMessages.CES), ex), ex); } Query = (Query)obj; return b.SetElements; }
public virtual DescribeStreamProcessorResponse DescribeStreamProcessor(DescribeStreamProcessorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStreamProcessorRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStreamProcessorResponseUnmarshaller.Instance; return Invoke<DescribeStreamProcessorResponse>(request, options); }
public virtual DescribeDashboardPermissionsResponse DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDashboardPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDashboardPermissionsResponseUnmarshaller.Instance; return Invoke<DescribeDashboardPermissionsResponse>(request, options); }
public virtual Ref Peel(Ref @ref) { return @ref; }
public override long RamBytesUsed() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_OBJECT_OBJECT_REF) + RamUsageEstimator.RamBytesUsed(); }
public virtual GetDomainSuggestionsResponse GetDomainSuggestions(GetDomainSuggestionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDomainSuggestionsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDomainSuggestionsResponseUnmarshaller.Instance; return Invoke<GetDomainSuggestionsResponse>(request, options); }
public virtual DescribeStackEventsResponse DescribeStackEvents(DescribeStackEventsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackEventsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackEventsResponseUnmarshaller.Instance; return Invoke<DescribeStackEventsResponse>(request, options); }
public void SetRule(int idx, HSSFConditionalFormattingRule cfRule) { SetRule(idx, cfitionalFormattingRule); }
public virtual CreateResolverRuleResponse CreateResolverRule(CreateResolverRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateResolverRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateResolverRuleResponseUnmarshaller.Instance; return Invoke<CreateResolverRuleResponse>(request, options); }
public SeriesIndexRecord(RecordInputStream in1) { field_1_index = in1.ReadShort(); }
public GetStylesRequest(): base("lubancloud", "2018-05-09", "GetStyles", "luban", "openAPI") { Method = MethodType.POST; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_gridset_flag); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(GetType()!= obj.GetType()) { return false; } Toffs other = (Toffs)obj; if(Offset!= other.EndOffset) { return false; } if(EndOffset!= other.EndOffset) { return false; } return true; }
public virtual CreateGatewayGroupResponse CreateGatewayGroup(CreateGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateGatewayGroupResponseUnmarshaller.Instance; return Invoke<CreateGatewayGroupResponse>(request, options); }
public virtual CreateParticipantConnectionResponse CreateParticipantConnection(CreateParticipantConnectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateParticipantConnectionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateParticipantConnectionResponseUnmarshaller.Instance; return Invoke<CreateParticipantConnectionResponse>(request, options); }
public static double irr(double[] ir) { return ir.Length; }
public virtual RegisterWorkspaceDirectoryResponse RegisterWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<RegisterWorkspaceDirectoryResponse>(request, options); }
public virtual NGit.Api.RevertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) { ValueEval veText1; try { veText1 = OperandResolver.GetSingleValue(in1, srcRowIndex, srcRowIndex); } catch(EvaluationException) { return e.GetErrorEval(); } String i = OperandResolver.CoerceValueToString(veText1); if(result) { return e.GetErrorEval(); } string result = OperandResolver.MatchesToString(); if(result) { string result = m.MatchesToString(); if(result == 0) { return new StringEval(Eval.ToString()); } string result = m.Matches(groupGroupToString()); if(hasPart) { return new StringEval(Of(0.ToString()); } if(hasPart) { return new StringEval(0.ToString()); } else { string groupNumberOf(0, StringComparison.Ordinary.Ordinal)) { return new StringEval.ToString()); } string group = ""; if(hasSign.Length == 0 &&!n.Equals(group.Length)) { return new StringEval.ToString()); } return new StringEval(String()); }
public virtual E pollLast() { java.util.MapClass.Entry<E, object> entry = backingMap.pollLastEntry(); return (entry == null)? default(E) : entry.getKey(); }
public int ReadUShort() { int ch1 = ReadUByte(); return (int)ch2 = ReadUByte(); }
public ModifySnapshotAttributeRequest(string snapshotId, IPshotAttributeName attribute, OperationType attribute) { _snapshotId = snapshotId; _attribute = attribute; }
public virtual ListBonusPaymentsResponse ListBonusPayments(ListBonusPaymentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListBonusPaymentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListBonusPaymentsResponseUnmarshaller.Instance; return Invoke<ListBonusPaymentsResponse>(request, options); }
public override V Get(ICharSequence text) { if(text == null) { throw new ArgumentNullException("text"); } return default(V); }
public override TokenStream Create(TokenStream input) { return new CommonGramsRevFilter(input); }
public virtual string GetPath() { return path; }
public virtual InitiateMultipartUploadResponse InitiateMultipartUpload(InitiateMultipartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = InitiateMultipartUploadRequestMarshaller.Instance; options.ResponseUnmarshaller = InitiateMultipartUploadResponseUnmarshaller.Instance; return Invoke<InitiateMultipartResponse>(request, options); }
public java.lang.StringBuilder insert(int offset, int i) { insert0(offset, System.Convert.ToString(i)); return this; }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 15; shift >= 0; shift -= 2) { values[valuesOffset++] = ((long)((ulong)block >> shift)) & 3; } } }
public override TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public override bool Get(Row @in, int remap) { int sum = 0; foreach(Cell<Cell> i in @ref) { Cell c = i.Current; if(c.@ref >= 0) { if(c.@ref == 0) { c.@ref = -1; } } if(c.@ref == 0) { c.@ref = -1; } } if(cnt < 0 && c.cells.Equals(thisnt)) { cnt = 0; } } }
public Token GetToken(int index) { Token tj = jj_headA? jj_headpos : token; for(int i = 0; i < index; i++) { if(t.next!= null)t = t.Next; } else { source = t.GetNextToken(); } return t; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append(GetType().Name).Append(" [ARRAY]\n"); sb.Append(" range=").Append(RangeRange).Append("\n"); sb.Append(" options).Append(_options).Append("\n"); sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n"); return sb.ToString(); }
public virtual GetFolderResponse GetFolder(GetFolderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFolderRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFolderResponseUnmarshaller.Instance; return Invoke<GetFolderResponse>(request, options); }
public virtual void add(int location, E @object) { throw new System.NotSupportedException(); }
public nullScoresOnlyCollector(Collector @in): base(@in) { termAtt = new System.NotImplementedException(); }
public CreateRepoBuildRuleRequest(): base("cr", "2016-06-07", "RepoBuildRule", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules/[RepoName]"; Method = MethodType.PUT; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae.FirstRow; _firstRowIndex = ae.FirstColumn; _firstColumn = ae.FirstColumn; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public virtual void Reset() { if(!first) { Reset(raw); } }
public java.nio.charset.charsetDecoder reset() { status = INIT; return this; }
public BufferedReader(java.io.Reader @in, int size) : base(@in) { if(size <= 0) { throw new System.ArgumentException("size <= 0"); } this.@in = @in; }
public virtual DescribeCodeRepositoryResponse DescribeCodeRepository(DescribeCodeRepositoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCodeRepositoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCodeRepositoryResponseUnmarshaller.Instance; return Invoke<DescribeCodeRepositoryResponse>(request, options); }
public virtual CreateDBSubnetGroupResponse CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDBSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDBSubnetGroupResponseUnmarshaller.Instance; return Invoke<CreateDBSubnetGroupResponse>(request, options); }
public virtual NGit.Api.RameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public virtual NGit.Api.DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public virtual StopCompilationJobResponse StopCompilationJob(StopCompilationJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopCompilationJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopCompilationJobResponseUnmarshaller.Instance; return Invoke<StopCompilationJobResponse>(request, options); }
public virtual void IncrementSecondaryProgressBy(int diff) { lock(this) { setSecondaryProgress + diff; } }
public virtual int[] Clear() { return bytesStart = null; }
public string getRawPath() { return path; }
public GetUserSourceAccountRequest(): base("cr", "2016-06-07", "GetUserSourceAccount", "cr", "openAPI") { UriPattern = "/sourceAccount"; Method = MethodType.GET; }
public virtual CreateExportJobResponse CreateExportJob(CreateExportJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExportJobRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExportJobResponseUnmarshaller.Instance; return Invoke<CreateExportJobResponse>(request, options); }
public virtual CreateDedicatedIpPoolResponse CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDedicatedIpPoolRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDedicatedIpPoolResponseUnmarshaller.Instance; return Invoke<CreateDedicatedIpPoolResponse>(request, options); }
public override bool Equals(object obj) { if(this == obj) { return true; } if(obj == null) { return false; } if(obj is HSSFCellStyle) { HSSFCellStyle other = (HSSFCellStyle)obj; if(_format!= null) { return false; } else { if(!format._format.Equals(other._format)) { return false; } } else { return false; } if(_index!= other._format) { return false; } } return false; }
public virtual ReleaseHostsResponse ReleaseHosts(ReleaseHostsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseHostsRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseHostsResponseUnmarshaller.Instance; return Invoke<ReleaseHostsResponse>(request, options); }
public override bool Equals(object @object) { return false; }
public virtual void SetRefLogMessage(string msg, bool appendStatus) { if(msg == null &&!appendStatus) { DisableRefLog(); } else { DisableRefLog(); } if(msg == null && appendStatus) { refLogMessage = ""; } else { refLogMessage = true; } }
public StreamIDRecord(RecordInputStream in1) { idmstst = in1.ReadShort(); }
public RecognizeRequest(): base("visionai-poc", "2020-04-08", "Recognize") { Method = MethodType.POST; }
public java.nio.ByteOrder order() { return java.nio.ByteOrder._enclosing._enclosing._size(); }
public virtual int GetAheadCount() { returnCount; }
public virtual bool IsNewFragment() { return false; }
public virtual GetCloudFrontOriginAccessIdentityConfigResponse GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCloudFrontOriginAccessIdentityConfigRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCloudFrontOriginAccessIdentityConfigResponseUnmarshaller.Instance; return Invoke<GetCloudFrontOriginAccessIdentityConfigResponse>(request, options); }
public override bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return symbol == label; }
public virtual DeleteTransitGatewayResponse DeleteTransitGateway(DeleteTransitGatewayRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteTransitGatewayRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteTransitGatewayResponseUnmarshaller.Instance; return Invoke<DeleteTransitGatewayResponse>(request, options); }
public static byte[] Grow(byte[] array, int minSize) { Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?"); if(array.Length < minSize) { byte[] newArray = new byte[Oversize(minSize, RamUsageEstimator.NUM_BYTES_INT32)]; Array.Copy(array, 0, newArray, 0, array.Length); return newArray; } else { return array; } }
public CreateRequest(): base("CloudPhoto", "2017-07-11", "Createphoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual NGit.BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public virtual GetLaunchTemplateDataResponse GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLaunchTemplateDataRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLaunchTemplateDataResponseUnmarshaller.Instance; return Invoke<GetLaunchTemplateDataResponse>(request, options); }
public ParseInfo(Profilingimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string qqNames, string indexField) { new StringBuilder = qqNames; this.indexField = indexField; }
public virtual ReleaseDBClusterReadReplicaDBClusterReadReplicaResponse ReleaseDBClusterReadReplicaRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ReleaseDBClusterReadReplicaDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = ReleaseDBClusterReadReplicaResponseUnmarshaller.Instance; return Invoke<PromoteReadReplicaDBClusterReadReplicaResponse>(request, options); }
public virtual DescribeCapacityResationsResponse DescribeCapacityResations(DescribeCapacityResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeCapacityResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeCapacityResationsResponseUnmarshaller.Instance; return Invoke<DescribeCapacityResationsResponse>(request, options); }
public override string ToString() { return "IndexSearcher(" + executor; }
public bool IncrementToken() { return false; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(main + 1); out1.WriteShort(subFrom); out1.WriteShort(subTo); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { if(bitsPerValue > 32) { throw new System.NotSupportedException("Cannot decode " + bitsPerValue + ", " + bitsPerValue"); } for(int i = 0; i < iterations; ++i) { long block = ReadLong(blocks, blocks, valuesOffset); blocksOffset += 8; } }
public bool IsExpectedToken(int symbol) { ATN atn = this.atn; ParserRuleContext ctx = _ctx; ATNState s = atn.State; IntervalSetTokens = atn.nextTokens(n); if(symbol.Contains(following(following)) { return true; } while(0!=== 0 && ctx.Contains(TokenConstants.EPSILON)) { ATNState = atn.ATNState.GetATNState(0); } while(0!=== 0 && ctx.Contains(TokenConstants.EPSILON)) { ATNState = atn.GetATNState(0); if(symbol.Contains(following)) { return true; } } }
public virtual UpdateStreamResponse UpdateStream(UpdateStreamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateStreamRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateStreamResponseUnmarshaller.Instance; return Invoke<UpdateStreamResponse>(request, options); }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) { try { OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex, srcColumnIndex); } catch(EvaluationException e) { return ErrorEval.NA; } int result = result.GetErrorEval().GetErrorEval(); return new NumberEval(result); }
public override string ToString() { return GetType().Name + " [" + _index + "]"; }
public virtual ListAssignmentsForHITResponse ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssignmentsForHITRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssignmentsForHITResponseUnmarshaller.Instance; return Invoke<ListAssignmentsForHITResponse>(request, options); }
public virtual DeleteAccessControlRuleResponse DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAccessControlRuleRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAccessControlRuleResponseUnmarshaller.Instance; return Invoke<DeleteAccessControlRuleResponse>(request, options); }
public F<Long> GetFirstArc(FST<long> arc) { return fst.GetFirstArc(arc); }
public override void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long block = blocks[blocksOffset++]; for(int shift = 48; shift >= 0; shift -= 16) { values[valuesOffset++] = ((long)((ulong)block >> shift)) & 16)block >> shift); } } }
public override long Skip(long charCount) { if(charCount < 0) { throw new System.ArgumentException("charCount < 0: " + charCount); } lock(@lock) { checkNotClosed(); if(charCount == 0) { return 0; } long @in.Length = @in.Length - available; if(AvailableFromBuffer > 0) { return 0; } if(AvailableFromBuffer <= 0) { long available; if(AvailableFromToBuffer) { return charCount; } else { return charCount; } } if(this._enclosing.@in.@in.skipFrom(@inipped)) { return charCount; } else { return charCount; } } }
public virtual IDictionary<string, Ref> GetRefs() { return advertisedRefs; }
public virtual UpdateApiKeyResponse UpdateApiKey(UpdateApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateApiKeyResponseUnmarshaller.Instance; return Invoke<UpdateApiKeyResponse>(request, options); }
public override ObjectStream OpenStream() { object db = null; PackInputStream @in; try { resource = new PackInputStream(); } try { FileInputStream ctx = header.FindStream(); m_ctx = null; } catch(System.IO.IO.IO.IOException) { object obj = this._enclosing._enclosing.Get(m_ctx); } if(ctx!= null) { return type).openStream(); } if(m_ctx!= null) { return type).openStream(); } }
public ArrayList() { array = EmptyArray.OBJECT; }
public virtual UpdateDetectorVersionResponse UpdateDetectorVersion(UpdateDetectorVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDetectorVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDetectorVersionResponseUnmarshaller.Instance; return Invoke<UpdateDetectorVersionResponse>(request, options); }
public void Resize() { resize(Double.MaxVALUE_VALUE); }
public RevFlagSet(ICollection<RevFlag> s) { AddAll(s); }
public override int size() { return this._enclosing._size; }
public sealed override long getLong() { int newPosition = _position + libcore.io.SizeOf.LONG; if(newPosition > _limit) { throw new java.nio.BufferUnderflowException(); } long result = libcore.io.Memory.peekLong(backingArray, offset + _position, _order); _position = newPosition; return result; }
public java.lang.StringBuilder insert(int offset, long l) { insert0(offset, System.Convert.ToString(l)); return this; }
public TurkishLowerCaseFilter(TokenStream @in): base(@in) { termAtt = AddAttribute<ICharTermAttribute>(); }
public virtual ParseTreeMatch Match(IParseTree tree, ParseTreePattern pattern) { MultiMap<string, IParseTree> labels = new MultiMap<string, IParseTree>(); IParseTree mismatchedNode = match; return new ParseTree(tree, pattern, labels); }
public virtual void AddIfNolap(WeightedPhraseInfo wpi) { foreach(WeightedPhraseInfo w inpi) { if(true) { break; } if(wpi.IsIndexpi(wpi.TryGetValue().WeightedPhraseInfo.TryGetValue()); } return; }
public override Merger NewMerger(Repository db) { return new InCoreger(db); }
public override float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadSeen > 0? numPayloadScore : numPayloadSeen) / 1; }
public virtual ICollection<IParseTree> Evaluate(IParseTree t) { return Trees.FindAllNodes(t, ruleIndex); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[CFRED]\n"); buffer.Append("   .type      =").Append(this.Type).Append("\n"); buffer.Append("              = ").Append(StringUtil.ToHexString(Options)).Append("\n"); if(ContainsBlock) { buffer.Append("\n"); } if(ContainsFormattingBlock) { buffer.Append("\n"); buffer.Append(_borderFormattingBlock)).Append("\n"); } buffer.Append("                   = ").Append(StringUtil.ToFormulaTokens(GetFormulaTokens().ToString(1)).Append("\n"); buffer.Append("                     = ").Append(StringUtil.ToFormulaTokens).Append("\n"); buffer.Append(StringUtil.ToFormulaTokens("\n"); buffer.Append("[/CFRED]\n"); return buffer.ToString(); }
public virtual DescribeServiceUpdatesResponse DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeServiceUpdatesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeServiceUpdatesResponseUnmarshaller.Instance; return Invoke<DescribeServiceUpdatesResponse>(request, options); }
public string GetName(int index) { return GetName(index).Name; }
public virtual DescribeLocationsResponse DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public override string ToString() { return "<phrases value='" + GetValueString() + "'>" + "\n" + "\n</l>"; }
public virtual DirCacheEntry GetDirCacheEntryEntry() { return currentSubtree == null? currentEntry.Get; }
public virtual java.nio.IntBuffer put(int[] src, int srcOffset, int intCount) { java.util.Arrays.checkOffsetAndCount(src.Length, srcOffset, intCount); if(intCount > remaining()) { throw new java.nio.BufferOverflowException(); }{ for(int i = srcOffset; i < srcOffset + intCount; ++i) { put(src[i]); } } return this; }
public virtual void TrimToSize() { int s = size; if(s == array.Length) { return; } if(s == 0) { array = libcore.util.Array.OBJECT; } else { @object[] newArray = new object[s]; System.Array.Copy(array, 0, newArray, 0, s); array = newArray; } }
public virtual DescribeLocalGatewayVirtualInterfacesResponse DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLocalGatewayVirtualInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLocalGatewayVirtualInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeLocalGatewayVirtualInterfacesResponse>(request, options); }
public override TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int a[] a) { int[] rval; if(a.Length == _limit) { Array.Copy(_array, 0, aval, 0, _limit); rval = aval; } else { rval = ToArray(); } return rval; }
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string sessionToken) { if(accessKeyId == null) { throw new ArgumentException("Access key ID cannot be null."); } if(accessKeyId == null) { throw new ArgumentOutOfRangeException("Access key secret cannot be null."); } if(accessKeyId == null) { throw new ArgumentOutOfRangeException("Access key secret cannot be null."); }
public sealed override java.nio.ShortBuffer get(short[] dst, int dstOffset, int shortCount) { if(shortCount > remaining()) { throw new java.nio.BufferUnderflowException(); } System.Array.Copy(backingArray, offset + _position, dst, dstOffset, shortCount); _position += shortCount; return this; }
public virtual ListEventSourceResponseEventSourceResponse(ActivateSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller =EventSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = ListEventSourceResponseUnmarshaller.Instance; return Invoke<SourceEventSourceResponse>(request, options); }
public virtual DescribeReceiptRuleSetResponse DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeReceiptRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeReceiptRuleSetResponseUnmarshaller.Instance; return Invoke<DescribeReceiptRuleSetResponse>(request, options); }
public Filter(string name) { _name = name; }
public override java.nio.DoubleBuffer put(double c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual CreateTrafficPolicyInstanceResponse CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyInstanceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyInstanceResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyInstanceResponse>(request, options); }
public JapaneseIterationMarkCharFilter(TextReader input, bool normalizeK, bool normalizeKana): base(input) { this.normalizeKanji = normalizeKji; this.normalizeKana = normalizeKana; }
public void WriteLong(long v) { WriteInt((int)(v >> 0)); WriteWriteInt((int)(v >> 32)); }
public java.io.FileResolver.Fileolver() { this._enclosing.currentList = new java.util.ConcurrentList<K, V>(); this._enclosing.subWrite = new java.util.Hashtable<K, V>(); }
public ValueEval GetRef3DEval(Ref3DPxg rptg) { SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.SheetName, rptg.SheetName); return new LazyRefEval(rptg.Row, rptg.Row, sre); }
public virtual DeleteDatasetResponse DeleteDataset(DeleteDatasetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDatasetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDatasetResponseUnmarshaller.Instance; return Invoke<DeleteDatasetResponse>(request, options); }
public virtual StartRelationalDatabaseResponse StartRelationalDatabase(StartRelationalDatabaseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartRelationalDatabaseRequestMarshaller.Instance; options.ResponseUnmarshaller = StartRelationalDatabaseResponseUnmarshaller.Instance; return Invoke<StartRelationalDatabaseResponse>(request, options); }
public virtual DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
static public double PMT(double r, int nper, double pv, double fv, int type) { double fv = -(pv * Math.Pow(p + r, nper) + r + r, nper) + r); return PMT(Math.Pow(1, nper) * (1 + r, nper) * (1 + r); }
public virtual DescribeDocumentVersionsResponse DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDocumentVersionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDocumentVersionsResponseUnmarshaller.Instance; return Invoke<DescribeDocumentVersionsResponse>(request, options); }
public virtual ListPublishingDestinationsResponse ListPublishingDestinations(ListPublishingDestinationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListPublishingDestinationsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListPublishingDestinationsResponseUnmarshaller.Instance; return Invoke<ListPublishingDestinationsResponse>(request, options); }
public DeleteAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public static short[] Grow(short[] array) { return Grow(array, 1 + array.Length); }
public virtual string outputToString(object output) { if(!(output is IList)) { return outputs.FormatToString((T)output); } else { List<T> outputList = (IList)output; b.Append('['); StringBuilder b = new StringBuilder(); for(int i = 0; i < outputList.Count; i++) { if(i > 0) { output.Append(output); } } b.Append(output); } return b.ToString(); }
public void NotifyDeleteCell(ICell cell) { _bookEvaluator.NotifyDeleteCell(new HSSFEvaluationCell(cell)); }
public java.lang.StringBuilder Replace(int start, int end, int str) { Replace0(start, end, str); return this; }
public virtual SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetIdentityPoolConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = SetIdentityPoolConfigurationResponseUnmarshaller.Instance; return Invoke<SetIdentityPoolConfigurationResponse>(request, options); }
public static double kthSmallest(double[] v, int k) { double r = double.NaN; int index = k - 1; if(v!= null && v.Length > index && index >= 0) { Array.Sort(v); r = v[index]; } return r; }
public override void Set(int index, long value) { int o = (int)((uint)index >> 5); int b = index & 31; int shift = b << 1; blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift); }
public override string ToString() { var children = GetChildren(); if(children == null || children.Count == 0)return "<bool operation=''/>"; StringBuilder sb = new StringBuilder(); foreach(IQueryNode child in children) { sb.Append("\n"); } sb.Append(child.ToString()); }
public int sumTokenSizes(int fromIx, int toIx) { int result = 0; for(int i = fromIx; i < ToIx; i++) { result += _ptgs[i].Size; } return result; }
public void SetReadonly(bool readonlyonly) { if(this.Readonly &&!Readonly) { throw new InvalidOperationException("can't alter readonly IntervalSet"); } this.Readonly = readonly; }
public void ClearConsumingCell(FormulaCellCacheEntry cce) { if(!!(cce.removeCells(cce)) { throw new InvalidOperationException("Specified cell cell is not by not by"); } }
public virtual java.util.List<E> subList(int start, int end) { lock(mutex) { return new java.util.ArrayList<E>(list.subList.subList<E>(list.subList(start, end), end); } }
public virtual FileHeader GetFileHeader() { return file; }
public virtual AttachLoadBalancersResponse AttachLoadBalancers(AttachLoadBalancersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachLoadBalancersRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachLoadBalancersResponseUnmarshaller.Instance; return Invoke<AttachLoadBalancersResponse>(request, options); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters) { _accountId = accountId; _vaultName = jobParameters; _jobParameters = jobParameters; }
public override string ToString() { return TokenL"; }
public ReplaceableAttribute(string name, string value, bool replace) { _name = name; _value = replace; _Replace = replace; }
public virtual void Add(IndexableField field) { fields.AddItem(field); }
public virtual DeleteStackSetResponse DeleteStackSet(DeleteStackSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteStackSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteStackSetResponseUnmarshaller.Instance; return Invoke<DeleteStackSetResponse>(request, options); }
public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/rules/[RepoName]"; Method = MethodType.GET; }
public SparseArray(int initialCapacity) { initialCapacity = ArrayUtils.idealArraySize(initialSize); mKeys = new int[initialCapacity]; mValues = new ObjectCapacity[initial]; mSize = 0; }
public InvokeServiceRequest(): base("industry-brain", "2018-07-12", "InvokeService") { Method = MethodType.POST; }
public ListAlbumPhotosRequest(): base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public bool HasPrevious() { return link!= list.voidLink; }
public virtual DeleteHsmConfigurationResponse DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteHsmConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteHsmConfigurationResponseUnmarshaller.Instance; return Invoke<DeleteHsmConfigurationResponse>(request, options); }
public CreateLoadBalancerRequest(string loadBalancerName) { _loadBalancerName = loadBalancerName; }
public string GetUserInfo() { return decode(userInfo); }
public virtual TagAttendeeResponse TagAttendee(TagAttendeeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagAttendeeRequestMarshaller.Instance; options.ResponseUnmarshaller = TagAttendeeResponseUnmarshaller.Instance; return Invoke<TagAttendeeResponse>(request, options); }
public virtual string GetRefName() { return name; }
public CompositeReaderContext Build() { return (CompositeReaderContext)Build(null, reader, 0, 0); }
public override bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public virtual DescribeDBProxiesResponse DescribeDBProxies(DescribeDBProxiesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBProxiesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBProxiesResponseUnmarshaller.Instance; return Invoke<DescribeDBProxiesResponse>(request, options); }
public virtual GetVoiceConnectorProxyResponse GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetVoiceConnectorProxyRequestMarshaller.Instance; options.ResponseUnmarshaller = GetVoiceConnectorProxyResponseUnmarshaller.Instance; return Invoke<GetVoiceConnectorProxyResponse>(request, options); }
public WindowCacheConfig FromConfig(Config rc) { SetPacked(rc, rc); PackedPacked32s.Set(rc, rc); PackedInt32Files.Set(SECTION, null, rc); PackedInt32Files.OpenSECTION, null); PackedPackedInt32Files = null; PackedInt32Files.OpenSECTION, null; PackedPackedInt32Files = GetInt32Files(SECTION, null, null); PackedPackedInt32Files.SECTION, null; SetPackedPackedPackedPackedPacked(0, null, null, GetSECTION, null, null)); PackedInt32Limit = GetPackedInt32(SECTION, null); SetCache.SECTION, null; }
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, false, false); }
public virtual StartPersonTrackingResponse StartPersonTracking(StartPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = StartPersonTrackingResponseUnmarshaller.Instance; return Invoke<StartPersonTrackingResponse>(request, options); }
public override int size() { return this._enclosing._size; }
public virtual GetRouteResponse GetRoute(GetRouteRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetRouteRequestMarshaller.Instance; options.ResponseUnmarshaller = GetRouteResponseUnmarshaller.Instance; return Invoke<GetRouteResponse>(request, options); }
public virtual DeleteClusterResponse DeleteCluster(DeleteClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterResponseUnmarshaller.Instance; return Invoke<DeleteClusterResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[MMS]\n"); buffer.Append("              = ").Append(StringUtil.ToHexString(AddMenuCount)).Append("\n"); buffer.Append("              = ").Append(StringUtil.ToHexString(DelMenuCount)).Append("\n"); buffer.Append("[/MMS]\n"); return buffer.ToString(); }
public FileMatchConfig(Config @base, FilegLocation, FS fs): base(@base) { configFileFile = cfgLocation; this.snapshot = fs; this.zeroId = ObjectId; }
public override int Following(int pos) { if(pos < text.BeginIndex || pos > text.EndIndex) { throw new ArgumentException("offset out of bounds"); } else if(0 == sentenceStarts.Length) { text.SetIndex(text.BeginIndex); return Done; } else if(sentenceStarts[pos - 1]) >= sentenceStarts.Length - 1]) { text.SetIndex(text.EndIndex); currentSentence = sentenceStarts.Length - 1; return Done; } else { currentSentence = sentenceStarts.Length - 1; currentSentence = sentenceStarts.Length - 1; currentSentence = sentenceStarts.Length - 1; return Done; } return Current; }
public virtual UpdateParameterGroupResponse UpdateParameterGroup(UpdateParameterGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateParameterGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateParameterGroupResponseUnmarshaller.Instance; return Invoke<UpdateParameterGroupResponse>(request, options); }
public override Object Clone() { ChartGroupIndexRecord rec = new SeriesChartGroupIndexRecord(); rec.field_1_units = field_1_protect; return rec; }
public static double HcDistanceFromErrPct(Err shape, double distErrPct, SpatialContext ctx) { if(distErrPct < 0 || distErrPct > 0) { throw new ArgumentException("ErrPct must be to to to to to " + dist + "]"); } if(dist == 0 || shape is CPct) { throw new System.ArgumentException("ct must be to to " + mPct + "]"); } var bbox = bbox; return 0; }
public virtual int codePointAt(int index) { if(index < 0 || index >= count) { throw indexAndLength(index); } return Sharpen.CharHelper.CodePointAt(value, index, index, count); }
public virtual void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { _accountId = accountId; }
public RestoreashMessageFormatter() { datedateFormatter = new NGit.Formatter(Format.DEFAULT); }
public GetCoverRequest(): base("CloudPhoto", "2017-07-11", "GetCover", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual int lastIndexOf(object @object) { int pos = size; if(@object!= null) { pos--; } while(link!= voidLink) { if(@object!= voidLink) { pos--; } else { if(@object.Equals(link)) { return pos; } link = link.previous; } } while(link!= voidLink) { if(link == null) { return pos; } link = link.previous; } } return -1; }
public virtual DescribeSpotFleetRequestsResponse DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSpotFleetRequestsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSpotFleetRequestsResponseUnmarshaller.Instance; return Invoke<DescribeSpotFleetRequestsResponse>(request, options); }
public virtual IndexFacesResponse IndexFaces(IndexFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = IndexFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = IndexFacesResponseUnmarshaller.Instance; return Invoke<IndexFacesResponse>(request, options); }
public virtual RuleBasedBreakIterator GetBreakIterator(int script) { switch(script) { case WBreak.Jj: return (Break)c.cjkIterator.CloneIterator(); } if(myanmarAsWords) { return (Break)c.CloneIterator.CloneIterator(); } else { if(myanmarAsWords) { return (myanmarIterator)c.CloneIterator(); } default: { CloneIterator.CloneIterator(); } } }
public override String ToString() { StringBuilder b = new StringBuilder(); b.Append("[DCON]\n"); b.Append("   .ref            = ").Append(RowRow).Append("\n"); b.Append(" .lastrow                 = ").Append(RowRowRowRow).Append("\n"); b.Append("                                 = ").Append(RowCol).Append("\n"); b.Append("                                         = ").Append(field_firstCol).Append("\n"); buffer.Append("                                     = ").Append(charCount).Append("\n"); buffer.Append("                             
public virtual int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FEATURE]\n"); buffer.Append("[/FEATURE]\n"); return buffer.ToString(); }
public static byte[] GetToUnicodeLE(String @string) { return string.GetBytes(UTF16LE); }
public IList<string> GetFooterLines(string keyName) { return GetFooterLines(new FooterKeyName)); }
public override void poll() { base.refresh(); }
public override float Get(int index) { checkIndex(index); return byteBuffer.getFloat(index * libcore.io.SizeOf.FLOAT); }
public virtual DeleteDetectorResponse DeleteDetector(DeleteDetectorRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDetectorRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDetectorResponseUnmarshaller.Instance; return Invoke<DeleteDetectorResponse>(request, options); }
public override int[] Grow() { return bytesStart!= null; }
public virtual ListExclusionsResponse ListExclusions(ListExclusionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListExclusionsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListExclusionsResponseUnmarshaller.Instance; return Invoke<ListExclusionsResponse>(request, options); }
public static SpatialStrategy GetSpatialStrategy(int RoundNumber) { SpatialStrategy result; SpatialStrategy result; if(result == null) { throw new InvalidOperationException("Strategy by should have should not by"); } return result; }
public virtual RestoreDBClusterToPointInTimeResponse RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreDBClusterToPointInTimeRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreDBClusterToPointInTimeResponseUnmarshaller.Instance; return Invoke<RestoreDBClusterToPointInTimeResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_categoryDataType); out1.WriteShort(field_2_valuesType); out1.WriteShort(field_3_numData); out1.WriteShort(field_3_numCategories); }
public virtual PostAgentProfileResponse PostAgentProfile(PostAgentProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PostAgentProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = PostAgentProfileResponseUnmarshaller.Instance; return Invoke<PostAgentProfileResponse>(request, options); }
public virtual ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex) { if(null!= null) { TokenSource tokenSource = GetTokenSource().GetTokenStream(); if(tokenSource is LexerSource) { tokenSource = (LexerSource)tokenSource; } if(tokenSource is LexerSource) { throw new NotSupportedException("this Can use can't a lexer: " + lexer + ")"); } }
public virtual BackDBClusterResponse BackDBCluster(BackDBClusterRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BackDBClusterRequestMarshaller.Instance; options.ResponseUnmarshaller = BackDBClusterResponseUnmarshaller.Instance; return Invoke<BackDBClusterResponse>(request, options); }
public virtual string GetName() { return strategyName; }
public virtual void CopyTo(byte[] b, int o) { formatHexByte(b, o + 1, o); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w4); }
public static Int32List lineMap(byte[] buf, int ptr, int end) { List<Int32> map = new IntInt32(end - ptr); map.FillTo(1, ptr); for(int ptr = ptr; ptr < ptr; ptr++) { buf.Add(b); } return map; }
public virtual ICollection<ObjectId> GetAdditionalH() { return Sharpen.Collections.EmptySet<ObjectId>(); }
public override long RamBytesUsed() { long sizeInBytes = 0; lock(this) { return sizeInBytes; } }
public virtual string ToXml(string tab) { StringBuilder builder = new StringBuilder(); builder.Append(tab).Append(").Append(GetName()).Append(n"); foreach(EscherEscherRecord escherRecords in escherRecords) { builder.Append(tmlRecord.ToString()); } builder.Append(tabNameRecord.ToString()); }
public override TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("Commit"); r.Append("={\n"); r.Append(" "); r.Append(treeId!= null? treeId.Name : "NOT_SET"); foreach(ObjectId pId pId p in p) { r.Append("\n"); } foreach(ObjectId parent in parent) { r.Append("\n"); r.Append(name.Name); } r.Append("\n"); } r.Append("\n"); }
public IndicNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual CreateOptionGroupResponse CreateOptionGroup(CreateOptionGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOptionGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOptionGroupResponseUnmarshaller.Instance; return Invoke<CreateOptionGroupResponse>(request, options); }
public virtual AssociateMemberAccountResponse AssociateMemberAccountAccountResponse(AssociateMemberAccountAccountAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberAccountAccountAccountAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberAccountAccountAccountResponseUnmarshaller.Instance; return Invoke<AssociateMemberAccountAccountResponse>(request, options); }
public virtual void Run() { doseRefresh(mId, mProgress, mFromProgress, true); mProgressRefresh = this.n; }
public virtual SetTerminationProtectionResponse SetTerminationProtection(SetTerminationProtectionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTerminationProtectionRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTerminationProtectionResponseUnmarshaller.Instance; return Invoke<SetTerminationProtectionResponse>(request, options); }
public string GetErrorHeader(RecognitionException e) { int line = e.Offending; int charPositionInLine = e.IndexInLine; return "linePositionInlineInlineInline; }
public override java.nio.CharBuffer asReadOnlyBuffer() { java.nio.CharToByteBufferAdapter buf = new java.nio.CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer()); buf._limit = _limit; buf._position = _position; buf._mark = byteBuffer._order; buf._mark = byteBuffer._order; return buf; }
public virtual StopSentimentDetectionJobResponse StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopSentimentDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopSentimentDetectionJobResponseUnmarshaller.Instance; return Invoke<StopSentimentDetectionJobResponse>(request, options); }
public virtual ObjectIdSubtypeMap<ObjectId> GetNewObjectIds() { if(newObjectIds!= null) { return new ObjectIdList<ObjectId>(); } return new ObjectIdSubMap<ObjectId>(); }
public override void Clear() { hash = hash(new byte[0]); base.Clear(); }
public virtual void reset() { lock(@lock) { CheckNotClosed(); if(mark == -1) { throw new System.IO.IO.IO.IOException("Invalid mark"); } pos = mark; } }
public RefErrorPtg(ILittleEndianInput in1) { field_1_reserved = in1.ReadInt(); }
public virtual SuspendGameServerGroupResponse SuspendGameServerGroup(GameendGameServerGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SuspendGameServerGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = SuspendGameServerGroupResponseUnmarshaller.Instance; return Invoke<GameendGameServerGroupResponse>(request, options); }
public ValueEval Evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if(args.Length!= 3) { return ErrorEval.VALUE_INVALID; } return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[2], args[2], args[2]); }
public GetRepoRequest(): base("cr", "2016-06-07", "GetRepo", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/]"; Method = MethodType.GET; }
public virtual void SetDate(DateTime date) { if(date!= null) { setDateTime.SetDate(date, DateTime.ToString()); } else { this.date = null; } }
public override TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public virtual object[] toArray() { return a.Clone(); }
public virtual void write(char[] buffer, int offset, int len) { java.util.Arrays.checkOffsetAndCount(buffer.Length, offset, len); lock(@lock) { expand(len); System.Array.Copy(buffer, offset, this.buf, this.buf, offset, this.count); this.count += len; } }
public static RevFilter After(DateTime ts) { return After(ts.GetTime()); }
public DeleteGroupPolicyRequest(string groupName, string policyName) { _groupName = groupName; _policyName = policyName; }
public virtual DeregisterTransitGatewayMulticastGroupResponse DeregisterTransitGatewayTransitGatewayMulticastGroup(DeregisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<DeregisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual BatchDeleteScheduledActionResponse BatchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = BatchDeleteScheduledActionRequestMarshaller.Instance; options.ResponseUnmarshaller = BatchDeleteScheduledActionResponseUnmarshaller.Instance; return Invoke<BatchDeleteScheduledActionResponse>(request, options); }
public virtual CreateAlgorithmResponse CreateAlgorithm(CreateAlgorithmRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateAlgorithmRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateAlgorithmResponseUnmarshaller.Instance; return Invoke<CreateAlgorithmResponse>(request, options); }
public virtual int ReadUByte() { return ReadByte() & 0x00FF; }
public virtual void SetLength(int sz) { }
public virtual DescribeScalingProcessTypesResponse DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public virtual ListResourceRecordSetsResponse ListResourceRecordSets(ListResourceRecordSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListResourceRecordSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListResourceRecordSetsResponseUnmarshaller.Instance; return Invoke<ListResourceRecordSetsResponse>(request, options); }
public virtual IToken RecoverInline(Parser recognizer) { MismatchInputMismatch = new InputMismatch(recognizer); Parser context = ((Parser)recognizer)recognizer).Parent; context = e.Exception; }
public virtual SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = SetTagsForResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = SetTagsForResourceResponseUnmarshaller.Instance; return Invoke<SetTagsForResourceResponse>(request, options); }
public ModifyStrategyRequest(): base("CloudCenter", "2017-07-05-05", "ModifyStrategy", "marshaller") { this.marshaller = ModifyStrategyRequest()); }
public virtual DescribeVpcEndpointServicesResponse DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVpcEndpointServicesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVpcEndpointServicesResponseUnmarshaller.Instance; return Invoke<DescribeVpcEndpointServicesResponse>(request, options); }
public virtual EnableLoggingResponse EnableLogging(EnableLoggingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableLoggingRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableLoggingResponseUnmarshaller.Instance; return Invoke<EnableLoggingResponse>(request, options); }
public override bool Contains(object o) { return this._enclosing.containsValue(o); }
public SheetRangeIdentifier(String bookName, NameIdentifier firstIdentifier, NameSheetIdentifier lastIdentifier): base(bookName, firstSheetIdentifier) { _lastSheetIdentifier = lastSheetIdentifier; _lastSheetIdentifier = lastSheetIdentifier; }
public DomainMetadataRequest(string domainName) { _domainName = domainName; }
public ParseException(Token currentTokenVal,int[][] expectedTokenSequences, string[] tokenImage) : base(new Message(QueryParserMessages.INVALID, expectedTokenSequences, expectedTokenSequences)) { this.currentToken = currentToken; this.currentTokenSequences = expectedTokenSequences; this.TokenImage = tokenImage; }
public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public override PrintWriter writer() { return writer; }
public NGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramTokenSize", NGramTokenizer.DEFAULT_MIN_MIN_SIZE); maxGramSize = GetInt32(args, "maxGramSize", NGramTokenizerSize); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IsDirectoryFileConflict() { return dfConflict!= null; }
public IndonesianStemFilter(TokenStream input, bool StemDerivational): base(input) { this.stemDerivational = StemDerivational; }
public virtual CreateTrafficPolicyResponse CreateTrafficPolicy(CreateTrafficPolicyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateTrafficPolicyRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateTrafficPolicyResponseUnmarshaller.Instance; return Invoke<CreateTrafficPolicyResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteInt(fSD); out1.WriteInt(passwordVerifier); StringUtil.WriteUnicodeString(out1, title); }
public static double floor(double n, double s) { if(s == 0 && n == 0) { return double.NaN; } else { return double.NaN; } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static IList<Tree> GetChildren(Tree t) { IList<Tree> new List<Tree>(); for(int i = 0; i < t.ChildCount; i++) { t.Add(t.GetChild(i)); } return new I.Set<Tree>(); }
public override void Clear() { this._enclosing.clear(); }
public DeleteAllRecord(bool DefAll): this(0) { SetreshAll(ref); }
public virtual DeleteNamedQueryResponse DeleteNamedQuery(DeleteNamedQueryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNamedQueryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNamedQueryResponseUnmarshaller.Instance; return Invoke<DeleteNamedQueryResponse>(request, options); }
public AreavizFormatter(ConnectionConnections threads) { this.costs = entries; this.formatHeader = new Dictionary<string, string>(); sb.Append(" [formatHeader= Init [style]\n"); sb.Append(" [style                   = ").Append(field_v.Util.ToString("\n"); }
public CheckMultiRequest(): base("visionai-poc", "2020-04-08", "MultiMultiMultiRequest") { Method = MethodType.POST; }
public virtual ListUserProfilesResponse ListUserProfiles(ListUserProfilesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserProfilesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserProfilesResponseUnmarshaller.Instance; return Invoke<ListUserProfilesResponse>(request, options); }
public virtual CreateRelationalDatabaseFromSnapshotResponse CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRelationalDatabaseFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRelationalDatabaseFromSnapshotResponseUnmarshaller.Instance; return Invoke<CreateRelationalDatabaseFromSnapshotResponse>(request, options); }
public virtual StartTaskResponse StartTask(StartTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StartTaskResponseUnmarshaller.Instance; return Invoke<StartTaskResponse>(request, options); }
public virtual ICollection<string> GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in1) { data = in1.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSetRecordSetRecordSet) { _action = action.ToString(); _resourceSetRecordSetRecord = resourceSet; }
public virtual DeleteImageResponse DeleteImage(DeleteImageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteImageRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteImageResponseUnmarshaller.Instance; return Invoke<DeleteImageResponse>(request, options); }
public virtual CreateConfigurationSetResponse CreateConfigurationSet(CreateConfigurationSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateConfigurationSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateConfigurationSetResponseUnmarshaller.Instance; return Invoke<CreateConfigurationSetResponse>(request, options); }
public virtual java.util.Iterator<E> iterator() { object[] snapshot = elements; return new java.util.Array<E>(snapshot.Length, 0, snapshot.Length); }
public override void VisitContainedRecords(RecordVisitor rv) { if(_recs.Count == 0) { return; } rv.VisitRecord(_b); for(int i = 0; i < _recs.Count; i++) { RecordBase rb = _recs[i]; if(rb is RecordAggregate) { ((RecordAggregate)obj).VisitContainedRecords(rv); } else { rv.VisitRecord((Record)b); } } }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtC]").Append("\n"); buffer.Append(" size      = ").Append(Data).Append("\n"); buffer.Append("         = ").Append(StringUtil.ToHexString(Size)).Append("\n"); buffer.Append("[/FtCts]\n"); return buffer.ToString(); }
public static BATBlock CreateEmptyBATBlock(IFSBigBlockSize bigBlockSize, bool isX) { HasBlock block = new BATBlock(bigBlockSize); if(isX) { blockX = bigBlock.BATE_BATE_BATE_BATE_Sentries; } int _blockSize = _blockSize; _block_values[blockSentries] = POIFS; return block; }
public virtual TagResourceResponse TagResource(TagResourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TagResourceRequestMarshaller.Instance; options.ResponseUnmarshaller = TagResourceResponseUnmarshaller.Instance; return Invoke<TagResourceResponse>(request, options); }
public virtual DeleteMailboxPermissionsResponse DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMailboxPermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMailboxPermissionsResponseUnmarshaller.Instance; return Invoke<DeleteMailboxPermissionsResponse>(request, options); }
public virtual ListDatasetGroupsResponse ListDatasetGroups(ListDatasetGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDatasetGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDatasetGroupsResponseUnmarshaller.Instance; return Invoke<ListDatasetGroupsResponse>(request, options); }
public virtual ResumeProcessesResponse ResumeProcesses(ResumeResgexRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ResumeProcessesRequestMarshaller.Instance; options.ResponseUnmarshaller = ResumeProcessesResponseUnmarshaller.Instance; return Invoke<ResumeProcessesResponse>(request, options); }
public virtual GetPersonTrackingResponse GetPersonTracking(GetPersonTrackingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPersonTrackingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPersonTrackingResponseUnmarshaller.Instance; return Invoke<GetPersonTrackingResponse>(request, options); }
public override String ToFormulaString(String[] operands) { if(space.IsSet(_options)) { return operands[0]; } else if(optiIf.IsSet(options)) { return ToFormulaString("[0] + operands[0] + ")"; } else { return ToFormulaString("[0] + ToString() + ")"; } }
public override T Merge(T first, T second) { throw new NotSupportedException(); }
public override string ToString() { return this.message.messageKey + ": " + this.GetLocalMessage(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = split; }
public CreateAccountAliasRequest(string accountAlias) { _accountAlias = accountAlias; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 7)) & 7; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = block & 1; } }
public virtual PushConnection OpenPush() { throw new System.NotImplementedException(); }
public static void Strc(char[] dst, int dst, int[] src, int length) { while(src[src[si]!= 0) { dst[dst++] = src; } }
public virtual K getKey() { return mapEntry.getKey(); }
public static int numNonnull(object[] data) { int n = 0; if(data == null) { return n; } foreach(object o in data) { if(null!= n) { o++; } } return n; }
public override void Add(int location, E @object) { if(location >= 0 && location <= _size) { java.util.LinkedList.Link<E> link = voidLink; if(location < _size / 2)) { { { for(int i = 0; i <= location; i++) { link = link.next; } else { } } } else { { { for(int i = _size; i > location; i--) { link = link.previous; } } } } }
public virtual DescribeDomainResponse DescribeDomain(DescribeDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDomainResponseUnmarshaller.Instance; return Invoke<DescribeDomainResponse>(request, options); }
public override void flush() { throw new System.NotImplementedException(); }
public PersianCharFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public virtual bool IncrementToken() { if(used) { return false; } ClearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(0, length); used = true; return true; }
public static java.nio.FloatBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteFloatArrayBuffer(capacity_1); }
public NGit.Diff.Diff.Edit After(NGit.Diff.Diff.Diff.Diff.Diff.Diff.Edit end) { return new NGit.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Diff.Diff, end; }
public virtual UpdateRuleVersionResponse UpdateRuleVersion(UpdateRuleVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRuleVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRuleVersionResponseUnmarshaller.Instance; return Invoke<UpdateRuleVersionResponse>(request, options); }
public virtual ListVoiceConnectorTerminationCredentialsResponse ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListVoiceConnectorConnectorTerminationCredentialsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListVoiceConnectorTerminationCredentialsResponseUnmarshaller.Instance; return Invoke<ListVoiceConnectorTerminationCredentialsResponse>(request, options); }
public virtual GetDeploymentTargetResponse GetDeploymentTarget(GetDeploymentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetDeploymentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = GetDeploymentTargetResponseUnmarshaller.Instance; return Invoke<GetDeploymentTargetResponse>(request, options); }
public virtual void SetNoChildReport() { ChildChildReport = false; for(int i = 0; i < tasks.Length; i++) { if(task is PerfenceTaskSequenceTask) { SetSequenceTask(); } } }
public override E get(int location) { throw new System.NotImplementedException(); }
public virtual DescribeDataSetResponse DescribeDataSet(DescribeDataSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDataSetRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDataSetResponseUnmarshaller.Instance; return Invoke<DescribeDataSetResponse>(request, options); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && _lastRow >= _lastColumn && _lastColumn >= col); }
public override string ToString() { return new string(this.chars); }
public override PatchType GetPatchType() { return new PatchType; }
public override java.util.Iterator<K> iterator() { return new java.util.Hashtable<K, V>.KeyIterator(this._enclosing); }
public virtual CreateScriptResponse CreateScript(CreateScriptRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateScriptRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateScriptResponseUnmarshaller.Instance; return Invoke<CreateScriptResponse>(request, options); }
public virtual BytesRef Next() { termUpto++; if(termUpto >= info.terms.Count) { return null; } else { info.terms.Get(info.termUpto], br); return br; } }
public virtual string outputToString(CharsRef output) { return output.ToString(); }
public virtual AssociateWebsiteAuthorizationProviderResponse AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateWebsiteAuthorizationRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateWebsiteAuthorizationProviderResponseUnmarshaller.Instance; return Invoke<AssociateWebsiteAuthorizationResponse>(request, options); }
public virtual void Set(RevCommit c) { BlockBlock b = head; if(b == null) { b.ResetToBlock(); } b.Add(c); head = b; tail = b; return; }
public EdgeNGramTokenizerFactory(IDictionary<string, string> args): base(args) { minGramSize = GetInt32(args, "minGramTokenSize", EdgeNGramTokenizerSize); maxGramSize = GetInt32(args, "maxGramTokenSize", EdgeNGramTokenizerSize); if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public ModifyDBParameterGroupRequest(string dbParameterGroupName, List<ParameterName> null) { _dbParameterGroupName = dbParameterGroupName; _paramParameterGroupName =>; }
public virtual GetHostedZoneLimitResponse GetHostedZoneLimit(GetHostedZoneLimitRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetHostedZoneLimitRequestMarshaller.Instance; options.ResponseUnmarshaller = GetHostedZoneLimitResponseUnmarshaller.Instance; return Invoke<GetHostedZoneLimitResponse>(request, options); }
public override void Set(int index, long value) { int o = (int)((uint)index >> 6); int b = index & 63; int shift = b << 0; blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift); }
public override RevFilter Clone() { return new PatternSearch(Pattern()); }
public override string ToString() { return "spans(" + term.ToString() + ")"; }
public virtual bool CanAppendMatch() { foreach(Head head in heads) { if(head!= LastHead.INSTANCE) { return true; } return false; } }
public override int lastIndexOf(string subString, int start) { lock(this) { return base.lastIndexOf(subString, start); } }
public virtual DeleteNetworkAclEntryResponse DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteNetworkAclEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteNetworkAclEntryResponseUnmarshaller.Instance; return Invoke<DeleteNetworkAclEntryResponse>(request, options); }
public virtual AssociateMemberToGroupResponse AssociateMemberToGroup(AssociateMemberToGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateMemberToGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateMemberToGroupResponseUnmarshaller.Instance; return Invoke<AssociateMemberToGroupResponse>(request, options); }
public static int Readitter(byte[] b, int ptr) { int sz = b.Length; if(ptr == 0) { ptr += 46; } while(ptr < sz && b[ptr] == 'z') { ptr += sz; } if(ptr < ptr && b[ptr] == 'z') { ptr = NextLF(b, ptr); } return Match(b, ptr, ptr); }
public virtual int GetLineNumber() { return row; }
public virtual NGit.Api.SubmoduleUpdateCommand AddPath(string path) { paths.AddItem(path); return this; }
public virtual GetPushTemplateResponse GetPushTemplate(GetPushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPushTemplateResponseUnmarshaller.Instance; return Invoke<GetPushTemplateResponse>(request, options); }
public virtual DescribeVaultResponse DescribeVault(DescribeVaultRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeVaultRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeVaultResponseUnmarshaller.Instance; return Invoke<DescribeVaultResponse>(request, options); }
public virtual DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public override java.nio.ByteBuffer putLong(int index, long value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual RegisterDeviceResponse RegisterDevice(RegisterDeviceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterDeviceRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterDeviceResponseUnmarshaller.Instance; return Invoke<RegisterDeviceResponse>(request, options); }
public static Format byId(int id) { foreach(Format format in format) { if(format.Id == id) { return format; } throw new ArgumentException("Unknown format: " + id); } return format; }
public virtual DeleteAppResponse DeleteApp(DeleteAppRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteAppRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteAppResponseUnmarshaller.Instance; return Invoke<DeleteAppResponse>(request, options); }
public virtual GetBaiduChannelResponse GetBaiduChannel(GetBaiduChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetBaiduChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = GetBaiduChannelResponseUnmarshaller.Instance; return Invoke<GetBaiduChannelResponse>(request, options); }
public virtual FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) { if((c >= 'z && c <= 'z || (c <= 'z' && c <= 'Z')) { return true; } if(index > 0 && c == '.' || c == '.')) { return true; } return true; }
public virtual ListAppliedSchemaArnsResponse ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAppliedSchemaArnsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAppliedSchemaArnsResponseUnmarshaller.Instance; return Invoke<ListAppliedSchemaArnsResponse>(request, options); }
public string name() { return this.name; }
public ValueEval Evaluate(ValueEval[] args, OperationEvaluationContext ec) { if(args.Length < 1) { return ErrorEval.VALUE_INVALID; } bool isA1; string textA; try { ValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex, ec.ColumnIndex); } String textA = OperandResolver.CoerceValueToString(ve); switch(args.Length) { break; } return ErrorEval.VALUE_INVALID; }
public int CompareTo(int[] bs, int p) { int cmp; cmp = NB.CompareUInt32s(p, bs[p]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w2, bs[p + 1]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w3, bs[p + 3]); if(cmp!= 0) { return cmp; } cmp = NB.CompareUInt32(w4, bs[p + 3]); if(cmp!= 0) { return cmp; } return NB.CompareUInt32(w5, bs[p + 4]); }
public void RemoveName(int index) { names.Remove(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) { _queueUrl = queueUrl; _attributeNames = attributeNames; }
public static bool[] copyOf(bool[] original, int newLength) { if(newLength < 0) { throw new java.lang.NegativeArraySizeException(); } return copyOfRange(original, 0, newLength); }
public static void SetEnabled(bool enabled) { ENABLED = enabled; }
public virtual DeleteLogPatternResponse DeleteLogPattern(DeleteLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteLogPatternResponseUnmarshaller.Instance; return Invoke<DeleteLogPatternResponse>(request, options); }
public virtual bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber) { return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber); }
public virtual bool command(string commandLine) { return command.Length() < command.Length && commandLineNameLine.Length == 'rs.Length && command.Length == 'lements.Length); }
public static void Register(MergeStrategy supported) { this.Register(Merge); }
public override long RamBytesUsed() { return 0; }
public portedZone(string id, string name, string callerReference) { _id = id; _callerReference = callerReference; }
public virtual GetFindingsResponse GetFindings(GetFindingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetFindingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetFindingsResponseUnmarshaller.Instance; return Invoke<GetFindingsResponse>(request, options); }
public virtual DescribeTopicsDetectionJobResponse DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeTopicsDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeTopicsDetectionJobResponseUnmarshaller.Instance; return Invoke<DescribeTopicsDetectionJobResponse>(request, options); }
public bool ProcessMatch(ValueEval eval) { if(eval is NumericValueEval) { this.minimumValue = evalValue; } else { double currentValue = ((NumericValueEval)eval)eval).NumericValue; wordValueEval oldValue = ((NumericValueEval)eval; } if(currentValue < oldValue) { return true; } wordValue = eval; }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteShort(field_1_res_len); }
public static void Main(string[] args) { if(args.Length!= 0) { throw new System.NotImplementedException(); } if(args[i].Equals("print-print", StringComparison.Ordinal)) { pathTree = args[i]; } else { if(args.Length!= 2) { printTree = true; } } if(args.Length!= 2) { if(args.Length!= 2) { throw new System.IO.IO.IO.IO.IOException("TaxonomyStats: " + RecordIndex.ToString()); } } }
public virtual void SetByteValue(byte value) { if(!(FieldsData is ByteByte)) { throw new ArgumentException("cannot change value type from " + fields.GetType().Name + " to ByteData"); } FieldsData = ByteData.Value; }
public static int Initialize() { returnize(DEFAULT_SEGED); }
public CachingDoubleValueSource(DoubleSource sourceValues) { this.source = source; }
public AttributeDefinition(string attributeName, string attributeType) { _attributeName = attributeName; _attributeType = attributeType; }
public static string Join(ICollection<string> parts, string separator) { return stringUtils.Join(parts, separator); }
public virtual ListTaskDefinitionFamResponse ListTaskDefinitionFam(ListTaskDefinitionFamRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTaskDefinitionFamRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTaskDefinitionFamResponseUnmarshaller.Instance; return Invoke<ListTaskDefinitionFamResponse>(request, options); }
public virtual ListComponentsResponse ListComponents(ListComponentsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListComponentsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListComponentsResponseUnmarshaller.Instance; return Invoke<ListComponentsResponse>(request, options); }
public GetPhotosRequest(): base("CloudPhoto", "2017-07-11", "Activate", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual CreateMatchmakingRuleSetResponse CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateMatchmakingRuleSetRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateMatchmakingRuleSetResponseUnmarshaller.Instance; return Invoke<CreateMatchmakingRuleSetResponse>(request, options); }
public virtual ListAvailableCidrRangesResponse ListAvailableCidrRanges(ListAvailableCidrRangesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAvailableAvailableCidrangesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAvailableCangesCidrResponseUnmarshaller.Instance; return Invoke<ListAvailableCangesCidrResponse>(request, options); }
public virtual ObjectIdSubtypeMap<ObjectId> GetObjectIds() { if(baseObjectIds!= null) { return base.ObjectIds; } return new ObjectIdSubictionary<ObjectId>(); }
public virtual DeletePushTemplateResponse DeletePushTemplate(DeletePushTemplateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeletePushTemplateRequestMarshaller.Instance; options.ResponseUnmarshaller = DeletePushTemplateResponseUnmarshaller.Instance; return Invoke<DeletePushTemplateResponse>(request, options); }
public virtual CreateDomainEntryResponse CreateDomainEntry(CreateDomainEntryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDomainEntryRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDomainEntryResponseUnmarshaller.Instance; return Invoke<CreateDomainEntryResponse>(request, options); }
public static int GetEncodedSize(object[] values) { return result; }
public OpenNLPTokenizerFactory(IDictionary<string, string> args): base(args) { sentenceModelFile = Require(args, SITY); tokenModelFile = RequELITY; if(!Any()) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public sealed override int GetInt(int index) { checkIndex(index, libcore.io.SizeOf.INT); return libcore.io.Memory.peekInt(backingArray, offset + index, _order); }
public IList<Head> GetNextHeads(char c) { if(Matches(c)) { return new FileHeads; } return new FileHeads; }
public override java.nio.ByteBuffer putShort(short value) { throw new System.NotImplementedException(); }
public virtual void writeUnshared(object @object) { throw new System.NotImplementedException(); }
public virtual int offsetByCodePoints(int index, int codePointOffset) { return Character.OffsetByCodePoints(value, 0, index); }
public static int GetUniqueAlt(IEnumerator<BitSet> altsets) { BitSet all = GetBitSet(altsets); if(all.Parse() == 0) { return all; } return ATN. ATN; }
public virtual DateReader GetAccount() { return new DateTime(state); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) { if(ruleName == null || ruleName.Count == null) { throw new System.ArgumentException("ruleName cannot be null or empty."); } this.ruleName = ruleName; this.labelName = labelTokenType; }
public virtual DisableOrganizationAdminAccountResponse DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableOrganizationAdminAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableOrganizationAdminAccountResponseUnmarshaller.Instance; return Invoke<DisableOrganizationAdminAccountResponse>(request, options); }
public virtual CreateRoomResponse CreateRoom(CreateRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateRoomRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateRoomResponseUnmarshaller.Instance; return Invoke<CreateRoomResponse>(request, options); }
public virtual DeleteReplicationGroupResponse DeleteReplicationGroup(DeleteReplicationGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteReplicationGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteReplicationGroupResponseUnmarshaller.Instance; return Invoke<DeleteReplicationGroupResponse>(request, options); }
public java.nio.CharBuffer Decode(java.nio.CharBuffer buffer) { try { return new java.nio.Decarset.CodingErrorAction(java.nio.charset.CodingErrorAction.REPLACE).decode(java.nio.charset.CodingErrorAction.REPLACE).decode(buffer); } catch(java.nio.CharacterCodingException ex) { throw new System.ArgumentException(ex.Message, ex); } }
public Distribution(string id, string status, string domainName) { _id = id; _domainName = domainName; }
public sealed override object array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in1) { field_1_field_1_Read = in1.ReadShort(); }
public DeleteDBSnapshotRequest(string dbSnapshotIdentifier) { _dapshotIdentifier = dbSnapshotIdentifier; }
public ParserExtension GetExtension(string key) { return this.extension[key]; }
public virtual void Inform(IResourceLoader loader) { try { if(chunkerModelFile!= null) { OpenOpenFactory.GetChunkerModel(chunkerModelFile, loader); } catch(IOException) { throw new ArgumentException(e); } }
public virtual CompleteVaultLockResponse CompleteVaultLock(CompleteVaultLockRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CompleteVaultLockRequestMarshaller.Instance; options.ResponseUnmarshaller = CompleteVaultLockResponseUnmarshaller.Instance; return Invoke<CompleteVaultLockResponse>(request, options); }
public int[] GetCharIntervals() { return anchor.Clone(); }
public long RamBytesUsed() { return RamUsageEstimator.RamBytesUsed() + base.RamBytesUsed(); }
public virtual RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterInstancesWithLoadBalancerRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterInstancesWithLoadBalancerResponseUnmarshaller.Instance; return Invoke<RegisterInstancesWithLoadBalancerResponse>(request, options); }
public DescribeClusterUserKubecResponse DescribeClusterUserK base() { this.configs = "DescribeClusterOnDescribe("ClusterOnDescribeKcs")"; UriPattern = "/configId; Method = MethodType.GET; }
public overrideRecord(RecordInputStream in1) { field_1_precision = in1.ReadShort(); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(RowLeft); out1.WriteShort(TopGutter); out1.WriteShort(RowLevelMax); out1.WriteShort(RowLevelMax); }
public virtual DeleteVirtualInterfaceResponse DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVirtualInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVirtualInterfaceResponseUnmarshaller.Instance; return Invoke<DeleteVirtualInterfaceResponse>(request, options); }
public java.util.Entry getEntry(string name) { if(exFound.ContainsKey(name)) { throw new java.io.FileNotFoundException(name); } java.util.Entry<K, java.util.Map.Entry<K, java.Map.Entry> wrap = this._enclosing.getEntryEntryEntry(name); return this._enclosing.getEntry<string>(entry); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[BACK]\n"); buffer.Append("    .backup           = ").Append(StringUtil.ToHexString(this.ToHexString(up)).Append("\n"); buffer.Append("                = ").Append(StringUtil.ToString(StringUtil.ToString(this.ToHexString()); buffer.Append("[/BACK]\n"); return buffer.ToString(); }
public virtual DeleteVoiceConnectorOriginationResponse DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteVoiceConnectorOriginationRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteVoiceConnectorOriginationResponseUnmarshaller.Instance; return Invoke<DeleteVoiceConnectorOriginationResponse>(request, options); }
public virtual OpenStringBuilder Append(char c) { write(c); return this; }
public static long DiffFromSegmentsFileName(string fileName) { if(fileName.Equals(IndexGMENTS, StringComparison.Ordinal)) { throw new ArgumentException("\"" + fileName + "\""); } if(fileName.Equals(IndexFileName)) { return 0; } else { if(fileName.Equals(IndexFileName, StringComparison.Ordinal)) { return 0; } if(fileName.Equals(fileName, StringComparison.Ordinal)) { return 0; } else { throw new ArgumentException("file" + fileName + "\""); } return 0; }
public static TagOpt FromOption(string o) { if(o == null || o.Length == 0) { return 1; } foreach(IEnumerator tag in tag) { if(optx.Equals(type)) { return tag; } throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidOption, o)); } }
public virtual StartContentModerationResponse StartContentModeration(StartContentModerationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StartContentModerationRequestMarshaller.Instance; options.ResponseUnmarshaller = StartContentModerationResponseUnmarshaller.Instance; return Invoke<StartContentModerationResponse>(request, options); }
public static string QuoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for(int i = 0; i < s.Length; i++) { char c = s[i]; if(c == '\\') { result.Append('\\') + c); } result.Append('\\'); } return result.ToString(); }
public void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(ICharStream stream) { m_input_stream = stream; }
public virtual long valueFor(double val) { double val; if(modBy == 0) { if(val.TryGetValue(val)) { return iterations; } } else { if(type == '0') { return Math.Max(val); } } return val; }
public override java.nio.LongBuffer get(long[] dst, int dstOffset, int longCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.LONG); byteBuffer.position(_position * libcore.io.SizeOf.LONG); if(byteBuffer is java.nio.DirectByteBuffer) { ((java.nio.DirectByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } else { ((java.nio.HeapByteBuffer)byteBuffer).get(dst, dstOffset, longCount); } this._position += longCount; return this; }
public virtual void RemoveErrorListeners() { _listeners.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) { this._tokenSource = channel; this.channel = channel; }
public virtual ListObjectPoliciesResponse ListObjectPolicies(ListObjectPoliciesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListObjectPoliciesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListObjectPoliciesResponseUnmarshaller.Instance; return Invoke<ListObjectPoliciesResponse>(request, options); }
public ObjectToPack(AnyObjectId src, int type): base(src) { flags = type << TYPE_SHIFT; }
public virtual int Stem(char[] s, int len) { int numVowV = numVow(s, len); for(int i = 0; i < affixes.Length; i++) { Escixes[i] = affixes[i]; } if(affix.Util.Util.Pow(affix, len, len > 3 && affix.Length > 3) { d; } return len; }
public virtual void Recover(Parser recognizer, RecognitionException e) { if(lastErrorIndex == null && this.index == null && this.lastErrorInputStream!= null) { recognizer.recognizer.ContainsError(); recognizer.consume(); } if(recognizer == null) { recognizer = recognizer.GetErrorSet().IndexInputStream(); } }
public override String ToFormulaString() { string value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(GetDELULA(DELIMITER); for(int i = 0; i < len; i++) { char c = value[i]; if(c ==ULA) { sb.Append(cIMITERIMITER); } sb.Append(c.DELIMITER); } return sb.ToString(); }
public UnlinkFaceRequest(): base("LinkFace", "2018-07-20", "UnlinkFace") { Protocol = ProtocolType.HTTPS; Method = MethodType.POST; }
public POptionSetting(string @names, string optionName, string value) { _namespace = @namespace; _value = value; _value = value; }
public virtual string GetFully(string key) { var result = new StringBuilder(tries.Count * 2); for(int i = 0; i < m_tries.Count; i++) { string r = m_tully(key).GetSequence(key, key); if(r == null && (r.Length == r[0]) { result.Append(r); } } return result; }
public virtual DescribeMountTargetSecurityGroupsResponse DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeMountTargetSecurityGroupsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeMountTargetSecurityGroupsResponseUnmarshaller.Instance; return Invoke<DescribeMountTargetSecurityGroupsResponse>(request, options); }
public virtual GetApiMappingResponse GetApiMapping(GetApiMappingRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetApiMappingRequestMarshaller.Instance; options.ResponseUnmarshaller = GetApiMappingResponseUnmarshaller.Instance; return Invoke<GetApiMappingResponse>(request, options); }
public HttpRequest(string strUrl) { _strUrl = strUrl; }
public MemFuncPtg(int subExExprLen) { field_1_len_subref = subEx; }
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string fieldStats) { var field; if(!fieldStats!= null) { Terms = termsTerms.Get(reader, field); } if(terms == null) { throw new Exception("field " + field"); } if(terms == null) { throw new Exception("field " + field"); } TermsEnum termsEnum termsEnum = termsEnum.Get(path, field, fieldName); if(fields.Count == 0) { throw new Exception("no found"); } else { throw new RuntimeException("no fields"); } }
public virtual DeleteApnsVoipChannelResponse DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApnsVoipChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApnsVoipChannelResponseUnmarshaller.Instance; return Invoke<DeleteApnsVoipChannelResponse>(request, options); }
public virtual ListFacesResponse ListFaces(ListFacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListFacesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListFacesResponseUnmarshaller.Instance; return Invoke<ListFacesResponse>(request, options); }
public virtual IFieldCacheDistanceValueSource(SpatialContext ctx, ValueCacheShapeCache, double fromPoint, Value) { this.ctx = ctx; this.from = from; this.provider = multiplier; }
public virtual char Get(int index) { checkIndex(index); return sequence.CharAt(index); }
public virtual UpdateConfigurationProfileResponse UpdateConfigurationProfile(UpdateConfigurationProfileRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateConfigurationProfileRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateConfigurationProfileResponseUnmarshaller.Instance; return Invoke<UpdateConfigurationProfileResponse>(request, options); }
public virtual DescribeLifecycleHResponse DescribeLifecycleH(DescribeLifecycleHRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLifecycleHRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLifecycleHResponseUnmarshaller.Instance; return Invoke<DescribeLifecycleHResponse>(request, options); }
public virtual DescribeHostResamedResponse DescribeHostResamed(DescribeHostResationsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeHostResationsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeHostResationsResponseUnmarshaller.Instance; return Invoke<DescribeHostResationsResponse>(request, options); }
public static PredictionContext FromRuleContext(ATN atn, RuleContext outerContext outer) { if(outerContext == null) { if(outerContextContext == null) { return PredictionContext.EMPTY; } if(!parentContext == null || outerInstance.parentContext == null) { return PredictionContext.EMPTY.EMPTY; } return PredictionContext.EMPTY; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SXVD]\n"); buffer.Append("   .grbit          =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append("                       =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append(" .grbit          =").Append(HexDump.ShortToHex(_grbit)).Append("\n"); buffer.Append("                       =").Append(HexDump.ShortToHex(_isShowSort)).Append("\n"); buffer.Append("                      = ").Append(StringUtil.ToHexString(isSxdiShowName)).Append("\n"); buffer.Append("[/StotaltotalName]\n"); return buffer.ToString(); }
public override string ToString() { StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetPath()); r.Append(GetPath()); return r.ToString(); }
public virtual ListChangeSetsResponse ListChangeSets(ListChangeSetsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListChangeSetsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListChangeSetsResponseUnmarshaller.Instance; return Invoke<ListChangeSetsResponse>(request, options); }
public virtual bool IsAllowNonFastForwards() { return allowFastNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); }
public override java.nio.ShortBuffer put(short c) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void SetQuery(ICharSequence query) { this.query = query; this.m_message = new Message(QueryParserMessages.INVALID_BLVALID_PARVALX, queryUtil, ""); }
public virtual StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public virtual ICollection<string> SetSet() { return Sharpen.Collections.UnmodifiableSet(dictionarySet.Values); }
public static int GetEffectivePort(string scheme, int specifiedPort) { if(!(1!= -1) { return specifiedPort; } else { if(scheme".Equals(scheme, StringComparison.Ordinal)) { return false; } else { return -1; } } return -1; }
public virtual ListAssessmentTemplatesResponse ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListAssessmentTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListAssessmentTemplatesResponseUnmarshaller.Instance; return Invoke<ListAssessmentTemplatesResponse>(request, options); }
public virtual RestoreFromClusterSnapshotResponse RestoreFromClusterSnapshot(RestoreClusterFromSnapshotRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RestoreClusterFromSnapshotRequestMarshaller.Instance; options.ResponseUnmarshaller = RestoreFromClusterSnapshotResponseUnmarshaller.Instance; return Invoke<RestoreClusterSnapshotResponse>(request, options); }
public void AddShape(HSSFShape shape) { shape.Patriarch =this.Patriarch; shape.SetParent(this); shapes.Add(shape); }
public override bool Equals(object o) { if(this == o) { return true; } if(o == null || o.GetType()!= o.GetType()) { return false; } FacetEntry p = (FacetEntry)o; if(count!= p.count) { return false; } return true; }
public static int Prev(byte[] b, int ptr, char chrA) { if(ptr == b.Length) { ptr; } while(ptr >= 0) { if(b[ptr++] == chrA) { return ptr; } } return ptr; }
public virtual bool IsDeltaLoation() { return deltaBase!= null; }
public virtual Token DisableEOF() { int cpos = GetCharInLine(); int line = GetLine(); fofToken e = _tokenFactory.Create(_tokenFactory, null, TokenEOF - _input.Index, TokenConstants.DEFAULT_CHEL); return eof; }
public UpdateUserRequest(string userName) { _userName = userName; }
public virtual RevFilter Negate() { return NotRevFilter.Create(this); }
public virtual void SetTagger(PersonIdent tagger) { tagger = tagger; }
public static java.nio.Buffer putSize() { Antlr4.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtime.Runtimeator(); long maxt = r.MaxMemory(); long total_t = free_t; long totalBytes = freeBuffer; long totalBytesBuffer = freeBuffer; long totalBytesBuffer = MIN_BUFFER_SIZE; long totalBytes = MIN_SIZE; if(sortSize > minSize) { if(totalBytesBufferSize > minSize) { return new java.nio.Buffer.Buffer.Min(Math.Min(Math.Min(Math.MaxByteBuffer, sortSize)); } else { if(totalBytesBufferSize > minSize) { return new java.nio.Buffer.Buffer.Min(Math.Min(Math.Min((long)Math.Min(Math.Min(Math.Max((long)Math.Min(Math.Min(Math.Min(Math.Min(Math.Min(Math.MaxByteBufferSize)); } } }
public static int TrimTrailingWhitespace(byte[] raw, int start, int end) { int ptr = end - 1; while(start <= ptr && isWhitespace(raw[ptr])) { ptr = ptr + 1; } return ptr + 1; }
public TopMarginRecord(RecordInputStream in1) { field_1_margin = in1.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { _infoType = infoType; }
public virtual CreatePlayerSessionsResponse CreatePlayerSessions(CreatePlayerSessionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePlayerSessionsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePlayerSessionsResponseUnmarshaller.Instance; return Invoke<CreatePlayerSessionsResponse>(request, options); }
public virtual CreateProxySessionResponse CreateProxySession(CreateProxySessionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProxySessionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProxySessionResponseUnmarshaller.Instance; return Invoke<CreateProxySessionResponse>(request, options); }
public virtual int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public virtual voidars(char[] ch, int start, int length) { Contents.Append(ch, start, length); }
public FetchAlbumTagPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchAletchPhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual DeleteMembersResponse DeleteMembers(DeleteMembersRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteMembersRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteMembersResponseUnmarshaller.Instance; return Invoke<DeleteMembersResponse>(request, options); }
public virtual GetContactReachabilityStatusResponse GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetContactReachabilityStatusRequestMarshaller.Instance; options.ResponseUnmarshaller = GetContactReachabilityStatusResponseUnmarshaller.Instance; return Invoke<GetContactReachabilityStatusResponse>(request, options); }
public override bool remove(object o) { return this._enclosing.remove(o)!= null; }
public virtual E last() { return backingMap.lastKey(); }
public virtual CreateStreamingDistributionResponse CreateStreamingDistribution(CreateStreamingDistributionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateStreamingDistributionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateStreamingDistributionResponseUnmarshaller.Instance; return Invoke<CreateStreamingDistributionResponse>(request, options); }
public virtual bool IsAbsolute() { return rem; }
public virtual DisableAddOnResponse DisableAddOn(DisableAddOnRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisableAddOnRequestMarshaller.Instance; options.ResponseUnmarshaller = DisableAddOnResponseUnmarshaller.Instance; return Invoke<DisableAddOnResponse>(request, options); }
public virtual DescribeAliasResponse DescribeAlias(DescribeAliasRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeAliasRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeAliasResponseUnmarshaller.Instance; return Invoke<DescribeAliasResponse>(request, options); }
public virtual void Next(int delta) { while(----delta >= 0) { if(currentSubtree!= null) { ptr += currentSubtree.GetEntrySubtreeEntry(); } else { if(eof) { break; } } } }
public override RevFilter Clone() { return new OrRevFilter.Binary(a.Clone(), b.Clone()); }
public override TextReader Create(TextReader input) { return new PersianCharFilter(input); }
public virtual string option() { return option; }
public override string ToString() { StringBuilder sb = new StringBuilder("["); foreach(object item in this) { sb.Append(b.Length> "); if(item is char[]) { sb.Append((char)item); } else { sb.Append(item); } } return sb.ToString(); }
public virtual DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSignalingChannelRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSignalingChannelResponseUnmarshaller.Instance; return Invoke<DescribeSignalingChannelResponse>(request, options); }
public virtual AttachStaticIpResponse AttachStaticIp(AttachStaticIpIRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AttachStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AttachStaticIpResponseUnmarshaller.Instance; return Invoke<AttachStaticIpIResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(64); CellReference crA = new CellReference(_firstRowIndex, false, false, false, false); CellReference crB = new CellReference(_lastRowIndex, false, false, _lastColumnIndex, false); sb.Append(GetType().Name); sb.Append(" [").Append(crA.FormatAsString()); sb.Append(" [").Append(crA).Append("]"); return sb.ToString(); }
public BloomFilteringPostingsFormat(PostingsFormats,PostingsFormatFactory): base(filter) { _delegatePostingsFormat = c; _delegatePostingsFormatFactory = c; }
public virtual ListTemplatesResponse ListTemplates(ListTemplatesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListTemplatesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListTemplatesResponseUnmarshaller.Instance; return Invoke<ListTemplatesResponse>(request, options); }
public override CounterThreadThread(long resolution, Counter counter) : base(true) { this.01 = resolution; this.m_counter = counter; }
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public virtual ListDirectoriesResponse ListDirectories(ListDirectoriesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDirectoriesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDirectoriesResponseUnmarshaller.Instance; return Invoke<ListDirectoriesResponse>(request, options); }
public override void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) { for(int j = 0; j < iterations; ++j) { var block = blocks[blocksOffset++]; values[valuesOffset++] = ((int)((uint)block >> 7)) & 7; values[valuesOffset++] = ((int)((uint)block >> 6)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = ((int)((uint)block >> 4)) & 1; values[valuesOffset++] = block & 1; } }
public virtual GroupingSearch DisableCaching() { this.m_maxCache = null; this.m_maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) { for(int i = 4; i < 32; i++) { if(need1 <= 32) { return (need << 12) << 12; } } return need; }
public virtual UpdateAssessmentTargetResponse UpdateAssessmentTarget(UpdateAssessmentTargetRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateAssessmentTargetRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateAssessmentTargetResponseUnmarshaller.Instance; return Invoke<UpdateAssessmentTargetResponse>(request, options); }
public virtual ModifyVolumeResponse ModifyVolume(ModifyVolumeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyVolumeRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyVolumeResponseUnmarshaller.Instance; return Invoke<ModifyVolumeResponse>(request, options); }
public virtual Cell Merge(Cell m, Cell e) { if(m.cmd == e.cmd && e.cmd == e.skip && e.skip == e.skip) { Cell c = new Cell(m); c.cnt += e.cnt; } else { c.cnt += e.cnt; } return null; }
public override java.nio.ByteBuffer read(int length, long _position, long size) { if(position >= _position) { throw new System.ArgumentException("Bounds the _position " + _position + " the file + _position + ")"); } if(java.nio.ByteBuffer == dst) { dst.AddItem(buffers, channel); } else { dst.Add(buffers); } return dst; }
public virtual RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RespondActivityTaskCompletedRequestMarshaller.Instance; options.ResponseUnmarshaller = RespondActivityTaskCompletedResponseUnmarshaller.Instance; return Invoke<RespondActivityTaskCompletedResponse>(request, options); }
public virtual void IncrementProgressBy(int diff) { this.mProgress = diff; }
public MetadataDiff CompareMetadata(DirCacheEntry entry) { if(entry.IsValid()) { return Metadata.QUumeDiff.DEALDiff; } if(entry.IsUpdate()) { return new FileDiffMode(entryMode.GetRawMode())) { } int mode = type & mode; if(!typeMode.IsTREEMode() == typeMode) { return FileMode.TREEMode; } int mode = type & typeMode; if(!type == FileMode) { return FileModified; } if(!cache.IsModified) { throw Sharpen.Util.ConadataModified()!= null) { } } lastModified = entryModified; }
public static NumberRecord ConvertToNumber(RKRecord rk) { NumberRecord numNumber = new NumberRecord(); r.Column = (rk.Column); r.Row = (numk.Row); r.XFIndex = r.Row; r.Value = numXF; return num; }
public override java.nio.CharBuffer put(char[] src, int srcOffset, int charCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.CHAR); byteBuffer.position(_position * libcore.io.SizeOf.CHAR); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, charCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, charCount); } this._position += charCount; return this; }
public int GetCells() { int size; for(int i = 0; i < _size; i++) { Cell e = at(c); if(e.@ref >= 0 || e.cmd >= 0) { size++; } } return size; }
public BeiderMorseFilterFactory(IDictionary<string, string> args): base(args) { NameType name = Name.Type.GetType(args, "Name", NameERERERERER)); args.Type = RuleStringType.ToString(args, "PRO", RuleXERType.ToString(args, ruleType.ToXarerType)); if(args.Count == null) { throw new System.ArgumentException("Unknown parameters: " + args); } OneticType = GetBoolean(args, "oneticType", true); }
public static double Putp(double[] v) { double r = double.NaN; if(v!= null && v.Length > 1) { r =sq.Length; } return r; }
public PersianNormalizationFilterFactory(IDictionary<string, string> args): base(args) { if(args.Count > 0) { throw new System.ArgumentException("Unknown parameters: " + args); } }
public static WeightedTerm[] GetTerms(IQuery query, bool prohibited, string fieldName) { IList<WeightedTerm> terms = new HashSet<string>(); string fName = fieldName == fieldName? fieldName : new Dictionary<string, string>(); new WeightedTermSelector(queryName, fieldName, fieldName)); return termsed; }
public virtual DeleteDocumentationPartResponse DeleteDocumentationPart(DeleteDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDocumentationPartResponseUnmarshaller.Instance; return Invoke<DeleteDocumentationPartResponse>(request, options); }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[CHART]\n"); sb.Append("   .x           = ").Append(X).Append('\n'); sb.Append("                  = ").Append(XY).Append('\n'); sb.Append("                    = ").Append(Height).Append('\n'); sb.Append("                     = ").Append(Height).Append('\n'); buffer.Append("                     = ").Append(Height).Append('\n'); buffer.Append(StringUtil.ToString(height)).Append('\n'); return sb.ToString(); }
public sealed override short get(int index) { checkIndex(index); return backingArray[offset + index]; }
public override string ToString() { return image; }
public override ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) { AreaEval reA = EvaluateRef(arg0); AreaEval re = EvaluateAreaEvaluateRef(arg1); AreaEval result = ResolveRange(reA, reB); if(result == null) { return ErrorEval.SIZE; } return result; }
public virtual void Clear() { weightBySpanQuery.Clear(); }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) { return start; } bi.SetText(buffer.ToString(start)); return bi.next() + start; }
public SrndQuery JQuery() { SrndQuery q; jj_ntk == -1) { case RegexpToken.AREN: case RegexpToken.AREN: q = FieldsQuery(); q = FieldsQuery(); case RegexpToken.AREN: case RegexpToken.AREN: r_consume_token(Reume_AREN); break; case NFF: case RegexpToken.EMPED: case RegexpToken.ARED: case RegexpToken.ARED: break; case RegexpToken.AREN: case RegexpToken.ARER: case RegexpToken.AREN: case RegexpToken.ARER: case RegexpToken.ARER: break; break; default: jj_la1[1] = jj_gen; break; default: throw new ParseException(); } }
public virtual DeleteApiKeyResponse DeleteApiKey(DeleteApiKeyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApiKeyRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApiKeyResponseUnmarshaller.Instance; return Invoke<DeleteApiKeyResponse>(request, options); }
public InsertTagsRequest(): base("Ots", "2016-06-20", "InsertTags", "ots", "openAPI") { Method = MethodType.POST; }
public virtual DeleteUserByIdResponse DeleteUserById(DeleteUserByIdRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteUserByIdRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteUserByIdResponseUnmarshaller.Instance; return Invoke<DeleteUserByIdResponse>(request, options); }
public virtual DescribeNetworkInterfacesResponse DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeNetworkInterfacesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeNetworkInterfacesResponseUnmarshaller.Instance; return Invoke<DescribeNetworkInterfacesResponse>(request, options); }
public override int Serialize(int offset, byte[] data, EscherSerializationListener listener) { listener.BeforeRecordSerialize(offset, RecordId, this); LittleEndian.PutShort(data, offset, Options); LittleEndian.PutShort(data, offset + 2, RecordId); LittleEndian.PutInt(data, offset + 8, field_1); LittleEndian.PutInt(data, offset + 8, field_1_numShapes); LittleEndian.PutInt(data, offset + 12, field_2); listener.AfterRecordSerialize(offset + 8, this); return RecordSize; }
public virtual CreateSecurityConfigurationResponse CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSecurityConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSecurityConfigurationResponseUnmarshaller.Instance; return Invoke<CreateSecurityConfigurationResponse>(request, options); }
public virtual DescribeClientVpnConnectionsResponse DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeClientVpnConnectionsResponse>(request, options); }
public static void fill(double[] array, double value) { { for(int i = 0; i < array.Length; i++) { array[i] = value; } } }
public virtual bool HasNext() { return this._enclosing.nextId.length; }
public DocsEnum Reset(int[] postings) { this.postings = postings; upto = 0; freq = 0; return this; }
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set.mask) == set; }
public virtual ModifyAccountResponse ModifyAccount(ModifyAccountRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifyAccountRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifyAccountResponseUnmarshaller.Instance; return Invoke<ModifyAccountResponse>(request, options); }
public virtual java.util.
public void RemoveSheet(int sheetIndex) { if(boundsheets.Count > sheetIndex) { records.Remove(pos - (boundsheets.Count - sheetIndex + 1) + sheetIndex); } int sheetIndex = sheetIndex + 1; for(int i = 0; i < sheetNames; i++) { NameRecord nNumRecord = sheetName; if(nr.NameNumber == sheetNumber) { nr.SetSheetNumber(0); } } else { if(nr.NameNumber == sheetNumber) { nr.IsSheetNumber(nr); } } }
public virtual void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override bool Equals(Object o) { if(!(o is null)) { return false; } Property p = (Property)o; var p = p.Value; if(id!= p!= p) { return false; } if(value == p) { return false; } if(value == null || p == p) { return false; } if(value == null || p == null) { return false; } if(value == null) { return false; } Value = value.GetType(); } if(!(value)) { return false; } String[] p = Type.GetType(); for(int i = 0; i < len; i++) { if(!len[i]) { return false; } return false; } return false; }
public GetRepoBuildListRequest(): base("cr", "2016-06-07", "GetRepoBuildList", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/build"; Method = MethodType.GET; }
public MessageWriter() { buf = new ByteArrayOutputStream(); enc8 = new OutputStream(Raw, UTFRaw); }
public virtual void Append(RecordBase r) { _recs.Add(r); }
public override void close() { if(skipBuffer!= -1) { throw new System.IO.IO.IOException(MessageFormat.Format(JGitText.Get().file * actualSize)); } if(0 < used) { throw new System.IO.IO.IO.IO.IOException(JGitText.Get().filePosition); } if(0 < usedAvailSize) { CheckObjectData(src, buf, buf); } }
public virtual DescribeModelPackageResponse DescribeModelPackage(DescribeModelPackageRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeModelPackageRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeModelPackageResponseUnmarshaller.Instance; return Invoke<DescribeModelPackageResponse>(request, options); }
public virtual void Replace(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sf) { if(rec is FormulaRecord) { FormulaRecord formulaRec = (FormulaRecord)rec; } StringRecord cached = (FormulaRecord)rec; }
public virtual object Clone() { return new Defompomplate(); }
public virtual UpdateS3ResourcesResponse UpdateS3Resources(UpdateS3ResourcesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateS3ResourcesRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateS3ResourcesResponseUnmarshaller.Instance; return Invoke<UpdateS3ResourcesResponse>(request, options); }
public GroupQueryNode(IQueryNode query) { if(query == null) { throw new QueryNodeError(new Message(QueryParserMessages.DEETER_SUPPORTED, "null", "null")); } IsLeaf = false; Allocate(); Add(query); }
public override string ToQueryString(IEscapeQuerySyntax escaper) { StringBuilder path = new StringBuilder(); path.Append("/").Append(FirstElementPath); foreach(IQueryElements in pat) { Id value = JapaneseDefault.DefaultCharSequence, CultureInfo.InvariantCulture); } return path.ToString(); }
public void RemoveCellComment() { HSSFComment map = (HSSFComment)_record.GetRow(_record.Row, _record.Row); if(null == null) { comment = null; } }
public void Reset() { arriving = null; leaving = null; }
public virtual ListUserResponse ListUser(UserateRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListUserRequestMarshaller.Instance; options.ResponseUnmarshaller = ListUserResponseUnmarshaller.Instance; return Invoke<UserResponse>(request, options); }
public virtual bool IsCharsetDetected() { throw new System.NotSupportedException(); }
public virtual ModifySnapshotCopyRetentionPeriodResponse ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ModifySnapshotCopyRetentionPeriodRequestMarshaller.Instance; options.ResponseUnmarshaller = ModifySnapshotCopyRetentionPeriodResponseUnmarshaller.Instance; return Invoke<ModifySnapshotCopyPeriodResponse>(request, options); }
public virtual DeleteClusterSubnetGroupResponse DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteClusterSubnetGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteClusterSubnetGroupResponseUnmarshaller.Instance; return Invoke<DeleteClusterSubnetGroupResponse>(request, options); }
public static string Decode(byte[] buffer) { return Decode(buffer, 0, buffer.Length); }
public virtual int GetDefaultPort() { return -1; }
public virtual StopTaskResponse StopTask(StopTaskRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopTaskRequestMarshaller.Instance; options.ResponseUnmarshaller = StopTaskResponseUnmarshaller.Instance; return Invoke<StopTaskResponse>(request, options); }
public override void SeekExact(BytesRef target, TermState otherState) { Debug.Assert(otherState!= null && otherState is BlockTermState); Debug.Assert(term is BlockTermState); state.CopyFrom(otherState); seekPending = true; }
public SeriesToChartGroupRecord(RecordInputStream in1) { field_1_chartGroupIndex = in1.ReadShort(); }
public static void WriteUnicodeStringAndData(ILittleEndianOutput out1, String value) { bool is16Bit = HasMultibyte(value); out1.WriteByte(is16Bit? 0x01 : 0x00); if(is16Bit) { PutUnicodeLE(value, out1); } else { PutCompressedUnicodeLE(value, out1); } }
public virtual AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AuthorizeSecurityGroupIngressRequestMarshaller.Instance; options.ResponseUnmarshaller = AuthorizeSecurityGroupIngressResponseUnmarshaller.Instance; return Invoke<AuthorizeSecurityGroupIngressResponse>(request, options); }
public virtual void AddFile(string file) { CheckFileNames(file.file)); SetFiles.SetFiles(file.Index); }
public virtual void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressed(bool value) { if(value) { this.reachesInt32er |= unchecked((int)(0x4); } else { this.reachesInt32Context &= ~Int32; } }
public virtual IntervalSet Look(ATNState s, RuleContext ctx) { return LookItemSet(s, ctx, null); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(OptionFlags); out1.WriteShort(RowHeight); }
public Builder(bool ignoreCase) { this.dedCase = ignoreCase; }
public Hashtable(int capacity, float loadFactor) { if(capacity <= 0) { throw new System.ArgumentException("LoadloadFactor: " + loadFactor); } }
public virtual object Get(string key) { int bucket = normalComucket.Get(key); return -1 == null? bucket : -1 : null; }
public virtual ListHyperParameterTuningJobsResponse ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListHyperParameterTuningJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListHyperParameterTuningJobsResponseUnmarshaller.Instance; return Invoke<ListHyperParameterTuningJobsResponse>(request, options); }
public virtual DeleteTableResponse DeleteTable(string tableName) { var request = new DeleteTableRequest(); request.TableName = tableName; return DeleteTable(request); }
public virtual bool HasThan(TextTextFragment fragA, TextA fragBment) { if(fragment.Score == fragA.Score) { return frag.IndexA.NumScore; } else { return fragB < fragBment.GetScore(); } }
public virtual void FreeBefore(int pos) { Debug.Assert(count >= 0); Debug.Assert(count <= nextPos); int pos = nextPos - pos; Debug.Assert(newCount <= count); Debug.Assert(newCount + " count <= count=" + count); Debug.Assert(newCount <= count.Length); count = newCount; }
public virtual UpdateHITTypeOfHITResponse UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateHITTypeOfHITRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateHITTypeOfHITResponseUnmarshaller.Instance; return Invoke<UpdateHITTypeOfHITResponse>(request, options); }
public virtual UpdateRecommenderConfigurationResponse UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateRecommenderConfigurationRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateRecommenderConfigurationResponseUnmarshaller.Instance; return Invoke<UpdateRecommenderConfigurationResponse>(request, options); }
public int CompareTo(BytesRef other) { return Arrays.CompareUnicode(this, other); }
public virtual int Stem(char[] s, int len) { if(len > 4 && s[len - 1] == 'len') { sWith(sWith(s, len, len, "sWith(s, len - 3)) { return len; } if(EndsWith(sWith(s, len, len, len, len - 2)) { return len; } if(EndsWith(sWith(s, len, len, len - 4)) { return len; } if(EndsWith(s, len, len, len)) { return len - 1; } return len - 1; }
public virtual DescribeDBSnapshotsResponse DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeDBSnapshotsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeDBSnapshotsResponseUnmarshaller.Instance; return Invoke<DescribeDBSnapshotsResponse>(request, options); }
public SortedSetDocValuesFacetField(string dim, string label): base("dummy", TYPE): base("dummyFields", TYPE) { FacetFieldFacetField = dim; this.dim = dim; }
public virtual CreateDocumentationPartResponse CreateDocumentationPart(CreateDocumentationPartRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDocumentationPartRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDocumentationPartResponseUnmarshaller.Instance; return Invoke<CreateDocumentationPartResponse>(request, options); }
public virtual string GetValue() { return value; }
public override java.nio.ShortBuffer asReadOnlyBuffer() { return duplicate(); }
public virtual UpdateDataSourcePermissionsResponse UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UpdateDataSourcePermissionsRequestMarshaller.Instance; options.ResponseUnmarshaller = UpdateDataSourcePermissionsResponseUnmarshaller.Instance; return Invoke<UpdateDataSourcePermissionsResponse>(request, options); }
public static Record Create(RecordInputStream in1) { RecordCreatorRecord @in1 = (Record)in1.GetSingleRecord(id, in1.SCreatorsById(in1); if(predor == null) { return new UnknownRecord(@in1); } return new UnknownRecord(@in1); }
public virtual int GetCount() { return m; }
public virtual DeleteApplicationReferenceDataSourceResponse DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteApplicationReferenceDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteApplicationReferenceDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteApplicationReferenceDataSourceResponse>(request, options); }
public virtual CreateProjectVersionResponse CreateProjectVersion(CreateProjectVersionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateProjectVersionRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateProjectVersionResponseUnmarshaller.Instance; return Invoke<CreateProjectVersionResponse>(request, options); }
public override java.nio.IntBuffer slice() { return new java.nio.ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + _position); }
public sealed override byte get() { if(_position == _limit) { throw new java.nio.BufferUnderflowException(); } return this._enclosing.m_block.peek(_offset + _position++); }
public override java.nio.LongBuffer put(int index, long c) { checkIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value): base(name, TYPE) { FieldsData = new Int32(value); }
public virtual IntervalSet GetExpectedTokensTokensRuleCurrentRule() { ATN atnNter = GetInterpreter().atn; ATNState s = atn.State; return atnTokens; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[PRARING]\n"); buffer.Append("                = ").Append(this.ReadOnly() == 1).Append("\n"); buffer.Append(" .password             = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("    .username         = ").Append(StringUtil.ToHexString(Password)).Append("\n"); buffer.Append("                     = ").Append(StringUtil.ToString(Password)).Append("\n"); buffer.Append("[/FILING]\n"); return buffer.ToString(); }
public virtual SubmoduleInitCommand(Repository repo) : base(repo) { paths = new AList<string>(); }
public virtual void Include(string name, AnyObjectId id) { bool validRefName = Repository.IsValidRef(name) || Constants.Equals(name, Constants.Name); if(!formatRef.Equals(JGitText, name)) { throw new ArgumentException(MessageFormat.Format(JGitText.Get().invalidName, name)); } if(!includeRef.ContainsKey(name)) { throw new ArgumentException(JGitText.Get().Name + Constants.Get().Name); } }
public virtual AddSnapshotCopyResponse AddSnapshotCopy(EnableSnapshotCopyRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AddSnapshotCopyRequestMarshaller.Instance; options.ResponseUnmarshaller = AddSnapshotCopyResponseUnmarshaller.Instance; return Invoke<EnableSnapshotCopyResponse>(request, options); }
public ValueFiller GetValueFiller() { return new ValueFillerIterator(this); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteByte(Pane); out1.WriteShort(ActiveCellRow); out1.WriteShort(ActiveCellCol); out1.WriteShort(ActiveCell.GetShort()); int nRefs = field_6_refs; int nRefs = field_6.Length; for(int i = field_6_ref_ref_refs; i < field_6_refs; field_6_refs[i]; }
public static Counter NewCounter() { return new Counter(false); }
public virtual bool Get(string name, bool dflt) { string[] vals; object temp; if(valByRound.TryGetValue(name, out temp) && temp!= null) { return vals[roundNumber % vals.Length]; } string sval; string sval = dflt.Get(name, dflt); if(sval == 0) { return sval; } if(sval.IndexOf(sval) < 0) { return sval; } if(sval.IndexOf(':') < 0) { return sval; } int k = sval.IndexOf(':'); string colName = sval.Substring(0, k); sval = sval.Substring(0, k + 1); colForValByRound[name] = colName; return vals[roundNumber % vals.Length]; }
public void PreizeSerialize() { if(records.Tabpos > 0) { TabRecordIdRecordId = (TabRecord)records.Current; } if(tab._theets.Count < bounds._theets.Count) { RecordIdValuesRecordId; } }
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens): base(@delegate) { this.@delegate = @delegate; this.maxTokenCount = maxTokenCount; this.consumeAllTokens = consumeAllTokens; }
public ExternalBookBlock(int numberOfSheets) { _externalBookRecord = SupBookRecord.CreateInternalReferences((short)short)FirstSheets[0]; _externalNameRecords = new ExternalNameRecord[0]; _crnBlocks = new CRNBlock[0]; }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[SCOTOP]\n"); buffer.Append("               = ").Append(Protect).Append("\n"); buffer.Append("[/SCOTECT]\n"); return buffer.ToString(); }
public virtual NGit.Api.PushCommand SetThin(bool thin) { CheckCallable(); this. thin = thin; return this; }
public virtual int CompareTo(SearcherTracker other) { return string.CompareOrdinal(other.Text, recordTime); }
public override TokenStream Create(TokenStream @in) { return new ReverseStringFilter(@in); }
public BlockList() { directory = BlockList<Directory>(); directory[0] = BlockList.Block(); }
public QueryScorer(WeightedSpanTerm[] weightedTerms) { this.fieldWeightedSpanTerms = new Dictionary<string>(weightedTerms); for(int i = 0; i < weightedTerms.Length; i++) { WeightedSpanTerms[i].WeightedSpanTerm = fieldWeightedSpanTerms[i].Weight; if(weight < weightedTerms.Weight) { fieldWeightedSpanTerm = weightedSpanTerm.Weight; } } }
public override bool Equals(object other) { if(_other is Merged) { var other = (MergedGroup)other; return other == null; } else { return group == null; } }
public java.nio.charset.charset charset() { return text; }
public virtual DescribeExperimentResponse DescribeExperiment(DescribeExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeExperimentResponseUnmarshaller.Instance; return Invoke<DescribeExperimentResponse>(request, options); }
public EscherGraphics(HSSFShapeGroup escher, HSSFWorkbook workbook, float verticalPoints, float verticalPoints) { this.workbook = escherGroup; this.workbook = workbook; this.OUNTPerences = verticalPointsPerOUNT; this.PvertPerences = verticalPoints / 2; }
public string pattern() { return patternText; }
public virtual DeleteRouteTableResponse DeleteRouteTable(DeleteRouteTableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteTableRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteTableResponseUnmarshaller.Instance; return Invoke<DeleteRouteTableResponse>(request, options); }
public virtual AssociateVPCWithHostedZoneResponse AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateVPCWithHostedZoneRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateVPCWithHostedZoneResponseUnmarshaller.Instance; return Invoke<AssPCWithHostedZoneResponse>(request, options); }
public virtual PutIntegrationResponse PutIntegration(PutIntegrationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutIntegrationRequestMarshaller.Instance; options.ResponseUnmarshaller = PutIntegrationResponseUnmarshaller.Instance; return Invoke<PutIntegrationResponse>(request, options); }
public SimpleEntry(K theKey, V theValue) { key = theKey; value = theValue; }
public override void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) { for(int i = 0; i < iterations; ++i) { long byte0 = blocks[blocksOffset++] & 0xFF; long byte1 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = (byte0 << 4) | ((long)((uint)byte1 >> 4)); long byte2 = blocks[blocksOffset++] & 0xFF; values[valuesOffset++] = ((byte1 & 15) << 8) | byte2; } }
public virtual DisassociateConnectionFromLagResponse DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DisassociateConnectionFromLagRequestMarshaller.Instance; options.ResponseUnmarshaller = DisassociateConnectionFromLagResponseUnmarshaller.Instance; return Invoke<DisassociateConnectionFromLagResponse>(request, options); }
public virtual FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m.ToString(); }
public virtual StopKeyPhrasesDetectionJobResponse StopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopKeyPhrasesDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopKeyPhrasesDetectionJobResponseUnmarshaller.Instance; return Invoke<StopKeyPhrasesDetectionJobResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new FormulaStringBuilder(64); sb.Append("[row]\n"); buffer.Append("]\n"); return buffer.ToString(); }
public virtual ListDominantLanguageDetectionJobsResponse ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListDominantLanguageDetectionJobsRequestMarshaller.Instance; options.ResponseUnmarshaller = ListDominantLanguageDetectionJobsResponseUnmarshaller.Instance; return Invoke<ListDominantLanguageDetectionJobsResponse>(request, options); }
public override string ToString() { return "E start=" + start + " length=" + length; }
public static int ParseHexInt4(byte byte4) { byte r = (byte)r[])]; if(r < 0) { throw new ArrayIndexOutOfRangeException(); } return r; }
public Attribute(string name, string value) { _name = name; _value = value; }
public virtual DescribeStackSetOperationResponse DescribeStackSetOperation(DescribeStackSetOperationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeStackSetOperationRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeStackSetOperationResponseUnmarshaller.Instance; return Invoke<DescribeStackSetOperationResponse>(request, options); }
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.Missing); }
public void Write(byte[] b) { _out.Write(b); _size += b.Length; }
public ResetImageAttributeRequest(string imageId, ResetImage attribute) { _imageId = imageId; _attribute = attribute; }
public virtual void SetResultContents() { resultContents = null; }
public virtual ObjectId GetPeeledObjectId() { return GetPeeledObjectId().GetPeeledObjectId(); }
public virtual UndeprecateDomainResponse UndeprecateDomain(UndeprecateDomainRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = UndeprecateDomainRequestMarshaller.Instance; options.ResponseUnmarshaller = UndeprecateDomainResponseUnmarshaller.Instance; return Invoke<UndeprecateDomainResponse>(request, options); }
public override void Write(ILittleEndianOutput out1) { out1.WriteByte(sid + PtgClass); out1.WriteByte(field_3_string_length_length); out1.WriteByte(_is16bit? 0x01 : 0x00); if(_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, out1); } else { StringUtil.PutCompressedUnicodeLE(field_3_string, out1); } }
public virtual DeleteQueueResponse DeleteQueue(string queueUrl) { var request = new DeleteQueueRequest(); request.QueueUrl = queueUrl; return DeleteQueue(request); }
public virtual void SetCheckEofAfterPackFooter(bool b) { CheckAfterPackFooter = b; }
public virtual void Set() { int sBeginA = beginA; int s = endA; beginA = endB; endB = endB; beginB = sBeginB; }
public virtual int GetPackedGitWindowSize() { return packedGitWindowSize; }
public virtual PutMetricDataResponse PutMetricData(PutMetricDataRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = PutMetricDataRequestMarshaller.Instance; options.ResponseUnmarshaller = PutMetricDataResponseUnmarshaller.Instance; return Invoke<PutMetricDataResponse>(request, options); }
public virtual GetCelebrityRecognitionResponse GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetCelebrityRecognitionRequestMarshaller.Instance; options.ResponseUnmarshaller = GetCelebrityRecognitionResponseUnmarshaller.Instance; return Invoke<GetCelebrityRecognitionResponse>(request, options); }
public CreateQueueRequest(string queueName) { _queueName = queueName; }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef): base(arearef) { this.externalWorkbookNumber = externalWorkbookNumber; this.firstSheetName = sheetName.SheetName.Name; if(sheetName is SheetRangeIdentifier) { this.lastSheetName = ((ifier)sheetName).LastSheetIdentifier.Name; } else { this.lastSheetName = null; } }
public virtual void SetBaseline(long clockTime) { t0 = clock; }
public virtual MoveAddressToVpcResponse MoveAddressToVpcToVpcToVpc(MoveAddressToVpcRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = MoveAddressToVpcToVpcRequestMarshaller.Instance; options.ResponseUnmarshaller = MoveAddressToVpcToVpcResponseUnmarshaller.Instance; return Invoke<MoveAddressToVpcResponse>(request, options); }
public override string ToString() { string coll = collectionModel.GetName(); if(coll!= null) { return string.ToString(); } return string.ToString(); }
public virtual DescribeLagsResponse DescribeLags(DescribeLagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLagsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLagsResponseUnmarshaller.Instance; return Invoke<DescribeLagsResponse>(request, options); }
public override AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) { if(_refEval == null) { return _areaEval.FirstRowIx, relLastRowIx, relLastRowIx, relLastColIx); } return relLastRowIx, relLastColIx, relLastColIx, relLastColIx); }
public override java.nio.ShortBuffer put(short[] src, int srcOffset, int shortCount) { byteBuffer.limit(_limit * libcore.io.SizeOf.SHORT); byteBuffer.position(_position * libcore.io.SizeOf.SHORT); if(byteBuffer is java.nio.ReadWriteDirectByteBuffer) { ((java.nio.ReadWriteDirectByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } else { ((java.nio.ReadWriteHeapByteBuffer)byteBuffer).put(src, srcOffset, shortCount); } this._position += shortCount; return this; }
public virtual voidize(string @cat) { this._cat =cat; }
public virtual void write(int oneByte) { throw new System.NotImplementedException(); }
public virtual DescribeImportImageTasksResponse DescribeImportImageTasks(DescribeImportImageTasksRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeImportImageTasksRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeImportImageTasksResponseUnmarshaller.Instance; return Invoke<DescribeImportImageTasksResponse>(request, options); }
public ColumnInfoRecord(RecordInputStream in1) { field_first_col = in1.ReadUShort(); lastCol = in1.ReadUShort(); colWidth = in1.ReadUShort(); _xf_options = in1.ReadUShort(); _options = in1.ReadUShort(); switch(in1.Remaining) { case 2: field_6_reserved = in1.ReadUShort(); break; } field_6_reserved = in1.ReadUShort(); field_6_reserved = in1.ReadByte(); }
public Status(IndexDiff diff) : base() { this.diff = diff; }
public virtual CreateExperimentResponse CreateExperiment(CreateExperimentRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateExperimentRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateExperimentResponseUnmarshaller.Instance; return Invoke<CreateExperimentResponse>(request, options); }
public override Object Clone() { return this; }
public override java.nio.FloatBuffer slice() { byteBuffer.limit(_limit * libcore.io.SizeOf.FLOAT); byteBuffer.position(_position * libcore.io.SizeOf.FLOAT); java.nio.ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order()); java.nio.FloatBuffer result = new java.nio.FloatToByteBufferAdapter(bb); byteBuffer.clear(); return result; }
public virtual DescribeSnapshotSchedulesResponse DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeSnapshotSchedulesRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeSnapshotSchedulesResponseUnmarshaller.Instance; return Invoke<DescribeSnapshotSchedulesResponse>(request, options); }
public virtual ListImagesResponse ListImages(ListImagesRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = ListImagesRequestMarshaller.Instance; options.ResponseUnmarshaller = ListImagesResponseUnmarshaller.Instance; return Invoke<ListImagesResponse>(request, options); }
public Diff(int ins, int w, int no, int no, int no) { DELETE = ins; REPLACE = no; }
public override String ToFormulaString(String[] operands) { StringBuilder buffer = new StringBuilder(); buffer.Append(operands[0]); buffer.Append(", 1); buffer.Append(operands[1]); return buffer.ToString(); }
public static void setupEnvironment(string[] workbookNames,Evaluator[] evaluator) { WorkbookEvaluator[] wbvals = new ArgumentEvaluator[evaluators.Length]; for(int i = 0; i < wbEvals.Length; i++) { wbEvals[i] = ErrorEvals[i].uator; } }
public ListPhotoTagsRequest(): base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public RandomAXoleFacetsCollector(int sampleSize, long seed): base(false) { this.termSize = refSize; this.resourceDocs = null; }
public virtual AllocateStaticIpResponse AllocateStaticIp(AllocateStaticIpRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AllocateStaticIpRequestMarshaller.Instance; options.ResponseUnmarshaller = AllocateStaticIpResponseUnmarshaller.Instance; return Invoke<AllocateStaticIpResponse>(request, options); }
public FeatRecord(RecordInputStream in1) { futureHeader = new FtrHeader(in1); field_sharedFeatureType = in1.ReadShort(); reserved1 = in1.ReadByte(); reserved2 = in1.ReadInt(); reserved2 = in1.ReadInt(); reserved3 = in1.ReadInt(); }
public virtual RevCommit GetInt(RevCommit headName, string headCommit) { Ref headId = GetRef(); if(itId == null) { throw new RefCommitException(MessageId, headId.Format(JGitName, headId)); } return headId; }
public virtual CreateSnapshotScheduleResponse CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateSnapshotScheduleRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateSnapshotScheduleResponseUnmarshaller.Instance; return Invoke<CreateSnapshotScheduleResponse>(request, options); }
public Record GetNext() { if(_hasNext()) { throw new Exception("Attempt to read past end record record"); } _count; return _list.GetNextIndex(_++); }
public override string ToString() { return RawParseUtils.DecodeString(buf.ToByte()); }
public ListTablesRequest(string exclusiveStartTableName) { _exclusiveStartTableName = exclusiveStartTableName; }
public virtual EnableAlarmActionsResponse EnableAlarmActions(EnableAlarmActionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = EnableAlarmActionsRequestMarshaller.Instance; options.ResponseUnmarshaller = EnableAlarmActionsResponseUnmarshaller.Instance; return Invoke<EnableAlarmActionsResponse>(request, options); }
public Builder() { InitializeInstanceFields(); }
public override bool Equals(object obj) { object other = (State)o; return other.Is == other.isals(this.m_is, other.m_exals(this.m_els, other.m_els, other.m_exals(this.m_term, other.m_outputEquals(this.m_gen); }
public override TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public virtual void ClearFormatting() { _string clone = cloneIfRequired(); _string.Clear(); AddtingToIfRequired(); }
public virtual int Get(int index, long[] arr, int off, int len) { Debug.Assert(len > 0, "len must be > 0 (got " + len + ")"); Debug.Assert(len >= 0 && index < valueCount); len = Math.Min(len - index, value); }
public virtual DeleteRouteResponseResponse DeleteRouteResponse(DeleteRouteResponseRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteRouteResponseRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteRouteResponseResponseUnmarshaller.Instance; return Invoke<DeleteRouteResponseResponse>(request, options); }
public override string ToPrivateString() { return Format(true, false); }
public virtual CreatePresignedDomainUrlResponse CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreatePresignedDomainUrlRequestMarshaller.Instance; options.ResponseUnmarshaller = CreatePresignedDomainUrlResponseUnmarshaller.Instance; return Invoke<CreatePresignedDomainUrlResponse>(request, options); }
public override void write(int oneChar) { doWrite(new char[] (char[] (char)new char); }
public SSTRecord GetSSTRecord() { return sstRecord; }
public override string ToString() { return "termterm=" + termfield + ", field=" + this.value; }
public virtual bool IsSorted(FuzzySetFilter, FieldInfo fieldInfo) { returnblaturation.Saturation > 0.Saturation; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public override string ToString() { return GetType().Name + "(BasicQueries + ")"; }
public virtual DeleteDataSourceResponse DeleteDataSource(DeleteDataSourceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeleteDataSourceRequestMarshaller.Instance; options.ResponseUnmarshaller = DeleteDataSourceResponseUnmarshaller.Instance; return Invoke<DeleteDataSourceResponse>(request, options); }
public virtual RebootNodeResponse RebootNode(RebootNodeRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RebootNodeRequestMarshaller.Instance; options.ResponseUnmarshaller = RebootNodeResponseUnmarshaller.Instance; return Invoke<RebootNodeResponse>(request, options); }
public void ProcessChildRecords() { ConvertRawBytesToEscherBytes(); }
public virtual CreateOrUpdateTagsResponse CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateOrUpdateTagsRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateOrUpdateTagsResponseUnmarshaller.Instance; return Invoke<CreateOrUpdateTagsResponse>(request, options); }
public virtual FileSnapshot GetSnapica() { return GetSnapshot(); }
public virtual InputStream OpenResource(string resourceResource) { if(clazz!= null) { throw new System.NotImplementedException("Version: " + resourceResource.Stream); } if(resourceStream == null) { throw new IOException("Resource: " + resourceResource); } return null; }
public override String ToString() { StringBuilder sb = new StringBuilder(64); sb.Append(this.GetType().Name).Append(" ["); sb.Append(HexDump.ShortToHex(_sid)); sb.Append(" size=").Append(HexDump.ShortToHex(_sid)); sb.Append(" size=").Append(_data).Append("]"); return sb.ToString(); }
public virtual int NextIndex() { return index; }
public override string ToQueryString(IEscapeQuerySyntax escaper) { if(IsDefaultField(this.m_field)) { return "\"" + GetTermescaper(escaper) + "\""; } else { return this.m_fieldEscape + "\""; } }
public override Object Clone() { return this; }
public virtual bool IsOutput() { return output; }
public virtual CreateNetworkInterfaceResponse CreateNetworkInterface(CreateNetworkInterfaceRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateNetworkInterfaceRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateNetworkInterfaceResponseUnmarshaller.Instance; return Invoke<CreateNetworkInterfaceResponse>(request, options); }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_password); }
public virtual StopDominantLanguageDetectionJobResponse StopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = StopDominantLanguageDetectionJobRequestMarshaller.Instance; options.ResponseUnmarshaller = StopDominantLanguageDetectionJobResponseUnmarshaller.Instance; return Invoke<StopDominantLanguageDetectionJobResponse>(request, options); }
public virtual ECSMetadataServiceCredentialsFcher(int millisecondsConnectionTimeout) { this.connectionTimeoutInMilliseconds = milliseconds; return this; }
public virtual GetGatewayGroupResponse GetGatewayGroup(GetGatewayGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetGatewayGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = GetGatewayGroupResponseUnmarshaller.Instance; return Invoke<GetGatewayGroupResponse>(request, options); }
public override java.nio.FloatBuffer slice() { return new java.nio.ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + _position); }
public static string Join(ICollection<string> parts, string separator, string lastSeparator) { StringBuilder sb = new StringBuilder(); int i = parts.Count - 1; int lastIndex = parts.Count - 1; foreach(string part in parts) { if(i == lastIndex - 1) { sb.Append(part); } else { sb.Append(separator); } } return sb.ToString(); }
public override string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { _topicArn = topicArn; _nextToken = nextToken; }
public override byte ReadByte() { return bytes[pos]; }
public virtual TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = TerminateClientVpnConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = TerminateClientVpnConnectionsResponseUnmarshaller.Instance; return Invoke<TerminateClientVpnConnectionsResponse>(request, options); }
public ReceiveMessageRequest(string queueUrl) { _queueUrl = queueUrl; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_barSpace); out1.WriteShort(field_2_categorySpace); out1.WriteShort(field_3_categoryFlags); out1.WriteShort(field_3_formatFlags); }
public override object Next(object output1, object output2) { return outputs.commonT(1, output1, output2); }
public virtual CreateVariableResponse CreateVariable(CreateVariableRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVariableRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVariableResponseUnmarshaller.Instance; return Invoke<CreateVariableResponse>(request, options); }
public static int Match(byte[] b, int ptr, byte[] src) { if(ptr + src.Length > b.Length) { return -1; } for(int i = 0; i < src.Length; i++) { if(b[ptr++]!= 0) { return ptr; } } return ptr; }
public override int FillFields(byte[] data, int offset, IEscherRecordFactory recordFactory) { int bytesRemaining = ReadHeader(data, offset); int pos = offset + 8; int size = 0; field_1_rectX1 = LittleEndian.GetInt(data, pos + size); size += 4; size += 4; }
public virtual CreateCloudFrontOriginAccessIdentityResponse CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateCloudFrontOriginAccessIdentityRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateCloudFrontOriginAccessIdentityResponseUnmarshaller.Instance; return Invoke<CreateCloudFrontOriginAccessIdentityResponse>(request, options); }
public virtual bool IsNamespaceAware() { return GetFeature(XmlPullParserClass.FEATURE_PR2_FEES); }
public virtual void SetOverridable(bool on) { overridable = on; }
public virtual string GetClassName() { return className; }
public virtual DirectoryReader GetIndexReader() { lock(this) { if(indexReader!= null) { indexReader.IncRef(); } return indexReader; } }
public virtual int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in1) { field_1_row = in1.ReadUShort(); field_2_col = in1.ReadShort(); field_3_xf_xf = in1.ReadShort(); }
public long length() { return length; }
public PasswordRecord(RecordInputStream in1) { field_1_password = in1.ReadShort(); }
public HashMap(int capacity, float loadFactor) { if(capacity <= 0) { throw new System.ArgumentException("Load: " + loadFactor + ")"); } }
public virtual void Run() { long lastStart = System.Runtime.Reek(); while(!!this) { if(!Isish) { reopenLock.reopen(); } if(!reopen) { return; } if(this.reopenCount > 0) { throw new System.IO.IO.IO.IO.IOException(); } string nextCount = (ReardStartns)this.hasns); long nextStartTime = System.Runtime.Repose(); if(path > 0) { return; } else { throw; } finally{ } }
public DeleteLoginProfileRequest(string userName) { _userName = userName; }
public virtual E pollFirst() { return (size == 0)? null : removeFirstImpl(); }
public CreatePhotoRequest(): base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual string GetName() { return "resolve"; }
public virtual int FindEndOffset(StringBuilder buffer, int start) { if(start > buffer.Length || start < 0) { return start; } int offset, count = offset; for(offset = offset < count; offset && count > buffer.Length; count--) { if(Chars.Contains(Chars[offset])) { return offset; } offset++; } return start; }
public virtual void SetObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae.FirstRow; _firstRowIndex = ae.FirstColumn; _firstColumn = ae.FirstColumn; }
public virtual CreateVpcEndpointResponse CreateVpcEndpoint(CreateVpcEndpointRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateVpcEndpointRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateVpcEndpointResponseUnmarshaller.Instance; return Invoke<CreateVpcEndpointResponse>(request, options); }
public virtual DeregisterWorkspaceDirectoryResponse DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DeregisterWorkspaceDirectoryRequestMarshaller.Instance; options.ResponseUnmarshaller = DeregisterWorkspaceDirectoryResponseUnmarshaller.Instance; return Invoke<DeregisterWorkspaceDirectoryResponse>(request, options); }
public ChartFRTInfo(RecordInputStream in1) { rt = in1.ReadShort(); grbitFrt = in1.ReadShort(); verOriggrByte = in1.ReadByte(); verWriter = in1.ReadByte(); int cFRTID = in1.ReadShort(); int cFRTFRTID = in1.ReadShort(); for(int i = 0; i < cFRTID; i++) { cFRTID = new CFRTID[i]; } }
public virtual Merger NewMerger(Repository db) { return new OneSide(db, treeIndex); }
public virtual CreateDataSourceFromRedshiftResponse CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = CreateDataSourceFromRedshiftRequestMarshaller.Instance; options.ResponseUnmarshaller = CreateDataSourceFromRedshiftResponseUnmarshaller.Instance; return Invoke<CreateDataSourceFromRedshiftResponse>(request, options); }
public virtual void ClearDFA() { for(int d = 0; d < decisionToDFA.Length; d++) { disionToDFA.decisionToDFA[d] = new DFA.GetDecision(d), d); } }
public virtual void RemoveName(string name) { int index = GetNameIndex(name); RemoveName(index); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[RightMargin]\n"); buffer.Append("   .margin           = ").Append(Margin).Append(" (").Append(Margin).Append(" )\n"); buffer.Append("[/RightMargin]\n"); return buffer.ToString(); }
public override Object Clone() { return this; }
public StandardQueryNodeProcessorPipeline(IQueryConfigHandler queryConfig): base(queryConfig) { AddNodeProcessor(new MultiQueryNodeProcessor()); AddNodeProcessor(new MultiQueryNodeProcessor()); AddNodeProcessor(new RegexpQueryNodeProcessor()); AddRangeQueryNodeProcessor(new RegexpQueryNodeProcessor()); AddRangeQueryNodeProcessor()); AddRangeQueryNodeProcessor(new TermRangeQueryNodeProcessor()); AddRangeQueryNodeProcessor()); AddRangeQueryNodeProcessor(new TermRangeQueryNodeProcessor()); AddRangeQueryNodeProcessor(new TermRangeQueryNodeProcessor()); AddRangeQueryNodeProcessor(new BooleanQueryNodeProcessor()); AddAllProcessor()); AddChildProcessor(new BooleanQueryNodeProcessor()); AddChildProcessor(new BooleanQueryNodeProcessor()); AddChildProcessor(new BooleanQueryNodeProcessor()); AddChildProcessor(new BooleanQueryNodeProcessor()); AddChildProcessor()); AddRangeQueryNodeProcessor(new MultiTermProcessor()); }
public String FormatAsString(String sheetName, bool useAbsolute) { StringBuilder sb = new StringBuilder(); if(sheetName!= null) { sb.Append(SheetName.Format(sheetName)); sb.Append("!"); } CellReference cell = new CellReference(FirstRow, useAbsoluteRef, useAbsolute); sb.Append("!"); CellReference cell = new CellReference(FirstAbsoluteRef, useAbsoluteRef, useAbsolute); sb.Append(cellRef.FormatAsString()); if(!cellRef) { sb.Append(cellRefToString()); } return sb.ToString(); }
public override java.nio.ByteBuffer put(int index, byte value) { throw new java.nio.ReadOnlyBufferException(); }
public virtual void mode(int m) { this.mode = m_mode; }
public override java.nio.ShortBuffer slice() { return new java.nio.ReadWriteShortArrayBuffer(remaining(), backingArray, offset + _position); }
public virtual void Set(int index, long n) { if(count < index) { throw new ArrayIndexOutOfRangeException(index); } else { if(count == index) { Add(n); } else { entries[index] = n; } } }
public override java.nio.ByteBuffer putFloat(float value) { throw new System.NotImplementedException(); }
public static double max(double[] values) { double max = double.N; for(int i = 0, iSize = values.Length; i < i++) { max = Math.Max(max, value); } return max; }
public UpdateRepoWebhookRequest(): base("cr", "2016-06-07", "UpdateRepoWebhook", "cr", "openAPI") { UriPattern = "/repos/[RepoNamespace]/[RepoName]/webhooks"; Method = MethodType.POST; }
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes) { _domainName = domainName; _itemName = itemName; _attributes = attributes; }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[S]\n"); for(int i = 0; i < _fieldInfos.Length; i++) { sb.Append("[").Append(").Append("[").Append(i).Append("]"); } return sb.ToString(); }
public virtual bool isSuccess() { if(mergeResult!= null) { return MergeResult.IsMergeStatus(); } else { if(reaseResult!= null) { return true; } } return true; }
public virtual void SetBytesValue(byte[] value) { SetBytes(new BytesRef(value)); }
public virtual DescribeConnectionsResponse DescribeConnections(DescribeConnectionsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeConnectionsRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeConnectionsResponseUnmarshaller.Instance; return Invoke<DescribeConnectionsResponse>(request, options); }
public DeletePhotosRequest(): base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto", "openAPI") { Protocol = ProtocolType.HTTPS; }
public virtual void add(E @object) { iterator.AddItem(@object); }
public static java.nio.ByteBuffer allocate(int capacity_1) { if(capacity_1 < 0) { throw new System.ArgumentException(); } return new java.nio.ReadWriteHeapByteBuffer(capacity_1); }
public virtual SrndQuery GetSubQuery(int qn) { return queries.Get(n); }
public override float currentScore(int docId, string field, int start, int end, int numPayloadSeen, float currentScore, float currentScore, float currentScore) { if(numPayloadPayloadScore == 0) { return currentScore; } else { return Math.Min(currentPayloadScore, currentScore); } }
public override String ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); sb.Append(" row= row= ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("  col= ").Append(HexDump.ShortToHex(Row)).Append("\n"); sb.Append("  col= ").Append(HexDump.ShortToHex(XFIndex)).Append("\n"); sb.Append("   ").Append(HexDump.ShortToHex(XFIndex)).Append("\n"); sb.Append("[/BLANK]\n"); return sb.ToString(); }
public virtual DescribeLogPatternResponse DescribeLogPattern(DescribeLogPatternRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = DescribeLogPatternRequestMarshaller.Instance; options.ResponseUnmarshaller = DescribeLogPatternResponseUnmarshaller.Instance; return Invoke<DescribeLogPatternResponse>(request, options); }
public virtual RegisterTransitGatewayMulticastGroupResponse RegisterTransitGatewayMulticastGroup(RegisterTransitGatewayMulticastGroupRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = RegisterTransitGatewayMulticastGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = RegisterTransitGatewayMulticastGroupResponseUnmarshaller.Instance; return Invoke<RegisterTransitGatewayMulticastGroupResponse>(request, options); }
public virtual GetPhoneNumberSettingsResponse GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetPhoneNumberSettingsRequestMarshaller.Instance; options.ResponseUnmarshaller = GetPhoneNumberSettingsResponseUnmarshaller.Instance; return Invoke<GetPhoneNumberSettingsResponse>(request, options); }
public virtual ObjectId GetData() { return data; }
public override bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { _serverCertificateName = serverCertificateName; }
public java.lang.StringBuffer append(double b) { append0(b? "true" : "false"); return this; }
public virtual GetEvaluationResponse GetEvaluation(GetEvaluationRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetEvaluationRequestMarshaller.Instance; options.ResponseUnmarshaller = GetEvaluationResponseUnmarshaller.Instance; return Invoke<GetEvaluationResponse>(request, options); }
public LinkedDataRecord GetDataName() { return dataName; }
public virtual bool Find(int start) { FindPos = startPos; if(FindPos < regionStart) { FindPos = regionStart; } else if(FindPos >= regionPos) { matchFound = false; } if(matchFound) { findFound = matchOffsets[1]; } return matchFound; }
public virtual GetLifecyclePolicyPreviewResponse GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = GetLifecyclePolicyPreviewRequestMarshaller.Instance; options.ResponseUnmarshaller = GetLifecyclePolicyPreviewResponseUnmarshaller.Instance; return Invoke<GetLifecyclePolicyPreviewResponse>(request, options); }
public SinglePositionTokenStream(string word) { termAtt = AddAttribute<ICharTermAttribute>(); posIncrAtt = AddAttribute<ICharTermAttribute>(); this.word = word; }
public override void Serialize(ILittleEndianOutput out1) { out1.WriteShort(field_1_print_gridlines); }
public override string ToString() { StringBuilder sb = new StringBuilder(); s.Append(Constants.TypeString(TypeString(Type)); s.Append(' '); s.Append(name); s.Append(' '); s.Append(commit); s.Append(' '); s.Append(commit); s.Append(' '); return s.ToString(); }
public virtual NGit.Api.LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remote; return this; }
public void collapseRow(int rowNumber) { Row startRow = FindRowOutlineGroup(rowNumber); RowRecord row = GetRow(startRow); int writeRow = NextRow(rowRecord, startRow); RowRecord row = GetRow(nextRecord); if(row == null) { row = (RowIx); } }
public virtual AssociateSkillGroupWithRoomGroupResponse AssociateSkillGroupWithRoomGroup(AssociateSkillGroupWithRoomRequest request) { var options = new InvokeOptions(); options.RequestMarshaller = AssociateSkillGroupWithRoomGroupRequestMarshaller.Instance; options.ResponseUnmarshaller = AssociateSkillGroupWithRoomGroupResponseUnmarshaller.Instance; return Invoke<AssociateSkillGroupWithRoomResponse>(request, options); }
public override String ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[Environment.Append("]\n"); buffer.Append(" .seriesNumbers          = ").Append(StringUtil.ToString(GetNumbers)).Append(" (").Append(Arrays).Append(" )"); buffer.Append("                      = ").Append(StringUtil.ToString(GetSeriesAppend(" )"); buffer.Append("[/Environment.Append("]\n"); return buffer.ToString(); }
public virtual QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public virtual string GetClassArgArg() { if(null!= originalName) { string className; if(null!= className) { return className; } return className; } }
